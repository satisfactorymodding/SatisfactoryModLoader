// This file has been automatically generated by the Unreal Header Implementation tool

#include "CommonSessionSubsystem.h"

#include "SessionsCommon.h"

namespace UE::Online
{
	class FSessionCommon;
}

UE_DEFINE_GAMEPLAY_TAG(FSessionTraitTags::HasFindFriendSessionSupport, TEXT("Test.test"));
FOnJustAboutToTravel FSessionDelegates::OnJustAboutToTravel = FOnJustAboutToTravel();
USessionMigrationSequence* UCommonSessionSubsystem::CreateSessionCreationSequence(const FCommonSessionCreationSettings &SessionSettings){ return nullptr; }
USessionMigrationSequence* UCommonSessionSubsystem::CreateSessionJoiningSequence(const FSessionJoinParams& JoinParams){ return nullptr; }
TFuture<USessionInformation*> UCommonSessionSubsystem::FetchFriendSession(UOnlineFriend* Friend, UOnlineIntegrationBackend* Backend){ return TFuture<USessionInformation*>(); }
UE::Online::TOnlineResult<UE::Online::FGetSessionByName> UCommonSessionSubsystem::GetSessionByName(UE::Online::FGetSessionByName::Params&& Params, UOnlineIntegrationBackend* Backend){ return UE::Online::TOnlineResult<UE::Online::FGetSessionByName>({TSharedPtr<UE::Online::ISession>().ToSharedRef()}); }
bool UCommonSessionSubsystem::IsProviderNameSupported(const FString& ProviderName){ return bool(); }
UE::Online::FOnlineSessionId UCommonSessionSubsystem::MakeOnlineSessionId(const FString& SessionIdString){ return UE::Online::FOnlineSessionId(); }
FString UCommonSessionSubsystem::OnlineSessionIdToString(UE::Online::FOnlineSessionId SessionId){ return FString(); }
FString UCommonSessionSubsystem::ToString_OnlineSessionBackendLink(UOnlineSessionBackendLink* SessionBackendLink){ return FString(); }
TFuture<UE::Online::TOnlineResult<UE::Online::FLeaveSession>> UCommonSessionSubsystem::DestroySession(ULocalUserInfo* LocalUserInfo, FName SessionName, UOnlineIntegrationBackend* Backend){ return TFuture<UE::Online::TOnlineResult<UE::Online::FLeaveSession>>(); }
FString UCommonSessionSubsystem::GetStringAttributeFromSession(const FCommonSession& Session, FName Key) const{ return FString(); }
int64 UCommonSessionSubsystem::GetIntAttributeFromSession(const FCommonSession& Session, FName Key) const{ return int64(); }
double UCommonSessionSubsystem::GetDoubleAttributeFromSession(const FCommonSession& Session, FName Key) const{ return double(); }
bool UCommonSessionSubsystem::GetBoolAttributeFromSession(const FCommonSession& Session, FName Key) const{ return bool(); }
bool UCommonSessionSubsystem::IsValidSession(const FCommonSession& Session){ return bool(); }
TSharedPtr<const UE::Online::ISession> UCommonSessionSubsystem::GetSession(const FCommonSession& SessionHandle) const{ return MakeShared<const UE::Online::FSessionCommon>(); }
void UCommonSessionSubsystem::JoinStartupSession(ULocalUserInfo* LocalUserInfo, FName SessionName){ }
const TArray<FNetDriverDefinition>& UCommonSessionSubsystem::GetDefaultNetDriverDefinitions() const{ return *(new TArray<FNetDriverDefinition>); }
void UCommonSessionSubsystem::SetPendingJoinRequest(const UE::Online::FUISessionJoinRequested& JoinRequest){ }
void UCommonSessionSubsystem::RegisterSessionBackendMapping(UE::Online::FOnlineSessionId OnlineSessionId, UOnlineSessionBackendLink* SessionBackend){ }
TFuture<USessionInformation*> UCommonSessionSubsystem::ResolveOnlineSession(ULocalUserInfo* LocalUser, UOnlineSessionBackendLink* BackendLink){ return TFuture<USessionInformation*>(); }
TFuture<USessionInformation*> UCommonSessionSubsystem::ResolveOnlineSession(ULocalUserInfo* LocalUser, UE::Online::FOnlineSessionId SessionId){ return TFuture<USessionInformation*>(); }
UOnlineSessionBackendLink* UCommonSessionSubsystem::FindOrCreateSessionBackendLink(UE::Online::FOnlineSessionId SessionId){ return nullptr; }
UOnlineSessionBackendLink* UCommonSessionSubsystem::CreateSessionBackendLink(UE::Online::FOnlineSessionId SessionId){ return nullptr; }
UOnlineSessionBackendLink* UCommonSessionSubsystem::FindSessionBackendLink(UE::Online::FOnlineSessionId SessionId){ return nullptr; }
USessionInformation* UCommonSessionSubsystem::GetOnlineSessionInfo(UE::Online::FOnlineSessionId SessionId){ return nullptr; }
void UCommonSessionSubsystem::EnqueueSessionDataUpdate(USessionInformation* SessionInfo){ }
void UCommonSessionSubsystem::Tick(float DeltaTime){ }
bool UCommonSessionSubsystem::IsTickable() const{ return bool(); }
TStatId UCommonSessionSubsystem::GetStatId() const{ return TStatId(); }
USessionMigrationSequence* UCommonSessionSubsystem::CreateSessionMigrationSequence(UClass* Class){ return nullptr; }
void UCommonSessionSubsystem::Initialize(FSubsystemCollectionBase& Collection){ }
void UCommonSessionSubsystem::Deinitialize(){ }
void UCommonSessionSubsystem::HandleSessionUpdated(const UE::Online::FSessionUpdated& SessionUpdated, UOnlineIntegrationBackend* Backend) const{ }
void UCommonSessionSubsystem::TravelLocalSessionFailure(UWorld* World, ETravelFailure::Type FailureType, const FString& ReasonString){ }
void UCommonSessionSubsystem::HandlePostLoadMap(UWorld* World){ }
void UCommonSessionSubsystem::BindDelegates(){ }
UE::Online::ISessionsPtr UCommonSessionSubsystem::GetSessionsInterface(UOnlineIntegrationBackend* InBackend) const{ return MakeShareable<UE::Online::FSessionsCommon>(nullptr); }
void UCommonSessionSubsystem::UpdatePresencePostLoadMap(const UWorld* World) const{ }
USessionMigrationSequence* UCommonSessionStatics::JoinSession(APlayerController* PlayerController, USessionInformation* SessionInfo){ return nullptr; }
USessionDefinition* UCommonSessionStatics::GetSessionDefinitionForWorld(const UWorld* World) { return nullptr; }
void UCommonSessionStatics::CombineOptionsToString(FString& OutCombinedString, const TMap<FString, FString> &Options){ }
