// This file has been automatically generated by the Unreal Header Implementation tool

#include "CommonUserSubsystem.h"

UE_DEFINE_GAMEPLAY_TAG(FCommonUserTags::Platform_Trait_RequiresStrictControllerMapping, TEXT("Test.Test"));
UE_DEFINE_GAMEPLAY_TAG(FCommonUserTags::Platform_Trait_SingleOnlineUser, TEXT("Test.Test"));
UE_DEFINE_GAMEPLAY_TAG(FCommonUserTags::OnlineError, TEXT("Test.Test"));
#if !UE_BUILD_SHIPPING
void UCommonUserSubsystem::ResetLocalUserStats(ULocalUserInfo* LocalUser){ }
#endif 
void UCommonUserSubsystem::Initialize(FSubsystemCollectionBase& Collection){ }
void UCommonUserSubsystem::Deinitialize(){ }
void UCommonUserSubsystem::WhenLocalUserInfoIsCreated(FOnLocalUserInfoCreated Delegate, int32 PlayerIndex){ }
void UCommonUserSubsystem::WhenLocalUserInfoIsCreated_Native(FOnLocalUserInfoCreated_Native::FDelegate Delegate, int32 PlayerIndex){ }
FDelegateHandle UCommonUserSubsystem::AddOnLocalUserInfoCreatedDelegate(FOnLocalUserInfoCreated_Native::FDelegate Delegate){ return FDelegateHandle(); }
void UCommonUserSubsystem::RemoveOnLocalUserInfoCreatedDelegate(FDelegateHandle DelegateHandle){ }
void UCommonUserSubsystem::SetMaxLocalPlayers(int32 InMaxLocalPLayers){ }
int32 UCommonUserSubsystem::GetMaxLocalPlayers() const{ return int32(); }
int32 UCommonUserSubsystem::GetNumLocalPlayers() const{ return int32(); }
ULocalUserInfo* UCommonUserSubsystem::GetUserInfoForLocalPlayerIndex(int32 LocalPlayerIndex) const{ return nullptr; }
ULocalUserInfo* UCommonUserSubsystem::GetUserInfoForPlatformUser(FPlatformUserId PlatformUser) const{ return nullptr; }
const ULocalUserInfo* UCommonUserSubsystem::GetUserInfoForControllerId(int32 ControllerId) const{ return nullptr; }
const ULocalUserInfo* UCommonUserSubsystem::GetUserInfoForInputDevice(FInputDeviceId InputDevice) const{ return nullptr; }
ULocalUserInfo* UCommonUserSubsystem::GetUserInfoForLocalPlayer(ULocalPlayer* LocalPlayer) const{ return nullptr; }
UOnlineAsyncOperation* UCommonUserSubsystem::CreateAuthenticationSequence(FPlatformUserId PlatformUserId,
	FName SequenceName) { return nullptr; }
void UCommonUserSubsystem::EnqueueAuthenticationSequence(UOnlineAsyncOperation* InAsyncOp){ }
ULocalUserInfo* UCommonUserSubsystem::GetUserInfoForAccountId(const UE::Online::FAccountId AccountId) const{ return nullptr; }
ULocalUserInfo* UCommonUserSubsystem::TryToInitializeUser(FCommonUserInitializeParams Params){ return nullptr; }
void UCommonUserSubsystem::ListenForLoginKeyInput(TArray<FKey> AnyUserKeys, TArray<FKey> NewUserKeys, FCommonUserInitializeParams Params){ }
bool UCommonUserSubsystem::TryToLogOutUser(int32 LocalPlayerIndex, bool bDestroyPlayer){ return bool(); }
bool UCommonUserSubsystem::IsRealPlatformUserIndex(int32 PlatformUserIndex) const{ return bool(); }
bool UCommonUserSubsystem::IsRealPlatformUser(FPlatformUserId PlatformUser) const{ return bool(); }
FPlatformUserId UCommonUserSubsystem::GetPlatformUserIdForIndex(int32 PlatformUserIndex) const{ return FPlatformUserId(); }
int32 UCommonUserSubsystem::GetPlatformUserIndexForId(FPlatformUserId PlatformUser) const{ return int32(); }
FPlatformUserId UCommonUserSubsystem::GetPlatformUserIdForInputDevice(FInputDeviceId InputDevice) const{ return FPlatformUserId(); }
FInputDeviceId UCommonUserSubsystem::GetPrimaryInputDeviceForPlatformUser(FPlatformUserId PlatformUser) const{ return FInputDeviceId(); }
bool UCommonUserSubsystem::ShouldWaitForStartInput() const{ return bool(); }
FString UCommonUserSubsystem::PlatformUserIdToString(FPlatformUserId UserId){ return FString(); }
FText UCommonUserSubsystem::GetPrivilegeDescription(ECommonUserPrivilege Privilege) const{ return FText(); }
FText UCommonUserSubsystem::GetPrivilegeResultDescription(ECommonUserPrivilegeResult Result) const{ return FText(); }
TFuture<UE::Online::TOnlineResult<UE::Online::FAuthLogin>> UCommonUserSubsystem::LoginLocalUser(ULocalUserInfo* UserInfo, FCommonUserInitializeParams Params){ return TFuture<UE::Online::TOnlineResult<UE::Online::FAuthLogin>>(); }
void UCommonUserSubsystem::SetAchievementsEnabled(bool Enabled){ }
void UCommonUserSubsystem::RegisterStats(UDataTable* StatTable){ }
UOnlineUserBackendLink* UCommonUserSubsystem::GetOrCreateBackendLink(UE::Online::FAccountId AccountId){ return nullptr; }
UOnlineUserBackendLink* UCommonUserSubsystem::FindBackendLink(UE::Online::FAccountId AccountId){ return nullptr; }
void UCommonUserSubsystem::RegisterAccountIdToBackendLinkMapping(UOnlineUserBackendLink* BackendLink){ }
TFuture<UOnlineUserInfo*> UCommonUserSubsystem::ResolveOnlineUser(ULocalUserInfo* LocalUser, UOnlineUserBackendLink* BackendLink){ return TFuture<UOnlineUserInfo*>(); }
TFuture<UOnlineUserInfo*> UCommonUserSubsystem::ResolveOnlineUser(ULocalUserInfo* LocalUser, UE::Online::FAccountId AccountId){ return TFuture<UOnlineUserInfo*>(); }
UOnlineUserInfo* UCommonUserSubsystem::GetOnlineUser(UE::Online::FAccountId AccountId){ return nullptr; }
void UCommonUserSubsystem::RegisterExtension(TScriptInterface<IOnlineUserRegistryExtension> Extension){ }
void UCommonUserSubsystem::RegisterBackendLinkConnection(UOnlineUserBackendLink* Link1, UOnlineUserBackendLink* Link2){ }
TFuture<bool> UCommonUserSubsystem::QueryUserInfo(ULocalUserInfo* LocalUser, UOnlineUserBackendLink* BackendLink){ return TFuture<bool>(); }
TFuture<void> UCommonUserSubsystem::QueryEntitlements(ULocalUserInfo* LocalUser, const TArray<UAddOnEntitlement*>& Entitlements){ return TFuture<void>(); }
UOnlineUserInfo* UCommonUserSubsystem::CreateOnlineUserForLink(UOnlineUserBackendLink* BackendLink){ return nullptr; }
void UCommonUserSubsystem::UpdateAllAggregatedStats(const UE::Online::FAccountId& AccountId, UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::OnGameplayEventTriggered(const FGameplayEvent& GameplayEvent){ }
ULocalUserInfo* UCommonUserSubsystem::CreateLocalUserInfo(int32 LocalPlayerIndex){ return nullptr; }
void UCommonUserSubsystem::BindDelegates(){ }
void UCommonUserSubsystem::BindDelegates(UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::LogOutLocalUser(FPlatformUserId PlatformUser){ }
ECommonUserPrivilege UCommonUserSubsystem::ConvertOnlineServicesPrivilege(UE::Online::EUserPrivileges Privilege){ return ECommonUserPrivilege(); }
UE::Online::EUserPrivileges UCommonUserSubsystem::ConvertOnlineServicesPrivilege(ECommonUserPrivilege Privilege){ return UE::Online::EUserPrivileges(); }
ECommonUserPrivilegeResult UCommonUserSubsystem::ConvertOnlineServicesPrivilegeResult(UE::Online::EUserPrivileges Privilege, UE::Online::EPrivilegeResults Results){ return ECommonUserPrivilegeResult(); }
void UCommonUserSubsystem::CacheConnectionStatus(UOnlineIntegrationBackend* Backend){ }
TSharedPtr<UE::Online::FAccountInfo> UCommonUserSubsystem::GetOnlineServiceAccountInfo(UE::Online::IAuthPtr AuthService, FPlatformUserId InUserId) const{ return TSharedPtr<UE::Online::FAccountInfo>(); }
void UCommonUserSubsystem::HandleAuthLoginStatusChanged(const UE::Online::FAuthLoginStatusChanged& EventParameters, UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::HandleNetworkConnectionStatusChanged(const UE::Online::FConnectionStatusChanged& EventParameters, UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::HandlePresenceUpdated(const UE::Online::FPresenceUpdated& PresenceUpdated, UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::HandleUISessionJoinRequested(const UE::Online::FUISessionJoinRequested& SessionJoinRequested, UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::HandleStatsUpdated(const UE::Online::FStatsUpdated& EventParameters, UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::HandleInputDeviceConnectionChanged(EInputDeviceConnectionState NewConnectionState, FPlatformUserId PlatformUserId,
		FInputDeviceId InputDeviceId){ }
bool UCommonUserSubsystem::OverrideInputKeyForLogin(FInputKeyEventArgs& EventArgs){ return bool(); }
void UCommonUserSubsystem::UpdateAggregatedStat(FAggregatedOnlineStat& AggregatedStat, const UE::Online::FAccountId& AccountId, UOnlineIntegrationBackend* Backend){ }
void UCommonUserSubsystem::AuthenticationSequenceFinished(UOnlineAsyncOperation* InAsyncOp){ }
