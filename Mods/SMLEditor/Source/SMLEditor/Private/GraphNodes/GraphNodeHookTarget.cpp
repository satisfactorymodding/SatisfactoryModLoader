#include "GraphNodes/GraphNodeHookTarget.h"
#include "PropertyCustomizationHelpers.h"
#include "DetailLayoutBuilder.h"
#include "SSearchableComboBox.h"
#include "Engine/BlueprintGeneratedClass.h"
#include "Nodes/HookTargetNode.h"
#include "Kismet2/BlueprintEditorUtils.h"
#include "Nodes/HookTargetNode_TargetExpression.h"
#include "Patching/BlueprintHookBlueprint.h"

void SHookMemberReference::Construct(const FArguments& InArgs) {
	GraphNode = InArgs._OwnerNode;
	MemberDescriptor = InArgs._MemberDescriptor;
	IsEditableAttribute = InArgs._IsEditable;

	UpdateAvailableMemberNames();

	// Subscribe to the blueprint changes to update the list of hook functions if new functions are added or existing ones removed
	if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::SelfContext)) {
		if (UBlueprint* OwnerBlueprint = FBlueprintEditorUtils::FindBlueprintForNode(GraphNode)) {
			OwnerBlueprint->OnChanged().AddSP(StaticCastSharedRef<SHookMemberReference>(AsShared()), &SHookMemberReference::OnOwnerBlueprintChanged);
		}
	}

	ChildSlot.Padding(5.0f, 2.5f) [
			SNew(SVerticalBox)
			+SVerticalBox::Slot().HAlign(HAlign_Left).AutoHeight().Padding(5.0f, 0.0f, 0.0f, 5.0f) [
				SNew(STextBlock)
				.Text(MemberDescriptor.DisplayName)
				.Font(FAppStyle::GetFontStyle(TEXT("Graph.Node.PinName")))
			]
			+SVerticalBox::Slot().HAlign(HAlign_Fill).AutoHeight().Padding(0.0f, 0.0f, 0.0f, 5.0f) [
				SNew(SBox)
				.MinDesiredWidth(120.0f)
				.Visibility(IsClassContextForced() ? EVisibility::Collapsed : EVisibility::Visible)
				[
					SNew(SClassPropertyEntryBox)
					.AllowAbstract(true)
					.SelectedClass(this, &SHookMemberReference::GetSelectedMemberScope)
					.OnSetClass(this, &SHookMemberReference::OnSelectedNewMemberScope)
					.IsEnabled(this, &SHookMemberReference::IsEditable)
				]
			]
			+SVerticalBox::Slot().HAlign(HAlign_Fill).AutoHeight() [
				SNew(SBox).MinDesiredWidth(120.0f) [
				SAssignNew(MemberSelectionComboBox, SSearchableComboBox)
				.OnGenerateWidget(this, &SHookMemberReference::HandleGenerateTextBoxFunctionNameItem)
				.OptionsSource(&AllMemberNames)
				.OnSelectionChanged(this, &SHookMemberReference::OnSelectedMemberNameChanged)
				.InitiallySelectedItem(CurrentlySelectedMemberName)
				.IsEnabled(this, &SHookMemberReference::IsEditable)
				.Content()
				[
					SNew(STextBlock)
					.Text(this, &SHookMemberReference::GetSelectedMemberName)
					.Font(IDetailLayoutBuilder::GetDetailFont())
				]
			]
		]
	];
}

const UClass* SHookMemberReference::GetSelectedMemberScope() const {
	const FMemberReference CurrentMemberReference = GraphNode->GetMemberReferenceByName(MemberDescriptor.Name);
	return CurrentMemberReference.IsSelfContext() ? nullptr : (IsClassContextForced() ? GetForcedClassContext() : CurrentMemberReference.GetScope());
}

void SHookMemberReference::OnSelectedNewMemberScope(const UClass* InNewMemberScope) {
	// Only allowed to change the member scope if class context is not forced
	if (!IsClassContextForced()) {
		UBlueprint* OwnerBlueprint = FBlueprintEditorUtils::FindBlueprintForNode(GraphNode);

		// Null context is implied by null class selection, current class being generated by this blueprint, or forced self context
		const bool bIsSelfContext = InNewMemberScope == nullptr ||
			(OwnerBlueprint != nullptr && InNewMemberScope->ClassGeneratedBy == OwnerBlueprint) ||
			EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::SelfContext);

		// Update member reference directly with the class name. Updating the member scope resets the current member name.
		FMemberReference MemberReference;
		MemberReference.SetDirect(NAME_None, FGuid(), bIsSelfContext ? nullptr : const_cast<UClass*>(InNewMemberScope), bIsSelfContext);
		GraphNode->SetMemberReferenceByName(MemberDescriptor.Name, MemberReference);
	}
}

FText SHookMemberReference::GetSelectedMemberName() const {
	const FMemberReference CurrentMemberReference = GraphNode->GetMemberReferenceByName(MemberDescriptor.Name);
	return FText::FromName(CurrentMemberReference.GetMemberName());
}

void SHookMemberReference::OnSelectedMemberNameChanged(const TSharedPtr<FString> InNewMemberName, ESelectInfo::Type) {
	FMemberReference CurrentMemberReference = GraphNode->GetMemberReferenceByName(MemberDescriptor.Name);
	const bool bIsSelfContext = CurrentMemberReference.IsSelfContext() || EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::SelfContext);
	const UClass* CurrentMemberClass = bIsSelfContext ? GraphNode->GetBlueprintClassFromNode() : (IsClassContextForced() ? GetForcedClassContext() : CurrentMemberReference.GetScope());

	if (CurrentMemberClass && InNewMemberName.IsValid()) {
		if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::PropertyReference)) {
			if (const FProperty* ResolvedProperty = FindFProperty<FProperty>(CurrentMemberClass, **InNewMemberName, EFieldIterationFlags::None)) {
				CurrentMemberReference.SetFromField<FProperty>(ResolvedProperty, bIsSelfContext);
			}
		} else {
			if (const UFunction* ResolvedFunction = FindUField<UFunction>(CurrentMemberClass, **InNewMemberName, EFieldIterationFlags::None)) {
				CurrentMemberReference.SetFromField<UFunction>(ResolvedFunction, bIsSelfContext);
			}
		}
		GraphNode->SetMemberReferenceByName(MemberDescriptor.Name, CurrentMemberReference);
	}
}

void SHookMemberReference::UpdateAvailableMemberNames() {
	AllMemberNames.Empty();
	CurrentlySelectedMemberName.Reset();

	const FMemberReference CurrentMemberReference = GraphNode->GetMemberReferenceByName(MemberDescriptor.Name);
	const bool bIsSelfContext = CurrentMemberReference.IsSelfContext() || EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::SelfContext);
	const UClass* CurrentMemberClass = bIsSelfContext ? GraphNode->GetBlueprintClassFromNode() : (IsClassContextForced() ? GetForcedClassContext() : CurrentMemberReference.GetScope());

	if (CurrentMemberClass) {
		if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::PropertyReference)) {
			for (TFieldIterator<FProperty> PropIt(CurrentMemberClass, EFieldIterationFlags::None); PropIt; ++PropIt) {
				// Only properties marked as BlueprintVisible can actually appear in the drop-down
				if (PropIt->HasAnyPropertyFlags(CPF_BlueprintVisible)) {
					const TSharedPtr<FString> MemberName = MakeShared<FString>(PropIt->GetName());
					AllMemberNames.Add(MemberName);
					
					if (PropIt->GetFName() == CurrentMemberReference.GetMemberName()) {
						CurrentlySelectedMemberName = MemberName;
					}
				}
			}
		} else {
			for (TFieldIterator<UFunction> FunctionIt(CurrentMemberClass, EFieldIterationFlags::None); FunctionIt; ++FunctionIt) {
				// Only functions marked as blueprint event or blueprint callable should be visible
				if (FunctionIt->HasAnyFunctionFlags(FUNC_BlueprintCallable | FUNC_BlueprintEvent)) {
					// Do not include generated delegate signatures into the list of functions unless explicitly asked to
					if (FunctionIt->GetName().EndsWith(HEADER_GENERATED_DELEGATE_SIGNATURE_SUFFIX) && !EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::ShowDelegateSignatureFunctions)) {
						continue;
					}
					
					// Filter out functions that do not have Script code if we are asked to
					if (!EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::FunctionsWithScriptOnly) || !FunctionIt->Script.IsEmpty()) {
						const TSharedPtr<FString> MemberName = MakeShared<FString>(FunctionIt->GetName());
						AllMemberNames.Add(MemberName);
					
						if (FunctionIt->GetFName() == CurrentMemberReference.GetMemberName()) {
							CurrentlySelectedMemberName = MemberName;
						}
					}
				}
			}
		}
	}

	// Sort member names lexicographically
	AllMemberNames.StableSort([](const TSharedPtr<FString>& A, const TSharedPtr<FString>& B) {
		return *A < *B;
	});

	// Refresh the items in the selection combo box
	if (MemberSelectionComboBox.IsValid()) {
		TGuardValue ScopedSuppressUpdateDelegate(bSuppressSelectedItemChangedDelegate, true);
		MemberSelectionComboBox->RefreshOptions();
		MemberSelectionComboBox->SetSelectedItem(CurrentlySelectedMemberName);
	}
}

bool SHookMemberReference::IsClassContextForced() const {
	// Self context is always forced
	if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::SelfContext)) {
		return true;
	}
	
	// Target function reference context is forced if this blueprint is not a function library (in that case current BP is a mixin)
	if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::HookTargetFunctionReference)) {
		const UHookBlueprint* OwnerBlueprint = Cast<UHookBlueprint>(FBlueprintEditorUtils::FindBlueprintForNode(GraphNode));
		return OwnerBlueprint && OwnerBlueprint->BlueprintType != BPTYPE_FunctionLibrary;
	}
	return false;
}

UClass* SHookMemberReference::GetForcedClassContext() const {
	// Self context forces the current blueprint class to be used
	if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::SelfContext)) {
		return GraphNode->GetBlueprintClassFromNode();
	}

	// Target function reference context is forced if this blueprint is not a function library (in that case current BP is a mixin)
	if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::HookTargetFunctionReference)) {
		const UHookBlueprint* OwnerBlueprint = Cast<UHookBlueprint>(FBlueprintEditorUtils::FindBlueprintForNode(GraphNode));
		if (OwnerBlueprint && OwnerBlueprint->BlueprintType != BPTYPE_FunctionLibrary) {
			return OwnerBlueprint->MixinTargetClass;
		}
	}
	return nullptr;
}

void SHookMemberReference::OnOwnerBlueprintChanged(UBlueprint* InOwnerBlueprint) {
	if (EnumHasAnyFlags(MemberDescriptor.Flags, EHTNMemberRefFlags::SelfContext | EHTNMemberRefFlags::HookTargetFunctionReference)) {
		UpdateAvailableMemberNames();
	}
}

TSharedRef<SWidget> SHookMemberReference::HandleGenerateTextBoxFunctionNameItem(const TSharedPtr<FString> StringItem) {
	return SNew(STextBlock)
		.Text(FText::FromString(*StringItem))
		.Font(IDetailLayoutBuilder::GetDetailFont());
}

bool SHookMemberReference::IsEditable() const {
	return IsEditableAttribute.IsSet() && IsEditableAttribute.Get();
}

void SGraphNodeHookTarget::Construct(const FArguments& InArgs, UHookTargetNode* InNode) {
	SGraphNodeDefault::Construct(SGraphNodeDefault::FArguments().GraphNodeObj(InNode));
}

void SGraphNodeHookTarget::UpdateGraphNode() {
	SGraphNode::UpdateGraphNode();
}

void SGraphNodeHookTarget::CreateBelowPinControls(TSharedPtr<SVerticalBox> MainBox) {
	SGraphNodeDefault::CreateBelowPinControls(MainBox);

	// Populate member descriptors for member references on this node
	if (UHookTargetNode* TargetNode = Cast<UHookTargetNode>(GraphNode)) {
		TArray<FHookTargetNodeMemberReferenceDescriptor> ReferenceDescriptors;
		TargetNode->GetMemberReferenceDescriptors(ReferenceDescriptors);

		for (const FHookTargetNodeMemberReferenceDescriptor& Descriptor : ReferenceDescriptors) {
			MainBox->AddSlot().HAlign(HAlign_Fill).VAlign(VAlign_Center).AutoHeight() [
				SNew(SHookMemberReference)
				.OwnerNode(TargetNode)
				.MemberDescriptor(Descriptor)
				.IsEditable(this, &SGraphNode::IsNodeEditable)
				.ToolTipText(Descriptor.ToolTip)
			];
		}

		if (UHookTargetNode_TargetExpression* TargetExpressionNode = Cast<UHookTargetNode_TargetExpression>(TargetNode)) { 
			FDetailsViewArgs DetailsViewArgs;
			DetailsViewArgs.bAllowSearch = false;
			DetailsViewArgs.bHideSelectionTip = true;
			DetailsViewArgs.bLockable = false;
			DetailsViewArgs.bSearchInitialKeyFocus = true;
			DetailsViewArgs.bUpdatesFromSelection = false;
			DetailsViewArgs.bShowOptions = false;
			DetailsViewArgs.bShowModifiedPropertiesOption = true;
			DetailsViewArgs.bShowObjectLabel = false;
			DetailsViewArgs.bCustomNameAreaLocation = true;
			DetailsViewArgs.bCustomFilterAreaLocation = true;
			DetailsViewArgs.NameAreaSettings = FDetailsViewArgs::HideNameArea;
			DetailsViewArgs.bAllowMultipleTopLevelObjects = true;
			DetailsViewArgs.bShowScrollBar = false;
			

			FPropertyEditorModule& PropertyEditorModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(TEXT("PropertyEditor"));
			TSharedPtr<IDetailsView> DetailsView = PropertyEditorModule.CreateDetailView(DetailsViewArgs);
			DetailsView->SetObject(TargetExpressionNode->TargetSpecifierArchetype);			
			
			MainBox->AddSlot().HAlign(HAlign_Fill).VAlign(VAlign_Center).AutoHeight() [
				DetailsView.ToSharedRef()
			];
		}
	}
}
