// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGServerObjectOptionInterface.h"
#include "Settings/FGUserSettingCategory.h"

void UFGServerObjectOptionAdapter::GetAllUserSettings(TArray<UFGUserSettingApplyType*>& OutUserSettings) const{ }
void UFGServerObjectOptionAdapter::GetAllUserSettingsMap(TMap<FString, UFGUserSettingApplyType*>& OutUserSettings) const{ }
UFGUserSettingApplyType* UFGServerObjectOptionAdapter::FindUserSetting(const FString& SettingId) const{ return nullptr; }
void UFGServerObjectOptionAdapter::ApplyChanges(){ }
bool UFGServerObjectOptionAdapter::HasAnyUnsavedOptionValueChanges() const{ return bool(); }
bool UFGServerObjectOptionAdapter::HasPendingApplyOptionValue(const FString& cvar) const{ return bool(); }
void UFGServerObjectOptionAdapter::RevertUnsavedChanges(){ }
TArray<FUserSettingCategoryMapping> UFGServerObjectOptionAdapter::GetCategorizedSettingWidgets(UObject* worldContext, UUserWidget* owningWidget){ return TArray<FUserSettingCategoryMapping>(); }
IFGOptionInterface* UFGServerObjectOptionAdapter::GetPrimaryOptionInterface(UWorld* world) const{ return nullptr; }
bool UFGServerObjectOptionAdapter::IsInMainMenu() const{ return bool(); }
UFGServerObject* UFGServerObjectOptionAdapter::GetServerObject() const{ return nullptr; }
void UFGServerObjectOptionAdapter::Initialize(UClass* SettingManagerClass, bool bDedicatedServerRelevantOnly, bool bIsLocalManagerOnly){ }
void UFGServerObjectOptionAdapter::ReceiveServerSettings(const TMap<FString, FString>& InServerSettings, const TMap<FString, FString>& PendingServerOptions){ }
void UFGServerObjectOptionAdapter::WriteChangedSettings(TMap<FString, FString>& OutServerSettings){ }
