// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGDroneStationInfo.h"
#include "Net/UnrealNetwork.h"

void FFGDroneTripStatistics::Clear(){ }
AFGDroneStationInfo::AFGDroneStationInfo() : Super() {
	this->mStation = nullptr;
	this->mStationLocation = FVector::ZeroVector;
	this->mStationClass = nullptr;
	this->mPairedStation = nullptr;
	this->mBuildingTag = TEXT("");
	this->mDroneStatus = EDroneStatus::EDS_NO_DRONE;
	this->mActiveDroneFuelType = nullptr;
	this->mLastInsertedFuelType = nullptr;
	this->mDroneTripStatistics.LatestRoundTripTime = 0.0;
	this->mDroneTripStatistics.LatestIncomingItemStacks = 0.0;
	this->mDroneTripStatistics.LatestOutgoingItemStacks = 0.0;
	this->mDroneTripStatistics.LatestIncomingItemStackRate = 0.0;
	this->mDroneTripStatistics.LatestOutgoingItemStackRate = 0.0;
	this->mDroneTripStatistics.AverageRoundTripTime = 0.0;
	this->mDroneTripStatistics.AverageIncomingItemAmount = 0.0;
	this->mDroneTripStatistics.AverageOutgoingItemAmount = 0.0;
	this->mDroneTripStatistics.AverageIncomingItemStacks = 0.0;
	this->mDroneTripStatistics.AverageOutgoingItemStacks = 0.0;
	this->mDroneTripStatistics.AverageIncomingItemRate = 0.0;
	this->mDroneTripStatistics.AverageOutgoingItemRate = 0.0;
	this->mDroneTripStatistics.AverageIncomingItemStackRate = 0.0;
	this->mDroneTripStatistics.AverageOutgoingItemStackRate = 0.0;
	this->mDroneTripStatistics.MedianRoundTripTime = 0.0;
	this->mDroneTripStatistics.MedianIncomingItemAmount = 0.0;
	this->mDroneTripStatistics.MedianOutgoingItemAmount = 0.0;
	this->mDroneTripStatistics.MedianIncomingItemStacks = 0.0;
	this->mDroneTripStatistics.MedianOutgoingItemStacks = 0.0;
	this->bAlwaysRelevant = true;
	this->bReplicates = true;
}
void AFGDroneStationInfo::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGDroneStationInfo, mStationLocation);
	DOREPLIFETIME(AFGDroneStationInfo, mStationClass);
	DOREPLIFETIME(AFGDroneStationInfo, mPairedStation);
	DOREPLIFETIME(AFGDroneStationInfo, mConnectedStations);
	DOREPLIFETIME(AFGDroneStationInfo, mBuildingTag);
	DOREPLIFETIME(AFGDroneStationInfo, mDroneStatus);
	DOREPLIFETIME(AFGDroneStationInfo, mDroneFuelInformation);
	DOREPLIFETIME(AFGDroneStationInfo, mActiveDroneFuelType);
	DOREPLIFETIME(AFGDroneStationInfo, mLastInsertedFuelType);
	DOREPLIFETIME(AFGDroneStationInfo, mDroneTripStatistics);
}
void AFGDroneStationInfo::EndPlay(const EEndPlayReason::Type EndPlayReason){ Super::EndPlay(EndPlayReason); }
void AFGDroneStationInfo::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDroneStationInfo::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDroneStationInfo::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDroneStationInfo::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDroneStationInfo::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGDroneStationInfo::NeedTransform_Implementation(){ return bool(); }
bool AFGDroneStationInfo::ShouldSave_Implementation() const{ return bool(); }
void AFGDroneStationInfo::SetBuildingTag_Implementation(const FString& buildingTag){ }
void AFGDroneStationInfo::PairStation(AFGDroneStationInfo* otherStation){ }
void AFGDroneStationInfo::ClearLatestDroneTrips(){ }
TArray< FFGDroneFuelType > AFGDroneStationInfo::GetDroneFuelTypes() const{ return TArray<FFGDroneFuelType>(); }
const FFGDroneFuelInformation* AFGDroneStationInfo::Native_GetActiveFuelInfo() const{ return nullptr; }
FFGDroneFuelInformation AFGDroneStationInfo::GetActiveFuelInfo() const{ return FFGDroneFuelInformation(); }
void AFGDroneStationInfo::SetDroneStatus(EDroneStatus droneStatus){ }
float AFGDroneStationInfo::CalculateStationTripPowerCost(AFGDroneStationInfo* ToStation) const{ return float(); }
void AFGDroneStationInfo::RegisterDroneTripInformation(const FDroneTripInformation& TripInfo){ }
float AFGDroneStationInfo::GetLatestEstimatedTotalIncomingItemStackRate() const{ return float(); }
float AFGDroneStationInfo::GetAverageTotalIncomingItemRate() const{ return float(); }
float AFGDroneStationInfo::GetAverageTotalIncomingItemStackRate() const{ return float(); }
float AFGDroneStationInfo::GetLatestEstimatedTotalOutgoingItemStackRate() const{ return float(); }
float AFGDroneStationInfo::GetAverageTotalOutgoingItemRate() const{ return float(); }
float AFGDroneStationInfo::GetAverageTotalOutgoingItemStackRate() const{ return float(); }
float AFGDroneStationInfo::GetEstimatedTotalTransportRate() const{ return float(); }
void AFGDroneStationInfo::OnPairedStationUpdate_Implementation(){ }
void AFGDroneStationInfo::OnPairedStationDestroyed(AActor* destroyedActor){ }
void AFGDroneStationInfo::OnRep_DroneStatus(){ }
void AFGDroneStationInfo::OnRep_DroneFuelInformation(){ }
void AFGDroneStationInfo::OnRep_DroneTripStatistics(){ }
void AFGDroneStationInfo::OnRep_ActiveDroneFuelType(){ }
void AFGDroneStationInfo::UpdateDroneFuelInformation(){ }
void AFGDroneStationInfo::UpdateDroneTripStatistics(){ }
void AFGDroneStationInfo::UpdateActiveDroneFuelType(TSubclassOf< UFGItemDescriptor > fuelItem){ }
void AFGDroneStationInfo::AddConnectedStation(AFGDroneStationInfo* otherStation){ }
void AFGDroneStationInfo::RemoveConnectedStation(AFGDroneStationInfo* otherStation){ }
