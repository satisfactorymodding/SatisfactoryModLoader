// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGWorldEventSubsystem.h"
#include "Net/UnrealNetwork.h"

DEFINE_LOG_CATEGORY(LogWorldEvent);

TAutoConsoleVariable<int32> CVarWorldEventDebug(TEXT("CVarWorldEventDebug"), 0, TEXT(""));
AFGWorldEventSubsystem* AFGWorldEventSubsystem::Get(UWorld* world){ return nullptr; }
AFGWorldEventSubsystem* AFGWorldEventSubsystem::Get(UObject* worldContext){ return nullptr; }
AFGWorldEventSubsystem::AFGWorldEventSubsystem() : Super() {
	this->mWorldEventInterval = FFloatInterval(10.0, 20.0);
	this->mAllowAutomaticWorldEvents = true;
	this->mAutomaticWorldEventActiveLimit = 3;
}
void AFGWorldEventSubsystem::Tick(float dt){ Super::Tick(dt); }
void AFGWorldEventSubsystem::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGWorldEventSubsystem, mWorldEventActors);
}
void AFGWorldEventSubsystem::RegisterWorldEventActor( AFGWorldEventActor* worldEventActor){ }
void AFGWorldEventSubsystem::UnregisterWorldEventActor( AFGWorldEventActor* worldEventActor){ }
void AFGWorldEventSubsystem::SetAutomaticWorldEventsEnabled(bool enabled){ }
AFGWorldEventActor* AFGWorldEventSubsystem::TriggerRandomWorldEvent(bool bIncludeManual){ return nullptr; }
void AFGWorldEventSubsystem::AutomaticallyTriggerWorldEvent(){ }
void AFGWorldEventSubsystem::StartAutomaticWorldEventTimer(bool bForceRestart){ }
void AFGWorldEventSubsystem::StopAutomaticWorldEventTimer(){ }
void AFGWorldEventSubsystem::ManageWorldEventActors(){ }
void AFGWorldEventSubsystem::UpdateWorldEventActor( AFGWorldEventActor* worldEventActor){ }
void AFGWorldEventSubsystem::OnAnyWorldEventTriggered( AFGWorldEventActor* worldEventActor){ }
void AFGWorldEventSubsystem::OnAnyWorldEventReset( AFGWorldEventActor* worldEventActor){ }
void AFGWorldEventSubsystem::OnAnyWorldEventFinished( AFGWorldEventActor* worldEventActor){ }
