// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGBlueprintFunctionLibrary.h"

#include "FGSaveManagerInterface.h"

bool UFGBlueprintFunctionLibrary::HasActorBegunPlay(const AActor* InActor){ return bool(); }
AActor* UFGBlueprintFunctionLibrary::GetOuterActor(const UObject* obj){ return nullptr; }
void UFGBlueprintFunctionLibrary::ShowOutline( UPrimitiveComponent* comp, EOutlineColor color){ }
void UFGBlueprintFunctionLibrary::OccludeOutlineByComponent( UPrimitiveComponent* comp, bool occlude){ }
void UFGBlueprintFunctionLibrary::OccludeOutlineByActor( AActor* actor, bool occlude){ }
void UFGBlueprintFunctionLibrary::HideOutline( UPrimitiveComponent* comp){ }
void UFGBlueprintFunctionLibrary::UpdateUseState(FUseState& state, TSubclassOf< UFGUseState > newState){ }
void UFGBlueprintFunctionLibrary::Cheat_GetAllDescriptors(TArray< TSubclassOf<  UFGItemDescriptor > >& out_descriptors){ }
void UFGBlueprintFunctionLibrary::ApplyCustomizationPrimitiveData( AActor* actor, const FFactoryCustomizationData& customizationData, int32 colorSlotFallback ,  UMeshComponent* onlyApplyToComponent , bool isLightweightTemporary){ }
void UFGBlueprintFunctionLibrary::ApplyCustomizationPrimitiveDataToComponent(class UMeshComponent* component, const FFactoryCustomizationData& customizationData, int32 colorSlotFallback){ }
void UFGBlueprintFunctionLibrary::ApplyDefaultColorPrimitiveData( AActor* actor){ }
void UFGBlueprintFunctionLibrary::GetAllMeshComponentsInClass(const TSubclassOf< AActor > inClass, TArray< UMeshComponent* >& out_components){ }
void UFGBlueprintFunctionLibrary::GetAllComponentsInClass(const TSubclassOf<AActor> inClass, const TSubclassOf<UActorComponent> inActorComponentClass, TArray<UActorComponent*>& out_components, TMap<USceneComponent*, FFGComponentParentAttachmentInfo>& out_parentComponentMap){ }
FBox UFGBlueprintFunctionLibrary::GetCollisionBoundingBoxFromActorClass(const TSubclassOf<AActor> inClass, const FTransform& originTransform){ return FBox(); }
void UFGBlueprintFunctionLibrary::GetAllDescriptorsSorted(UObject* worldContext,  TArray< TSubclassOf< UFGItemDescriptor > >& out_descriptors){ }
void UFGBlueprintFunctionLibrary::ChangeLanguage(FString target){ }
FString UFGBlueprintFunctionLibrary::GetLanguage(){ return FString(); }
bool UFGBlueprintFunctionLibrary::IsEditorWorld( UObject* worldContext){ return bool(); }
bool UFGBlueprintFunctionLibrary::IsGameWorld( UObject* worldContext){ return bool(); }
float UFGBlueprintFunctionLibrary::LogX(float base, float value){ return float(); }
float UFGBlueprintFunctionLibrary::RoundFloatWithPrecision(float value, int32 MaximumFractionalDigits){ return float(); }
FName UFGBlueprintFunctionLibrary::GetComponentFlagSoftLanding(){ return FName(); }
bool UFGBlueprintFunctionLibrary::IsInAlwaysLoadedLevel(AActor* actor){ return bool(); }
UFGSignificanceManager* UFGBlueprintFunctionLibrary::GetSignificanceManager(UWorld* InWorld){ return nullptr; }
void UFGBlueprintFunctionLibrary::AddStaticSignificance(UObject* WorldContextObject, UObject* Object){ }
void UFGBlueprintFunctionLibrary::RemoveStaticSignificance(UObject* WorldContextObject, UObject* Object){ }
void UFGBlueprintFunctionLibrary::AddGenericTickObjectToSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveGenericTickObjectFromSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddFactoryObjectToSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveFactoryObjectFromSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddConveyorBeltToSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveConveyorBeltFromSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddPipelineToSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveFromSignificanceManagerGeneric(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddGainSignificanceObjectToSignificanceManager(UObject* WorldContextObject, UObject* obj, float desiredGainDistance){ }
void UFGBlueprintFunctionLibrary::RemoveGainSignificanceObjectFromSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddAudioVolumeToSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveAudioVolumeFromSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddAmbientSoundSplineToSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveAmbientSoundSplineFromSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddTrainToSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveTrainFromSignificanceManager(UObject* WorldContextObject, UObject* obj){ }
void UFGBlueprintFunctionLibrary::AddToServerSideSignificanceOctTree(UObject* obj){ }
void UFGBlueprintFunctionLibrary::RemoveFromServerSideSignificanceOctTree(UObject* obj){ }
bool UFGBlueprintFunctionLibrary::ImpactEffectIsRelevant(UObject* worldContext, APawn* instigator, FVector spawnLocation, float visibleCullDistance , float alwaysSuccessDistance , bool skipLOSCheck){ return bool(); }
bool UFGBlueprintFunctionLibrary::ImpactEffectIsWithinDistance(UObject* worldContext, APawn* instigator, FVector spawnLocation, float visibleCullDistance){ return bool(); }
bool UFGBlueprintFunctionLibrary::IsLocallyHumanControlled(APawn* pawn){ return bool(); }
FString UFGBlueprintFunctionLibrary::GetVersionString(){ return FString(); }
bool UFGBlueprintFunctionLibrary::IsAlphaBuild(){ return bool(); }
bool UFGBlueprintFunctionLibrary::CanBeOnConveyor(TSubclassOf< UFGItemDescriptor > inClass){ return bool(); }
void UFGBlueprintFunctionLibrary::GetAvailableRecipesInCategory(UObject* worldContext, TSubclassOf<  UFGCategory > category, TArray< TSubclassOf<  UFGRecipe > >& out_recipes){ }
void UFGBlueprintFunctionLibrary::GetAvailableRecipesInSubCategory(UObject* worldContext, TSubclassOf<  UFGCategory > category, TSubclassOf<  UFGCategory > subCategory, TArray< TSubclassOf<  UFGRecipe > >& out_recipes){ }
void UFGBlueprintFunctionLibrary::GetAvailableRecipesWithDefaultMaterialInSubCategory(APlayerController* playerController, TSubclassOf<  UFGCategory > category, TSubclassOf<  UFGCategory > subCategory,
																	 TArray< TSubclassOf<  UFGRecipe > >& out_recipes){ }
void UFGBlueprintFunctionLibrary::GetAvailableRecipesForMaterialDescriptorInSubCategory(APlayerController* playerController, TSubclassOf<  UFGCategory > category, TSubclassOf<  UFGCategory > subCategory, 
																	 TSubclassOf<  UFGFactoryCustomizationDescriptor_Material > materialDesc,
																	 TArray< TSubclassOf<  UFGRecipe > >& out_recipes){ }
TArray< TSubclassOf< class UFGCategory > > UFGBlueprintFunctionLibrary::GetAvailableSubCategoriesForCategory(UObject* worldContext, TSubclassOf< UFGCategory > category, TSubclassOf<  UFGCategory > outputSubCategoryClass){ return TArray<TSubclassOf<class UFGCategory> >(); }
void UFGBlueprintFunctionLibrary::GetSubCategoriesForSchematicCategory(UObject* worldContext, TSubclassOf<  UFGSchematicCategory > category,  TArray< TSubclassOf<  UFGSchematicCategory > >& out_subCategories){ }
void UFGBlueprintFunctionLibrary::GetVisibleSubCategoriesForSchematicCategory(UObject* worldContext, TSubclassOf<  UFGSchematicCategory > category, ESchematicType schematicType, TArray< TSubclassOf<  UFGSchematicCategory > >& out_subCategories){ }
TArray< TSubclassOf< UFGCategory > > UFGBlueprintFunctionLibrary::GetAllCategoriesFromRecipes(TArray< TSubclassOf<  UFGRecipe > > recipes, TSubclassOf<  UFGCategory > outputCategoryClass){ return TArray<TSubclassOf<UFGCategory> >(); }
TSubclassOf< class UFGQuickSwitchGroup > UFGBlueprintFunctionLibrary::GetQuickSwitchGroupFromRecipe(TSubclassOf<  UFGRecipe > recipe){ return TSubclassOf<class UFGQuickSwitchGroup>(); }
void UFGBlueprintFunctionLibrary::GetMatchingQuickSwitchGroupRecipes(TSubclassOf<  UFGRecipe > recipe, TArray < TSubclassOf<  UFGRecipe > > recipesToMatchAgainst, TArray< TSubclassOf<  UFGRecipe > >& out_recipes){ }
void UFGBlueprintFunctionLibrary::GetAllWidgetsOfClassInHierarchy(UWidget* hierarchyContext, TSubclassOf< UWidget > widgetClass, TArray< UWidget* >& foundWidgets){ }
void UFGBlueprintFunctionLibrary::GetAllChildWidgetsOfClass(UWidget* rootWidget, TSubclassOf< UWidget > widgetClass, TArray< UWidget* >& foundWidgets){ }
void UFGBlueprintFunctionLibrary::GetVisibleChildWidgetsOfClass(UWidget* rootWidget, TSubclassOf< UWidget > widgetClass, bool bUseIsReallyVisible, TArray< UWidget* >& foundWidgets){ }
void UFGBlueprintFunctionLibrary::GetAllChildWidgetsOfAnyClass(UWidget* rootWidget, TArray< TSubclassOf< UWidget > > widgetClasses, TArray< UWidget* >& foundWidgets){ }
UWidget* UFGBlueprintFunctionLibrary::GetFirstChildWidgetOfClass(UWidget* rootWidget, TSubclassOf< UWidget > widgetClass){ return nullptr; }
UWidget* UFGBlueprintFunctionLibrary::GetFirstParentWidgetOfClass(UWidget* childWidget, TSubclassOf< UWidget > widgetClass){ return nullptr; }
UWidget* UFGBlueprintFunctionLibrary::GetFirstParentWidgetByName(UWidget* childWidget, FName Name){ return nullptr; }
UWidget* UFGBlueprintFunctionLibrary::GetWidgetFromWidgetChild(FFGWidgetChild WidgetChild){ return nullptr; }
FName UFGBlueprintFunctionLibrary::GetNameFromWidgetChild(FFGWidgetChild WidgetChild){ return FName(); }
TArray< TSubclassOf< class UFGItemDescriptor > > UFGBlueprintFunctionLibrary::GetAllItemsInCategory(UObject* worldContext, TSubclassOf< UFGItemCategory > itemCategory){ return TArray<TSubclassOf<class UFGItemDescriptor> >(); }
TArray< TSubclassOf< class UFGItemCategory > > UFGBlueprintFunctionLibrary::GetCategoriesWithAffordableRecipes(AFGCharacterPlayer* playerPawn, TSubclassOf< UObject > forProducer){ return TArray<TSubclassOf<class UFGItemCategory> >(); }
void UFGBlueprintFunctionLibrary::GetAllAvailableCustomizations(UObject* worldContext, TArray< TSubclassOf<  UFGFactoryCustomizationDescriptor > >& out_customizations, TSubclassOf<  UFGFactoryCustomizationDescriptor > customizationClass){ }
void UFGBlueprintFunctionLibrary::GetValidMaterialRecipesSubCategory(UObject* worldContext, TSubclassOf<  UFGCategory > category, TSubclassOf<  UFGCategory > subCategory, TArray< TSubclassOf<  UFGCustomizationRecipe > >& out_matRecipes){ }
TSubclassOf< class UFGFactoryCustomizationDescriptor_Material > UFGBlueprintFunctionLibrary::GetDefaultMatDescForBuildableCategory(APlayerController* playerController, TSubclassOf<  UFGCategory> category, TSubclassOf<  UFGCategory > subCategory){ return TSubclassOf<class UFGFactoryCustomizationDescriptor_Material>(); }
void UFGBlueprintFunctionLibrary::SetDefaultMatDescForBuildableCategory(APlayerController* playerController, TSubclassOf<  UFGCategory > category, TSubclassOf<  UFGFactoryCustomizationDescriptor_Material > materialDesc){ }
TSubclassOf< class UFGFactoryCustomizationDescriptor_Material > UFGBlueprintFunctionLibrary::GetGlobalDefaultMatDescForMaterialCategory(APlayerController* playerController, TSubclassOf<  UFGCategory > category){ return TSubclassOf<class UFGFactoryCustomizationDescriptor_Material>(); }
void UFGBlueprintFunctionLibrary::SetGlobalDefaultMaterialDescriptor(APlayerController* playerController, TSubclassOf<  UFGFactoryCustomizationDescriptor_Material > materialDesc, bool updateHotbarShortcuts){ }
TSubclassOf< class UFGFactoryCustomizationDescriptor_Material > UFGBlueprintFunctionLibrary::GetMaterialDescriptorForBuildingDescriptor(UObject* worldContext, TSubclassOf<  UFGBuildDescriptor > buildingDesc){ return TSubclassOf<class UFGFactoryCustomizationDescriptor_Material>(); }
TSubclassOf< class UFGFactoryCustomizationDescriptor_Material > UFGBlueprintFunctionLibrary::GetMaterialDescriptorForBuildableClass(UObject* worldContext, TSubclassOf<  AFGBuildable > buildable){ return TSubclassOf<class UFGFactoryCustomizationDescriptor_Material>(); }
void UFGBlueprintFunctionLibrary::UpdateHotbarShortcutsForSpecifiedMaterialDescriptor(APlayerController* playerController, TSubclassOf<  UFGFactoryCustomizationDescriptor_Material > materialDesc){ }
bool UFGBlueprintFunctionLibrary::IsLocationNearABase(const UObject* worldContext, FVector inLocation, float closeDistance){ return bool(); }
bool UFGBlueprintFunctionLibrary::IsLocationNearABaseFromResult(const UObject* worldContext, FVector inLocation, float closeDistance, const TArray< FOverlapResult >& Results){ return bool(); }
bool UFGBlueprintFunctionLibrary::TryConvertShortMapNameToTopLevelAssetPath(const FString& mapName, FTopLevelAssetPath& outAssetPath){ return bool(); }
void UFGBlueprintFunctionLibrary::TravelToMainMenu(APlayerController* playerController){ }
void UFGBlueprintFunctionLibrary::SendLocalPlayerToMainMenu(UWorld* world){ }
FString UFGBlueprintFunctionLibrary::LinearColorToHex(FLinearColor inColor){ return FString(); }
FLinearColor UFGBlueprintFunctionLibrary::HexToLinearColor(const FString& inHex){ return FLinearColor(); }
void UFGBlueprintFunctionLibrary::AddPopup(APlayerController* controller, FText Title, FText Body, const FPopupConfirmClicked& ConfirmClickDelegate, EPopupId PopupID , TSubclassOf< UUserWidget > popupClass , UObject* popupInstigator){ }
void UFGBlueprintFunctionLibrary::AddPopupWithCloseDelegate(APlayerController* controller, FText Title, FText Body, const FPopupClosed& CloseDelegate, EPopupId PopupID , TSubclassOf< UUserWidget > popupClass , UObject* popupInstigator , bool restoreFocusOnClose){ }
void UFGBlueprintFunctionLibrary::AddPopupWithContent(APlayerController* controller, FText Title, FText Body, const FPopupClosed& CloseDelegate, class UFGPopupWidgetContent* Content, FKey OverrideConfirmKey, EPopupId PopupID, UObject* popupInstigator, bool restoreFocusOnClose, bool manuallyHandleClosing){  }
void UFGBlueprintFunctionLibrary::ClosePopup(APlayerController* controller){ }
bool UFGBlueprintFunctionLibrary::HasActivePopup(APlayerController* controller){ return false; }
void UFGBlueprintFunctionLibrary::ClearPopupQueueOfClass(APlayerController* controller, TSubclassOf< UUserWidget > widgetClass){ }
void UFGBlueprintFunctionLibrary::ClearPopupQueueOfContentClass(APlayerController* controller, TSubclassOf< UFGPopupWidgetContent > contentClass){ }
void UFGBlueprintFunctionLibrary::CopyTextToClipboard(FText textToCopy){ }
FText UFGBlueprintFunctionLibrary::CopyTextFromClipboard(){ return FText(); }
void UFGBlueprintFunctionLibrary::RemoveAndReleaseAllChildsFromPanel( AFGHUD* hud, UPanelWidget* panelWidget){ }
void UFGBlueprintFunctionLibrary::RemoveAndReleaseChildFromPanel( AFGHUD* hud, UPanelWidget* panelWidget, int32 index){ }
AFGPlayerController* UFGBlueprintFunctionLibrary::GetLocalPlayerController(const UObject* worldContext){ return nullptr; }
bool UFGBlueprintFunctionLibrary::EqualEqual_FrameTimeFrameTime(FFrameTime frameTimeA, FFrameTime frameTimeB){ return bool(); }
bool UFGBlueprintFunctionLibrary::NotEqual_FrameTimeFrameTime(FFrameTime frameTimeA, FFrameTime frameTimeB){ return bool(); }
FFrameTime UFGBlueprintFunctionLibrary::Conv_IntToFrameTime(int32 frameCount){ return FFrameTime(); }
int32 UFGBlueprintFunctionLibrary::Conv_FrameTimeToInt(FFrameTime frameTime){ return int32(); }
bool UFGBlueprintFunctionLibrary::EqualEqual_FMapMarkerFMapMarker(const FMapMarker& mapMarkerA, const FMapMarker& mapMarkerB){ return bool(); }
FGuid UFGBlueprintFunctionLibrary::GetMapMarkerGUID(const FMapMarker& mapMarker, bool& out_hasValidID){ return FGuid(); }
void UFGBlueprintFunctionLibrary::Set3DWidgetClass(TSubclassOf<UUserWidget> InWidgetClass, UWidgetComponent* Target){  }
bool UFGBlueprintFunctionLibrary::EvaluateMathExpression(const FString& expression,  FText& out_Result){ return bool(); }
FString UFGBlueprintFunctionLibrary::SecondsToTimeString(float inSeconds){ return FString(); }
FString UFGBlueprintFunctionLibrary::Conv_IntToString(int64 InInt){ return FString(); }
bool UFGBlueprintFunctionLibrary::GetGIsEditor(){ return bool(); }
void UFGBlueprintFunctionLibrary::ScrollToEndAfterTwoTicks(UScrollBox* scrollBox){ }
void UFGBlueprintFunctionLibrary::SetMetadataTag(UObject* object, FName tag, const FString& value){ }
FString UFGBlueprintFunctionLibrary::GetMetadataTag(UObject* object, FName tag){ return FString(); }
bool UFGBlueprintFunctionLibrary::FileLoadString(FString AbsoluteFilePath, FString& String){ return bool(); }
FText UFGBlueprintFunctionLibrary::CutTextByPixelOffset(const FText& text, const FSlateFontInfo& inFontInfo, const int32 horizontalOffset, const FString& suffix){ return FText(); }
void UFGBlueprintFunctionLibrary::GetActorsInRadius(UObject* WorldContextObject, FVector inLocation,  float inRadius, TSubclassOf< AActor > inActorClass, TArray<  AActor* >& result){ }
bool UFGBlueprintFunctionLibrary::IsWidgetUnderCursor( ULocalPlayer* localPlayer,  UUserWidget* widget){ return bool(); }
UObject* UFGBlueprintFunctionLibrary::Conv_SessionSaveStructToObject(FSessionSaveStruct inSessionSaveStruct){ return nullptr; }
UObject* UFGBlueprintFunctionLibrary::Conv_SaveHeaderToObject(FSaveHeader inSaveHeader){ return nullptr; }
void UFGBlueprintFunctionLibrary::WaitForValidSubsystems(const UObject* WorldContextObject,  FLatentActionInfo LatentInfo){ }
void UFGBlueprintFunctionLibrary::WaitForPlayerState(const UObject* WorldContextObject, AFGPlayerController* PlayerController,  FLatentActionInfo LatentInfo,  AFGPlayerState*& out_playerState){ }
void UFGBlueprintFunctionLibrary::WaitForFGHud(const UObject* WorldContextObject,  FLatentActionInfo LatentInfo,  AFGHUD*& out_HUD){ }
void UFGBlueprintFunctionLibrary::WaitForGameUI(const UObject* WorldContextObject,  FLatentActionInfo LatentInfo,  UFGGameUI*& out_GameUI){ }
void UFGBlueprintFunctionLibrary::WaitForCondition(const UObject* WorldContextObject,  FLatentActionInfo LatentInfo, const FLatentActionPredicate& Predicate, bool ExecuteOnDedicatedServer){ }
void UFGBlueprintFunctionLibrary::GetAllPickupableItemDescriptors(UObject* WorldContextObject, TArray< TSubclassOf<  UFGItemDescriptor > >& out_itemDescriptors){ }
bool UFGBlueprintFunctionLibrary::ShouldShowUnstableSaveVersionWarning(){ return bool(); }
bool UFGBlueprintFunctionLibrary::ShouldShowOfflineSessionWarning(){ return bool(); }
bool UFGBlueprintFunctionLibrary::ShouldShowConsoleUI(){ return false; }
bool UFGBlueprintFunctionLibrary::ShouldShowGamepadUI(const UObject* WorldContextObject){ return false; }
bool UFGBlueprintFunctionLibrary::IsUsingController(const UObject* WorldContextObject){ return bool(); }
UFGGameInstance* UFGBlueprintFunctionLibrary::GetFGGameInstance(const UObject* WorldContextObject){ return nullptr; }
UWidget* UFGBlueprintFunctionLibrary::FindWidgetToFocus(UWidget* Widget, EFGFocusReason FocusReason){ return nullptr; }
bool UFGBlueprintFunctionLibrary::IsReallyVisible(UWidget* Widget){ return bool(); }
bool UFGBlueprintFunctionLibrary::HasAnyVisibleChildren(UPanelWidget* Parent){ return bool(); }
UWidget* UFGBlueprintFunctionLibrary::GetPreviousChild(UWidget* widget){ return nullptr; }
UWidget* UFGBlueprintFunctionLibrary::GetNextChild(UWidget* widget){ return nullptr; }
const FGeometry& UFGBlueprintFunctionLibrary::GetFocusedWidgetGeometry(){ return *(new FGeometry); }
UUserWidget* UFGBlueprintFunctionLibrary::GetFocusedUserWidget(){ return nullptr; }
UUserWidget* UFGBlueprintFunctionLibrary::GetFirstFocusedUserWidgetOfClass(TSubclassOf< UUserWidget > widgetClass){ return nullptr; }
UUserWidget* UFGBlueprintFunctionLibrary::GetFirstFocusedUserWidgetOfAnyClass(TArray< TSubclassOf< UUserWidget > > widgetClasses){ return nullptr; }
UUserWidget* UFGBlueprintFunctionLibrary::GetFirstFocusedUserWidgetOfInterface(UClass* widgetInterface){ return nullptr; }
FVector2D UFGBlueprintFunctionLibrary::GetShortestDistance(const FGeometry& fromGeometry, const FGeometry& toGeometry){ return FVector2D(); }
FVector2D UFGBlueprintFunctionLibrary::GetLongestDistance(const FGeometry& fromGeometry, const FGeometry& toGeometry){ return FVector2D(); }
UWidget* UFGBlueprintFunctionLibrary::FindClosestWidget(const FGeometry& geometry, const TArray<UWidget*>& widgets, bool bOnlyVisible , bool bOnlyFocusable){ return nullptr; }
UWidget* UFGBlueprintFunctionLibrary::FindClosestChild(const FGeometry& geometry, UPanelWidget* parentWidget){ return nullptr; }
UWidget* UFGBlueprintFunctionLibrary::FindOppositeWidgetY(const FGeometry& geometry, const TArray<UWidget*>& widgets, bool bOnlyVisible , bool bOnlyFocusable){ return nullptr; }
void UFGBlueprintFunctionLibrary::SimulateKeyDownEvent(const FKeyEvent& keyEvent){ }
void UFGBlueprintFunctionLibrary::SimulateKeyUpEvent(const FKeyEvent& keyEvent){ }
bool UFGBlueprintFunctionLibrary::GetKeyState(UObject* WorldContextObject, FKey Key){ return bool(); }
bool UFGBlueprintFunctionLibrary::IsGamepadAttached(){ return false; }
void UFGBlueprintFunctionLibrary::NotifyKeyHintsChanged(UObject* WorldContextObject){ }
void UFGBlueprintFunctionLibrary::ToggleThumbstickUiNavigation(bool bEnabled){  }
FString UFGBlueprintFunctionLibrary::BuildSourceString(const FText& inText){ return FString(); }
void UFGBlueprintFunctionLibrary::SortStrings(TArray< FString >& strings, bool sortAscending){ }
TArray<UUserWidget*> UFGBlueprintFunctionLibrary::SortListViewEntryWidgets(const TArray<UUserWidget*>& EntryWidgets){ return TArray<UUserWidget*>(); }
void UFGBlueprintFunctionLibrary::BreakCustomizationColorSlot(const  FFactoryCustomizationColorSlot& customData, FLinearColor& primaryColor, FLinearColor& secondaryColor, TSubclassOf<UFGFactoryCustomizationDescriptor_PaintFinish>& Finish){ }
FFactoryCustomizationColorSlot UFGBlueprintFunctionLibrary::MakeCustomizationColorSlot(FLinearColor primaryColor, FLinearColor secondaryColor, TSubclassOf<UFGFactoryCustomizationDescriptor_PaintFinish> Finish){ return FFactoryCustomizationColorSlot(); }
UTexture2D* UFGBlueprintFunctionLibrary::GetIconForCustomizationDesc(const TSubclassOf<  UFGFactoryCustomizationDescriptor > customizationDesc){ return nullptr; }
void UFGBlueprintFunctionLibrary::GetDescriptionForCustomizationDesc(const TSubclassOf<  UFGFactoryCustomizationDescriptor > customizationDesc, FText& out_description){ }
void UFGBlueprintFunctionLibrary::GetValidBuildablsForCustomization(TSubclassOf<  UFGFactoryCustomizationDescriptor > customizationDesc, TArray< TSubclassOf<  AFGBuildable > >& out_buildables){ }
int32 UFGBlueprintFunctionLibrary::GetIDForCustomizationDesc(const TSubclassOf<  UFGFactoryCustomizationDescriptor > customizationDesc){ return int32(); }
void UFGBlueprintFunctionLibrary::GetMaterialCustomizationBuildableMap(TSubclassOf<  UFGFactoryCustomizationDescriptor > materialCustomization,
													  TMap< TSubclassOf<  AFGBuildable >, TSubclassOf<  UFGRecipe > >& out_buildableMap){ }
void UFGBlueprintFunctionLibrary::GetCustomizationsFromCollectionClass(TSubclassOf<  UFGFactoryCustomizationCollection > collectionClass, TArray< TSubclassOf<  UFGFactoryCustomizationDescriptor > >& out_customizaitons){ }
void UFGBlueprintFunctionLibrary::GetSlotDataForSwatchDesc(TSubclassOf<  UFGFactoryCustomizationDescriptor_Swatch > swatchDesc,  AActor* worldContext, FFactoryCustomizationColorSlot& out_SlotData){ }
bool UFGBlueprintFunctionLibrary::GetIsCategoryDefaultForMaterialDesc(TSubclassOf<  UFGFactoryCustomizationDescriptor_Material > materialDesc){ return bool(); }
void UFGBlueprintFunctionLibrary::SortCustomizationRecipes(TArray< TSubclassOf<  UFGCustomizationRecipe > >& recipes){ }
void UFGBlueprintFunctionLibrary::ApplySkinDataToMeshArray(TArray< UMeshComponent* >& compArr, FFactorySkinComponentGroup& groupData){ }
UFXSystemAsset* UFGBlueprintFunctionLibrary::SpawnParticleSystemAtLocationFromFXSystem(UObject* WorldContext, UFXSystemAsset* Asset, FVector Location, FRotator Rotation, FVector Scale){ return nullptr; }
void UFGBlueprintFunctionLibrary::SetTraceDistance(UDirectionalLightComponent* DirectionalLight,float Value){ }
float UFGBlueprintFunctionLibrary::GetPrimitiveDataFromIndex(int32 Index, UPrimitiveComponent* Component){ return float(); }
float UFGBlueprintFunctionLibrary::GetPrimitiveDefaultDataFromIndex(int32 Index, UPrimitiveComponent* Component){ return float(); }
void UFGBlueprintFunctionLibrary::CSS_SetAnimationAsset(USkeletalMeshComponent* Comp, UAnimationAsset* AnimationAsset){ }
int64 UFGBlueprintFunctionLibrary::GetFrameNumber(){ return int64(); }
float UFGBlueprintFunctionLibrary::FindClosestPlayerSq(AActor* source){ return float(); }
void UFGBlueprintFunctionLibrary::SetWaterCollisionSettings(UStaticMeshComponent* Target){ }
bool UFGBlueprintFunctionLibrary::SegmentIntersection(const FVector& SegmentBeginA, const FVector& SegmentEndA, const FVector& SegmentBeginB, const FVector& SegmentEndB){ return bool(); }
FString UFGBlueprintFunctionLibrary::GetActorGridStringRuntTime(AActor* InActor){ return FString(); }
FVector UFGBlueprintFunctionLibrary::GetEditorCameraLocation(){ return FVector(); }
void UFGBlueprintFunctionLibrary::ED_SetMinDrawDistance(UStaticMeshComponent* Comp, float Distance){ }
FFGDynamicStruct UFGBlueprintFunctionLibrary::MakeDynamicStruct(const int32& structureValue){ return FFGDynamicStruct(); }
bool UFGBlueprintFunctionLibrary::BreakDynamicStruct(const FFGDynamicStruct& inDynamicStruct, int32& out_structureValue){ return bool(); }
bool UFGBlueprintFunctionLibrary::VolumeEncompassesPoint(AVolume* volume, const FVector& inPoint, float& outDistanceToPoint, float sphereRadius){ return bool(); }
void UFGBlueprintFunctionLibrary::ForceReRunConstructionScript(AActor* Actor){ }
TSubclassOf<UFGItemDescriptor> UFGBlueprintFunctionLibrary::GetRecipeProducerItemDescriptor(TSubclassOf<UObject> recipeProducer, UObject* worldContext){ return TSubclassOf<UFGItemDescriptor>(); }
TArray< AFGPlayerController* > UFGBlueprintFunctionLibrary::GetAllPlayerControllersInSession(const UObject* worldContextObject){ return TArray<AFGPlayerController*>(); }
bool UFGBlueprintFunctionLibrary::IsNavigationEvent(FFocusEvent& inEvent){ return bool(); }
void UFGBlueprintFunctionLibrary::ChangeActorNameToLableName(AActor* Actor){  }
void UFGBlueprintFunctionLibrary::FilterText(const FString& text, const FOnMessageProcessed& completionDelegate){  }
void UFGBlueprintFunctionLibrary::FilterText(const FString& text, const FOnMessageProcessedDynamic& completionDelegate){  }
void UFGBlueprintFunctionLibrary::FilterTexts(const TArray<FString>& texts, const FOnMessageArrayProcessed& completionDelegate){  }
void UFGBlueprintFunctionLibrary::FilterTexts(const TArray<FString>& texts, const FOnMessageArrayProcessedDynamic& completionDelegate){  }
void UFGBlueprintFunctionLibrary::WaitForFilterText(const UObject* WorldContextObject, struct FLatentActionInfo LatentInfo, const FString& Text, FString& out_Filtered){  }
void UFGBlueprintFunctionLibrary::WaitForFilterTexts(const UObject* WorldContextObject, struct FLatentActionInfo LatentInfo, const TArray<FString>& texts, TArray<FString>& out_Filtered){  }
FString UFGBlueprintFunctionLibrary::MakeStringUGCCompatible(const FString& inText, EUGCStringConversionResult& conversionResult){ return FString(); }
bool UFGBlueprintFunctionLibrary::IsConsolePlatform(){ return false; }
bool UFGBlueprintFunctionLibrary::IsConsolePlatformPure(){ return false; }
EFGTargetPlatform UFGBlueprintFunctionLibrary::GetCurrentPlatform(){ return EFGTargetPlatform::TP_Windows; }
FString UFGBlueprintFunctionLibrary::GetPlatformAvatarURL(FName UserPlatform, FString UserPlatformAvatarURL, FString OnlineUserAvatarURL){ return FString(); }
EUGCVisibilityErrors UFGBlueprintFunctionLibrary::UserCanSeeUGCInThisContext(AFGPlayerController* LocalPlayerController, TArray<FLocalUserNetIdBundle> LastUGCEditBy){ return EUGCVisibilityErrors::UGCVE_NoErrors; }
bool UFGBlueprintFunctionLibrary::UGCIsBlurExcempt(EUGCVisibilityErrors VisibilityResult){ return false; }
bool UFGBlueprintFunctionLibrary::UGCVisibilityErrorsIsMatch(int32 Bitmask, int32 Bitmask2){ return false; }
FString UFGBlueprintFunctionLibrary::ComposeLastEditedByStringForPlatform(const TArray<FLocalUserNetIdBundle>& LastEditedByData){ return FString(); }
void UFGBlueprintFunctionLibrary::BlockUser(UOnlineUserInfo* BlockingUser, UOnlineUserInfo* UserToBlock){  }
void UFGBlueprintFunctionLibrary::BlockUserOn(UOnlineUserInfo* BlockingUser, UOnlineUserInfo* UserToBlock, EBlockBackendTarget BackendTarget, FOnBlockOverlayClosed OnPopupClosed){  }
bool UFGBlueprintFunctionLibrary::UserCanBeBlockedOn(UOnlineUserInfo* UserToBlock, EBlockBackendTarget BackendTarget){ return false; }
bool UFGBlueprintFunctionLibrary::UserIsBlockedFullyBy(UOnlineUserInfo* UserChecking, UOnlineUserInfo* UserToCheck){ return false; }
void UFGBlueprintFunctionLibrary::FullReAuth(UObject* WorldContextObject){  }
bool UFGBlueprintFunctionLibrary::IsFrontEndLoadingScreenFinished(APlayerController* controller){ return false; }
bool UFGBlueprintFunctionLibrary::CanDisplayPopup(APlayerController* controller){ return false; }
void UFGBlueprintFunctionLibrary::PopErrorHandlingSubsystem(UObject* WorldContextObject){  }
bool UFGBlueprintFunctionLibrary::HasPendingErrorHandlingSubsystem(UObject* WorldContextObject){ return false; }
bool UFGBlueprintFunctionLibrary::IsPlatformConnectedButNotAuthenticated(UObject* WorldContext){ return false; }
bool UFGBlueprintFunctionLibrary::HasPlatformConnectionAndAuthenticationMismatch(UObject* WorldContext){ return false; }
bool UFGBlueprintFunctionLibrary::IsFullyAuthenticatedAtPlatformServices(UObject* WorldContext){ return false; }
bool UFGBlueprintFunctionLibrary::IsFullyAuthenticatedAtEOS(UObject* WorldContext){ return false; }
void UFGBlueprintFunctionLibrary::CheckAndFixPlatformAuthentication(UObject* WorldContextObject){  }
FString UFGBlueprintFunctionLibrary::GetDetailedPlatformConnectionStateString(UObject* WorldContext){ return FString(); }
bool UFGBlueprintFunctionLibrary::IsCurrentOnlineIntegrationStateValid(UObject* WorldContext, FIntegrationStateCheckResult& out_detailedResult){ return false; }
bool UFGBlueprintFunctionLibrary::IsAWithSoftRef(UObject* Object, TSoftClassPtr<UObject> SoftClass){ return false; }
void UFGBlueprintFunctionLibrary::ActivateAimAssistClient(APlayerController* PlayerController, TScriptInterface<IFGAimAssistClient> AimAssistClient, bool IsActive){  }
void UFGBlueprintFunctionLibrary::EnableAnalogUINavigation(bool bEnable){  }
bool UFGBlueprintFunctionLibrary::IsTranslationSupportedByPlatform(FLocalizationEntry LocalizationEntry){ return false; }

DEFINE_FUNCTION(UFGBlueprintFunctionLibrary::execMakeDynamicStruct) {
	PARAM_PASSED_BY_REF(inDynamicStruct, FIntProperty, int32);
	P_FINISH;
	P_NATIVE_BEGIN;
	P_NATIVE_END;
}

DEFINE_FUNCTION(UFGBlueprintFunctionLibrary::execBreakDynamicStruct) {
	PARAM_PASSED_BY_REF(inDynamicStruct, FStructProperty, FFGDynamicStruct);
	PARAM_PASSED_BY_REF(out_structureValue, FIntProperty, int32);
	P_FINISH;
	P_NATIVE_BEGIN;
	P_NATIVE_END;
}
