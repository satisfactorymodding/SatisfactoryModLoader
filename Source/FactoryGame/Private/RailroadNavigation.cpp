// This file has been automatically generated by the Unreal Header Implementation tool

#include "RailroadNavigation.h"

FRailroadGraphAStarPathPoint::FRailroadGraphAStarPathPoint(int32 unused){ }
FRailroadGraphAStarPathPoint::FRailroadGraphAStarPathPoint(UFGRailroadTrackConnectionComponent* connection){ }
FRailroadGraphAStarPathPoint::FRailroadGraphAStarPathPoint(UFGRailroadTrackConnectionComponent* connection, bool ignoredStart){ }
FRailroadGraphAStarPathPoint::FRailroadGraphAStarPathPoint(const FRailroadGraphAStarPathPoint& point){ }
int32 FRailroadGraphAStarHelper::GetNeighbourCount(const FRailroadGraphAStarPathPoint& nodeRef) const{ return int32(); }
bool FRailroadGraphAStarHelper::IsValidRef(const FRailroadGraphAStarPathPoint& nodeRef) const{ return bool(); }
FRailroadGraphAStarPathPoint FRailroadGraphAStarHelper::GetNeighbour(const FRailroadGraphAStarPathPoint& nodeRef, const int32 neighbourIndex) const{ return FRailroadGraphAStarPathPoint(); }
FRailroadGraphAStarFilter::FRailroadGraphAStarFilter(){ }
float FRailroadGraphAStarFilter::GetHeuristicScale() const{ return float(); }
float FRailroadGraphAStarFilter::GetHeuristicCost(const FRailroadGraphAStarPathPoint& startNodeRef, const FRailroadGraphAStarPathPoint& endNodeRef) const{ return float(); }
float FRailroadGraphAStarFilter::GetTraversalCost(const FRailroadGraphAStarPathPoint& startNodeRef, const FRailroadGraphAStarPathPoint& endNodeRef) const{ return float(); }
bool FRailroadGraphAStarFilter::IsTraversalAllowed(const FRailroadGraphAStarPathPoint& nodeA, const FRailroadGraphAStarPathPoint& nodeB) const{ return bool(); }
bool FRailroadGraphAStarFilter::WantsPartialSolution() const{ return bool(); }
FRailroadPathFindingResult FRailroadNavigation::FindPathSync(AFGLocomotive* locomotive,
		AFGBuildableRailroadStation* station,
		FRailroadGraphAStarFilter filter){ return FRailroadPathFindingResult(); }
EGraphAStarResult FRailroadNavigation::FindPathSyncInternal(const FRailroadGraphAStarPathPoint& start,
		const FRailroadGraphAStarPathPoint& end,
		FRailroadGraphAStarFilter filter,
		TArray< FRailroadGraphAStarPathPoint >& out_pathPoints){ return EGraphAStarResult(); }
