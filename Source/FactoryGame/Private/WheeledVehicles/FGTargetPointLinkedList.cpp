// This file has been automatically generated by the Unreal Header Implementation tool

#include "WheeledVehicles/FGTargetPointLinkedList.h"
#include "Net/UnrealNetwork.h"

AFGDrivingTargetList::AFGDrivingTargetList() : Super() {
	this->mFirst = nullptr;
	this->mLast = nullptr;
	this->mCurrentTarget = nullptr;
	this->mMaxLength = 2000;
	this->mCachedMinimapCaptureActor = nullptr;
	this->mVehicleType = nullptr;
	this->mIsPathVisible = true;
	this->mIsTemporary = false;
	this->mPathActor = nullptr;
	this->mPath = nullptr;
	this->mPathFuelConsumption = 0.0;
	this->bAlwaysRelevant = true;
	this->bReplicates = true;
}
void AFGDrivingTargetList::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGDrivingTargetList, mFirst);
	DOREPLIFETIME(AFGDrivingTargetList, mLast);
	DOREPLIFETIME(AFGDrivingTargetList, mVehicleType);
	DOREPLIFETIME(AFGDrivingTargetList, mIsPathVisible);
	DOREPLIFETIME(AFGDrivingTargetList, mIsTemporary);
	DOREPLIFETIME(AFGDrivingTargetList, mTargetCount);
	DOREPLIFETIME(AFGDrivingTargetList, mPathFuelConsumption);
}
void AFGDrivingTargetList::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
bool AFGDrivingTargetList::ShouldSave_Implementation() const{ return bool(); }
void AFGDrivingTargetList::BeginPlay(){ Super::BeginPlay(); }
void AFGDrivingTargetList::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGDrivingTargetList::CreatePath(){ }
void AFGDrivingTargetList::DestroyPath_Server(){ }
void AFGDrivingTargetList::DestroyLocalActors(){ }
void AFGDrivingTargetList::AppendItem( AFGTargetPoint* newTarget){ }
void AFGDrivingTargetList::InsertItem( AFGTargetPoint* newTarget,  AFGTargetPoint* afterTarget){ }
void AFGDrivingTargetList::RemoveItem( AFGTargetPoint* targetToRemove){ }
void AFGDrivingTargetList::SetPathVisible(bool isVisible){ }
int AFGDrivingTargetList::FindTargetIndex( AFGTargetPoint* target) const{ return int(); }
AFGTargetPoint* AFGDrivingTargetList::FindTargetByIndex(int index) const{ return nullptr; }
AFGTargetPoint* AFGDrivingTargetList::FindPreviousTarget( AFGTargetPoint* currentTarget) const{ return nullptr; }
AFGTargetPoint* AFGDrivingTargetList::GetNextTarget( AFGTargetPoint* currentTarget) const{ return nullptr; }
AFGTargetPoint* AFGDrivingTargetList::FindBestTarget(AActor* vehicleActor, float withinLookAngle , float maxDistance) const{ return nullptr; }
void AFGDrivingTargetList::GetMapData(float displaySize, int numberOfPoints, FDrivingTargetListMapData& data){ }
bool AFGDrivingTargetList::IsComplete() const{ return bool(); }
bool AFGDrivingTargetList::CleanUpDockingTargets( AFGBuildableDockingStation* onlyAtStation){ return bool(); }
bool AFGDrivingTargetList::IsNearingStation( AFGTargetPoint* queryTarget,  AFGBuildableDockingStation* station, int searchRange) const{ return bool(); }
void AFGDrivingTargetList::SetIsTemporary(bool isTemporary){ }
bool AFGDrivingTargetList::HasData() const{ return bool(); }
int AFGDrivingTargetList::CountTargets() const{ return int(); }
void AFGDrivingTargetList::CalculateTargetCount(){ }
void AFGDrivingTargetList::SetPathFuelConsumption(float pathFuelConsumption){ }
void AFGDrivingTargetList::AddToTouchedStations( AFGWheeledVehicle* vehicle){ }
void AFGDrivingTargetList::RemoveFromTouchedStations( AFGWheeledVehicle* vehicle){ }
float AFGDrivingTargetList::CalculatePathFuelConsumption(TSubclassOf<  UFGItemDescriptor > fuelType) const{ return float(); }
float AFGDrivingTargetList::CalculateFuelConsumptionRate(TSubclassOf<  UFGItemDescriptor > fuelType) const{ return float(); }
void AFGDrivingTargetList::OnRep_IsPathVisible(){ }
void AFGDrivingTargetList::OnRep_IsTemporary(){ }
void AFGDrivingTargetList::OnRep_TargetCount(){ }
