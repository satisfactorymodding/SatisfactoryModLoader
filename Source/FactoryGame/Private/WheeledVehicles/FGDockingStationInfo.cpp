// This file has been automatically generated by the Unreal Header Implementation tool

#include "WheeledVehicles/FGDockingStationInfo.h"
#include "Net/UnrealNetwork.h"

AFGDockingStationInfo::AFGDockingStationInfo() : Super() {
	this->mCompassMaterialInstance = nullptr;
	this->mStatus = EDockingStationStatus::DSS_Operational;
	this->mStation = nullptr;
	this->mLocation = FVector::ZeroVector;
	this->mActorRepresentationTexture = nullptr;
	this->mDefaultRepresentationColor = FLinearColor(0.0, 0.0, 0.0, 0.0);
	this->mBuildingTag = TEXT("DockingStation");
	this->bAlwaysRelevant = true;
	this->bReplicates = true;
}
void AFGDockingStationInfo::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGDockingStationInfo, mStatus);
	DOREPLIFETIME(AFGDockingStationInfo, mLocation);
	DOREPLIFETIME(AFGDockingStationInfo, mActorRepresentationTexture);
	DOREPLIFETIME(AFGDockingStationInfo, mDefaultRepresentationColor);
	DOREPLIFETIME(AFGDockingStationInfo, mBuildingTag);
}
void AFGDockingStationInfo::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
bool AFGDockingStationInfo::AddAsRepresentation(){ return bool(); }
bool AFGDockingStationInfo::UpdateRepresentation(){ return bool(); }
bool AFGDockingStationInfo::RemoveAsRepresentation(){ return bool(); }
bool AFGDockingStationInfo::IsActorStatic(){ return bool(); }
FVector AFGDockingStationInfo::GetRealActorLocation(){ return FVector(); }
FRotator AFGDockingStationInfo::GetRealActorRotation(){ return FRotator(); }
UTexture2D* AFGDockingStationInfo::GetActorRepresentationTexture(){ return nullptr; }
FText AFGDockingStationInfo::GetActorRepresentationText(){ return FText(); }
void AFGDockingStationInfo::SetActorRepresentationText(const FText& newText){ }
FLinearColor AFGDockingStationInfo::GetActorRepresentationColor(){ return FLinearColor(); }
void AFGDockingStationInfo::SetActorRepresentationColor(FLinearColor newColor){ }
ERepresentationType AFGDockingStationInfo::GetActorRepresentationType(){ return ERepresentationType(); }
bool AFGDockingStationInfo::GetActorShouldShowInCompass(){ return bool(); }
bool AFGDockingStationInfo::GetActorShouldShowOnMap(){ return bool(); }
EFogOfWarRevealType AFGDockingStationInfo::GetActorFogOfWarRevealType(){ return EFogOfWarRevealType(); }
float AFGDockingStationInfo::GetActorFogOfWarRevealRadius(){ return float(); }
ECompassViewDistance AFGDockingStationInfo::GetActorCompassViewDistance(){ return ECompassViewDistance(); }
void AFGDockingStationInfo::SetActorCompassViewDistance(ECompassViewDistance compassViewDistance){ }
UMaterialInterface* AFGDockingStationInfo::GetActorRepresentationCompassMaterial(){ return nullptr; }
void AFGDockingStationInfo::SetBuildingTag_Implementation(const FString& buildingTag){ }
void AFGDockingStationInfo::BeginPlay(){ Super::BeginPlay(); }
void AFGDockingStationInfo::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGDockingStationInfo::Init( AFGBuildableDockingStation* station){ }
void AFGDockingStationInfo::SetStationStatus(EDockingStationStatus status){ }
void AFGDockingStationInfo::OnRep_Status(){ }
void AFGDockingStationInfo::OnRep_BuildingTag(){ }
