// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGPipeBuilder.h"
#include "Components/SceneComponent.h"
#include "Components/SkeletalMeshComponent.h"
#include "GameFramework/FloatingPawnMovement.h"
#include "Net/UnrealNetwork.h"

AFGPipeBuilder::AFGPipeBuilder() : Super() {
	this->mMovementComponent = CreateDefaultSubobject<UFloatingPawnMovement>(TEXT("FloatingMovementComponent"));
	this->mPipeSupportLocation = CreateDefaultSubobject<USceneComponent>(TEXT("PipeSupportLocation"));
	this->mSplineHologram = nullptr;
	this->mSupportHologram = nullptr;
	this->mCurrentSplineSupportRecipeClass = nullptr;
	this->mCurrentSplineRecipeClass = nullptr;
	this->mInternalSplineSupport = nullptr;
	this->mMoveTime = 3.0;
	this->mHeightCurve = nullptr;
	this->mTrailClass = nullptr;
	this->mTrail = nullptr;
	this->mTrailDistance = 500.0;
	this->mPipeSupportLocation->SetupAttachment(mMesh);
}
void AFGPipeBuilder::BeginPlay(){ Super::BeginPlay(); }
void AFGPipeBuilder::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGPipeBuilder::Tick(float dt){ Super::Tick(dt); }
void AFGPipeBuilder::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGPipeBuilder, mSplineHologram);
	DOREPLIFETIME(AFGPipeBuilder, mSupportHologram);
	DOREPLIFETIME(AFGPipeBuilder, mInternalSplineSupport);
	DOREPLIFETIME(AFGPipeBuilder, mTrail);
}
void AFGPipeBuilder::Dismantle_Implementation(){ }
void AFGPipeBuilder::OnPrimaryFirePressed(){ }
void AFGPipeBuilder::SetupSplineAndSupport(){ }
void AFGPipeBuilder::ClearSplineAndSupport(){ }
void AFGPipeBuilder::OnSecondaryFirePressed(){ }
void AFGPipeBuilder::Server_PrimaryFire_Implementation(){ }
bool AFGPipeBuilder::Server_PrimaryFire_Validate(){ return bool(); }
void AFGPipeBuilder::Server_SecondaryFire_Implementation(){ }
bool AFGPipeBuilder::Server_SecondaryFire_Validate(){ return bool(); }
void AFGPipeBuilder::Server_UpdateHitResult_Implementation(FHitResult inHitResult){ }
bool AFGPipeBuilder::Server_UpdateHitResult_Validate(FHitResult inHitResult){ return bool(); }
void AFGPipeBuilder::SetHologramsActive(bool isActive){ }
void AFGPipeBuilder::SetRecipeFromIndex(int32 newIndex){ }
bool AFGPipeBuilder::IsReadyToBuild(){ return bool(); }
void AFGPipeBuilder::SpawnHolograms(){ }
void AFGPipeBuilder::TickMove(float dt){ }
