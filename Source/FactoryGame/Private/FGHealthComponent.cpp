// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGHealthComponent.h"
#include "Net/UnrealNetwork.h"

#if WITH_EDITOR
void UFGHealthComponent::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent){ Super::PostEditChangeProperty(PropertyChangedEvent); }
#endif 
void UFGHealthComponent::BeginPlay(){ Super::BeginPlay(); }
void UFGHealthComponent::PostLoad(){ Super::PostLoad(); }
void UFGHealthComponent::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void UFGHealthComponent::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void UFGHealthComponent::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void UFGHealthComponent::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void UFGHealthComponent::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool UFGHealthComponent::NeedTransform_Implementation(){ return bool(); }
bool UFGHealthComponent::ShouldSave_Implementation() const{ return bool(); }
void UFGHealthComponent::TakeDamage(AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ }
void UFGHealthComponent::TakePointDamage(AActor* damagedActor, float damage,  AController* instigatedBy, FVector hitLocation,  UPrimitiveComponent* hitComponent, FName boneName, FVector shotFromDirection, const  UDamageType* damageType, AActor* damageCauser){ }
void UFGHealthComponent::TakeRadialDamage(AActor* damagedActor, float damage, const  UDamageType* damageType, FVector hitLocation, const FHitResult& hitInfo,  AController* instigatedBy, AActor* damageCauser){ }
void UFGHealthComponent::AddDamageModifier(const FDamageModifier damageMod){ }
void UFGHealthComponent::RemoveDamageModifiersOfType(TSubclassOf<UFGDamageType> dmgType, bool includeSubClasses){ }
void UFGHealthComponent::RemoveDamageModifiersAppliedFromObject(UObject* applyingObject){ }
void UFGHealthComponent::SetMaxHealth(float NewMaxHealth){ }
float UFGHealthComponent::GetCurrentHealth() const{ return float(); }
float UFGHealthComponent::GetMaxHealth() const{ return float(); }
void UFGHealthComponent::Multicast_TakeDamage_Implementation(AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ }
void UFGHealthComponent::Multicast_TakePointDamage_Implementation(AActor* damagedActor, float damage,  AController* instigatedBy, FVector hitLocation,  UPrimitiveComponent* hitComponent, FName boneName, FVector shotFromDirection, const  UDamageType* damageType, AActor* damageCauser){ }
void UFGHealthComponent::Multicast_TakeRadialDamage_Implementation(AActor* damagedActor, float damage, const  UDamageType* damageType, FVector hitLocation, FHitResult hitInfo,  AController* instigatedBy, AActor* damageCauser){ }
void UFGHealthComponent::Multicast_Heal_Implementation(float amount){ }
void UFGHealthComponent::Heal(float healAmount, bool notifyClient){ }
void UFGHealthComponent::ResetHealth(){ }
void UFGHealthComponent::ResetHealthFromDeath(){ }
void UFGHealthComponent::Kill(){ }
void UFGHealthComponent::AddAdjustDamageListener(FAdjustDamageDelegate adjustDamage){ }
void UFGHealthComponent::RemoveAdjustDamageListener(FAdjustDamageDelegate adjustDamage){ }
float UFGHealthComponent::AdjustDamage(AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ return float(); }
void UFGHealthComponent::Died(){ }
void UFGHealthComponent::OnRep_IsDead(){ }
void UFGHealthComponent::OnRep_CurrentHealth(){ }
void UFGHealthComponent::GetLifetimeReplicatedProps(TArray<FLifetimeProperty> & OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGHealthComponent, mMaxHealth);
	DOREPLIFETIME(UFGHealthComponent, mCurrentHealth);
	DOREPLIFETIME(UFGHealthComponent, mRespawnHealthFactor);
	DOREPLIFETIME(UFGHealthComponent, mIsDead);
}
