// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGCliffActor.h"
#include "Components/StaticMeshComponent.h"

AFGCliffActorManager::AFGCliffActorManager() : Super() {
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 1.0;
}
void AFGCliffActorManager::EnqueueTask(UWorld* World, FAsyncTask<class FFGAsyncCliffGrassBuilderTask>* inAsyncTask, AFGCliffActor* inActor){ }
void AFGCliffActorManager::Tick(float DeltaSeconds){ Super::Tick(DeltaSeconds); }
void AFGCliffActorManager::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
#if WITH_EDITOR
void AFGCliffActor::ConvertStaticMeshActorToOnTopMesh(AActor* SelectedActor, FString& ResultMsg){ }
void AFGCliffActor::UpdateAssociatedCliffActorsAndReParent(){ }
void AFGCliffActor::DebugSpawn(){ }
void AFGCliffActor::ClearDebugSpawn(){ }
void AFGCliffActor::ForceUpdateMeshCPUAccess(){ }
void AFGCliffActor::DebugDrawSignificanceRange(){ }
void AFGCliffActor::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent){ Super::PostEditChangeProperty(PropertyChangedEvent); }
#endif 
AFGCliffActor::AFGCliffActor() : Super() {
	this->mMeshComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("CliffMesh"));
	this->mStaticMesh = nullptr;
	this->mSignificanceRangeMultiplier = 1.25;
	this->RootComponent = mMeshComponent;
}
void AFGCliffActor::BeginPlay(){ Super::BeginPlay(); }
void AFGCliffActor::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGCliffActor::OnConstruction(const FTransform& Transform){ }
void AFGCliffActor::GainedSignificance_Implementation(){ }
void AFGCliffActor::LostSignificance_Implementation(){ }
float AFGCliffActor::GetSignificanceRange(){ return float(); }
FFGCliffGrassWorker::FFGCliffGrassWorker(AFGCliffActor* inCliffActor, UFoliageType* inType,float inMultiplier, UGrassInstancedStaticMeshComponent* inHISMComponent){ }
void FFGCliffGrassWorker::DoWork(){ }
void FFGAsyncCliffGrassBuilderTask::DoWork(){ }
FFGAsyncCliffGrassBuilderTask::~FFGAsyncCliffGrassBuilderTask(){ }
