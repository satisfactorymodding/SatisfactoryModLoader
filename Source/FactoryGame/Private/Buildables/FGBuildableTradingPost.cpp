// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableTradingPost.h"
#include "Components/SceneComponent.h"

AFGBuildableTradingPost::AFGBuildableTradingPost() : Super() {
	this->mDefaultGeneratorRecipe = nullptr;
	this->mDefaultStorageRecipe = nullptr;
	this->mDefaultHubTerminalRecipe = nullptr;
	this->mDefaultWorkBenchRecipe = nullptr;
	this->mStorage = nullptr;
	this->mHubTerminal = nullptr;
	this->mWorkBench = nullptr;
	this->mStorageInventorySize = 0;
	this->mStorageVisibilityLevel = 0;
	this->mInputInventory = nullptr;
	this->mSpawningGroundZOffset = 5.0;
	this->mGroundSearchZDistance = 250.0;
	this->mSchematicManager = nullptr;
	this->mGenerator1Location = CreateDefaultSubobject<USceneComponent>(TEXT("Generator1Location"));
	this->mGenerator2Location = CreateDefaultSubobject<USceneComponent>(TEXT("Generator2Location"));
	this->mStorageLocation = CreateDefaultSubobject<USceneComponent>(TEXT("StorageLocation"));
	this->mHubTerminalLocation = CreateDefaultSubobject<USceneComponent>(TEXT("HubTerminalLocation"));
	this->mWorkBenchLocation = CreateDefaultSubobject<USceneComponent>(TEXT("WorkBenchLocation"));
	this->mNeedPlayingBuildEffectNotification = false;
	this->mActorRepresentationTexture = nullptr;
	this->mRepresentationText = INVTEXT("");
	this->mGenerator1Location->SetupAttachment(RootComponent);
	this->mGenerator2Location->SetupAttachment(RootComponent);
	this->mStorageLocation->SetupAttachment(RootComponent);
	this->mHubTerminalLocation->SetupAttachment(RootComponent);
	this->mWorkBenchLocation->SetupAttachment(RootComponent);
}
void AFGBuildableTradingPost::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGBuildableTradingPost::BeginPlay(){ }
void AFGBuildableTradingPost::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableTradingPost::Dismantle_Implementation(){ }
void AFGBuildableTradingPost::GetDismantleRefund_Implementation(TArray< FInventoryStack >& out_refund) const{ }
void AFGBuildableTradingPost::StartIsLookedAtForDismantle_Implementation( AFGCharacterPlayer* byCharacter){ }
void AFGBuildableTradingPost::StopIsLookedAtForDismantle_Implementation( AFGCharacterPlayer* byCharacter){ }
void AFGBuildableTradingPost::GetChildDismantleActors_Implementation(TArray< AActor* >& out_ChildDismantleActors) const{ }
bool AFGBuildableTradingPost::AddAsRepresentation(){ return bool(); }
bool AFGBuildableTradingPost::UpdateRepresentation(){ return bool(); }
bool AFGBuildableTradingPost::RemoveAsRepresentation(){ return bool(); }
bool AFGBuildableTradingPost::IsActorStatic(){ return bool(); }
FVector AFGBuildableTradingPost::GetRealActorLocation(){ return FVector(); }
FRotator AFGBuildableTradingPost::GetRealActorRotation(){ return FRotator(); }
UTexture2D* AFGBuildableTradingPost::GetActorRepresentationTexture(){ return nullptr; }
FText AFGBuildableTradingPost::GetActorRepresentationText(){ return FText(); }
void AFGBuildableTradingPost::SetActorRepresentationText(const FText& newText){ }
FLinearColor AFGBuildableTradingPost::GetActorRepresentationColor(){ return FLinearColor(); }
void AFGBuildableTradingPost::SetActorRepresentationColor(FLinearColor newColor){ }
ERepresentationType AFGBuildableTradingPost::GetActorRepresentationType(){ return ERepresentationType(); }
bool AFGBuildableTradingPost::GetActorShouldShowInCompass(){ return bool(); }
bool AFGBuildableTradingPost::GetActorShouldShowOnMap(){ return bool(); }
EFogOfWarRevealType AFGBuildableTradingPost::GetActorFogOfWarRevealType(){ return EFogOfWarRevealType(); }
float AFGBuildableTradingPost::GetActorFogOfWarRevealRadius(){ return float(); }
ECompassViewDistance AFGBuildableTradingPost::GetActorCompassViewDistance(){ return ECompassViewDistance(); }
void AFGBuildableTradingPost::SetActorCompassViewDistance(ECompassViewDistance compassViewDistance){ }
void AFGBuildableTradingPost::OnTradingPostUpgraded_Implementation(int32 level, bool suppressBuildEffects){ }
void AFGBuildableTradingPost::UpdateGeneratorVisibility(){ }
void AFGBuildableTradingPost::UpdateStorageVisibility(){ }
int32 AFGBuildableTradingPost::GetTradingPostLevel() const{ return int32(); }
void AFGBuildableTradingPost::PlayBuildEffects(AActor* inInstigator){ }
void AFGBuildableTradingPost::ExecutePlayBuildEffects(){ }
void AFGBuildableTradingPost::PlayBuildEffectsOnAllClients(AActor* instigator){ }
bool AFGBuildableTradingPost::AreChildBuildingsLoaded(){ return bool(); }
void AFGBuildableTradingPost::ValidateSubBuildings(){ }
TArray<AActor*> AFGBuildableTradingPost::GetAllActiveSubBuildings() const{ return TArray<AActor*>(); }
void AFGBuildableTradingPost::OnBuildEffectFinished(){ }
void AFGBuildableTradingPost::TogglePendingDismantleMaterial(bool enabled){ }
void AFGBuildableTradingPost::OnRep_HAXX_SubbuildingReplicated(){ }
void AFGBuildableTradingPost::AdjustPlayerSpawnsToGround(){ }
AFGSchematicManager* AFGBuildableTradingPost::GetSchematicManager(){ return nullptr; }
void AFGBuildableTradingPost::OnRep_NeedPlayingBuildEffect(){ }
