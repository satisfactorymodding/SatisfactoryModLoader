// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableCheatFluidSpawner.h"
#include "Net/UnrealNetwork.h"

AFGBuildableCheatFluidSpawner::AFGBuildableCheatFluidSpawner() : Super() {
	this->mIsEnabled = true;
	this->mResourceType = nullptr;
	this->mSpawnRate = 0.0;
	this->mMeasuredSpawnRate = 0.0;
	this->mPressure = 0.0;
	this->mOutputConnection = nullptr;
}
void AFGBuildableCheatFluidSpawner::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableCheatFluidSpawner::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGBuildableCheatFluidSpawner::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableCheatFluidSpawner, mResourceType);
}
void AFGBuildableCheatFluidSpawner::GetConditionalReplicatedProps(TArray<FFGCondReplicatedProperty>& outProps) const{ }
FFluidBox* AFGBuildableCheatFluidSpawner::GetFluidBox(){ return nullptr; }
TArray< class UFGPipeConnectionComponent* > AFGBuildableCheatFluidSpawner::GetPipeConnections(){ return TArray<class UFGPipeConnectionComponent*>(); }
bool AFGBuildableCheatFluidSpawner::CanProduce_Implementation() const{ return bool(); }
void AFGBuildableCheatFluidSpawner::SetEnabled(bool isEnabled){ }
void AFGBuildableCheatFluidSpawner::SetResourceType(TSubclassOf< UFGItemDescriptor > type){ }
void AFGBuildableCheatFluidSpawner::SetSpawnRate(float spawnRate){ }
void AFGBuildableCheatFluidSpawner::SetPressure(float pressure){ }
void AFGBuildableCheatFluidSpawner::Factory_Tick(float dt){ }
void AFGBuildableCheatFluidSpawner::Factory_TickProducing(float dt){ }
