// This file has been automatically generated by the Unreal Header Implementation tool
// Some manual edits marked with comments.

#include "Buildables/FGBuildableAttachmentMerger.h"
#include "FGFactoryConnectionComponent.h"

AFGBuildableAttachmentMerger::AFGBuildableAttachmentMerger() : Super() {
	this->mCurrentInputIndex = -1;
	this->mFactoryTickFunction.TickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.bTickEvenWhenPaused = false;
	this->mFactoryTickFunction.bCanEverTick = true;
	this->mFactoryTickFunction.bStartWithTickEnabled = true;
	this->mFactoryTickFunction.bAllowTickOnDedicatedServer = true;
	this->mFactoryTickFunction.TickInterval = 0.0;
}
void AFGBuildableAttachmentMerger::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableAttachmentMerger::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }

// Complete implementation from https://github.com/orgs/satisfactorymodding/projects/16?pane=issue&itemId=101901416
void AFGBuildableAttachmentMerger::Factory_Tick(float deltaTime) {
    FACTORY_QUICK_SCOPE_CYCLE_COUNTER(AFGBuildableAttachmentMerger_Tick);
    int BUFFER_SLOT_INDEX = 0; // https://discord.com/channels/555424930502541343/862002356626128907/1349869154139770911
    Super::Factory_Tick(deltaTime);

    if (HasAuthority()) {
        if (mBufferInventory->IsIndexEmpty(BUFFER_SLOT_INDEX)) {
            for (int32 i = 0; i < mInputs.Num(); ++i) // Try at most one full circle.
            {
                UFGFactoryConnectionComponent* connection = mInputs[mCurrentInputIndex];

                mCurrentInputIndex = (mCurrentInputIndex + 1) % mInputs.Num();

                FInventoryItem item;
                float beyondOffset;

                if (connection->Factory_GrabOutput(item, beyondOffset)) {
                    mBufferInventory->AddSingleItemToEmptyIndex_Unsafe(BUFFER_SLOT_INDEX, item);
                    break;
                }
            }
        }
    }
}
