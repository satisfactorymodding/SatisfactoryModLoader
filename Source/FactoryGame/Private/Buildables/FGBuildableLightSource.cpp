// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableLightSource.h"
#include "FGPowerInfoComponent.h"
#include "Net/UnrealNetwork.h"

void UFGLightSourceClipboardRCO::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGLightSourceClipboardRCO, mForceNetField_UFGLightSourceClipboardRCO);
}
void UFGLightSourceClipboardRCO::Server_PasteSettingsBuildableLight_Implementation( AFGBuildableLightSource* buildableLight, FLightSourceControlData lightSourceControlData){ }
void UFGLightSourceClipboardRCO::Server_PasteSettingsControlPanel_Implementation( AFGBuildableLightsControlPanel* controlPanel, FLightSourceControlData lightSourceControlData){ }
AFGBuildableLightSource::AFGBuildableLightSource() : Super() {
	this->mIsEnabled = true;
	this->mLightControlData.Intensity = 1.0;
	this->mLightControlData.IsTimeOfDayAware = false;
	this->mCurrentLightColor = FLinearColor(1.0, 1.0, 1.0, 1.0);
	this->mPowerConsumption = 1.0;
	this->mPowerInfo = CreateDefaultSubobject<UFGPowerInfoComponent>(TEXT("powerInfo"));
	this->mHasPower = false;
	this->mIsDay = false;
}
void AFGBuildableLightSource::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableLightSource, mIsEnabled);
	DOREPLIFETIME(AFGBuildableLightSource, mLightControlData);
	DOREPLIFETIME(AFGBuildableLightSource, mHasPower);
	DOREPLIFETIME(AFGBuildableLightSource, mIsDay);
}
void AFGBuildableLightSource::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableLightSource::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
bool AFGBuildableLightSource::GetPoolHandleInitialState() const{ return bool(); }
UFGFactoryClipboardSettings* AFGBuildableLightSource::CopySettings_Implementation(){ return nullptr; }
bool AFGBuildableLightSource::PasteSettings_Implementation(UFGFactoryClipboardSettings* settings){ return bool(); }
TSubclassOf<UObject> AFGBuildableLightSource::GetClipboardMappingClass_Implementation(){ return TSubclassOf<UObject>(); }
void AFGBuildableLightSource::OnBuildEffectFinished(){ }
void AFGBuildableLightSource::SetLightEnabled(bool isEnabled){ }
void AFGBuildableLightSource::SetLightControlData(FLightSourceControlData data){ }
bool AFGBuildableLightSource::IsLightEnabled() const{ return bool(); }
bool AFGBuildableLightSource::ShouldLightBeOn() const{ return bool(); }
FLightSourceControlData AFGBuildableLightSource::GetLightControlData() const{ return FLightSourceControlData(); }
void AFGBuildableLightSource::OnLightColorSlotsUpdated(const TArray< FLinearColor >& colors){ }
float AFGBuildableLightSource::GetEmissivePower(){ return float(); }
bool AFGBuildableLightSource::HasSufficientPowerConnection() const{ return bool(); }
void AFGBuildableLightSource::OnTimeOfDayChanged(bool isDay){ }
void AFGBuildableLightSource::OnHasPowerChanged( UFGPowerInfoComponent* info){ }
void AFGBuildableLightSource::OnRep_IsEnabled(){ }
void AFGBuildableLightSource::OnRep_LightControlData(){ }
void AFGBuildableLightSource::OnRep_HasPower(){ }
void AFGBuildableLightSource::OnRep_IsDay(){ }
void AFGBuildableLightSource::UpdateMeshDataAndHandles(){ }
void AFGBuildableLightSource::UpdateCurrentLightColor(){ }
void AFGBuildableLightSource::UpdatePowerConsumption(){ }
