// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableWidgetSign.h"
#include "Components/WidgetComponent.h"
#include "Components/SceneComponent.h"
#include "FGColoredInstanceMeshProxy.h"

AFGBuildableWidgetSign::AFGBuildableWidgetSign() : Super() {
	this->mWidgetComponent = CreateDefaultSubobject<UWidgetComponent>(TEXT("WidgetDisplayRoot"));
	this->mSignTypeDescriptor = nullptr;
	this->mPrefabLayout = nullptr;
	this->mGainSignificanceDistance = 1000000.0;
	this->mActivePrefabLayout = nullptr;
	this->mForegroundColor.R = 0.0;
	this->mForegroundColor.G = 0.0;
	this->mForegroundColor.B = 0.0;
	this->mForegroundColor.A = 0.0;
	this->mBackgroundColor.R = 0.0;
	this->mBackgroundColor.G = 0.0;
	this->mBackgroundColor.B = 0.0;
	this->mBackgroundColor.A = 0.0;
	this->mAuxilaryColor.R = 0.0;
	this->mAuxilaryColor.G = 0.0;
	this->mAuxilaryColor.B = 0.0;
	this->mAuxilaryColor.A = 0.0;
	this->mDataVersion = 0;
	this->mAllowColoring = false;
	this->mWidgetComponent->SetupAttachment(RootComponent);
}
void AFGBuildableWidgetSign::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGBuildableWidgetSign::BeginPlay(){ }
void AFGBuildableWidgetSign::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGBuildableWidgetSign::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableWidgetSign::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableWidgetSign::OnConstruction(const FTransform& transform){ }
AFGBuildable* AFGBuildableWidgetSign::GetBuildable_Implementation(){ return nullptr; }
TSubclassOf< UFGSignTypeDescriptor > AFGBuildableWidgetSign::GetSignTypeDescriptor_Implementation(){ return TSubclassOf<UFGSignTypeDescriptor>(); }
FVector2D AFGBuildableWidgetSign::GetSignDimensions_Implementation(){ return FVector2D(); }
void AFGBuildableWidgetSign::GainedSignificance_Implementation(){ }
void AFGBuildableWidgetSign::LostSignificance_Implementation(){ }
void AFGBuildableWidgetSign::SetPrefabSignData(FPrefabSignData& signData){ }
void AFGBuildableWidgetSign::GetSignPrefabData(FPrefabSignData& out_signData){ }
void AFGBuildableWidgetSign::UpdateSignElements(FPrefabSignData& prefabSignData){ }
void AFGBuildableWidgetSign::OnRep_SignDataDirty(){ }
