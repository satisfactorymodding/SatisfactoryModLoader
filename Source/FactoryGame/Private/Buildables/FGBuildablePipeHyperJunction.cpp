// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildablePipeHyperJunction.h"
#include "Net/UnrealNetwork.h"

TArray<TPair<UFGPipeConnectionComponentBase*, float>> AFGBuildablePipeHyperJunction::GetPossibleConnectionsToTransitionThrough(AFGCharacterPlayer* charPlayer, UFGPipeConnectionComponentBase* connectionEnteredThrough) const{ return TArray<TPair<UFGPipeConnectionComponentBase*,float>>(); }
EPipeHyperEnterResult AFGBuildablePipeHyperJunction::OnPipeEnterReal(AFGCharacterPlayer* charPlayer, UFGPipeConnectionComponentBase* connectionEnteredThrough, FFGDynamicStruct& outPipeData, const FFGDynamicStruct& predictionPipeData){ return EPipeHyperEnterResult(); }
bool AFGBuildablePipeHyperJunction::FindDistanceClosestToWorldLocation(AFGCharacterPlayer* charPlayer, const FVector& worldLocation, const FVector& velocity, FFGDynamicStruct& out_pipeData, float& out_distance) const{ return bool(); }
float AFGBuildablePipeHyperJunction::GetLengthAlongPipe(AFGCharacterPlayer* charPlayer, const FFGDynamicStruct& pipeData){ return float(); }
void AFGBuildablePipeHyperJunction::GetLocationAndRotationAlongPipe(AFGCharacterPlayer* charPlayer, const FFGDynamicStruct& pipeData, float distance, FVector& outLocation, FVector& outDirection){ }
UFGPipeConnectionComponentBase* AFGBuildablePipeHyperJunction::GetConnectionToTransitThrough(AFGCharacterPlayer* charPlayer, const FFGDynamicStruct& pipeData, float distance, float& outExitOffset){ return nullptr; }
TArray<FFGHypertubeJunctionOutputConnectionInfo> AFGBuildablePipeHyperJunction::GetAvailableOutputConnections(const UFGPipeConnectionComponentBase* connectionEnteredThrough, AFGCharacterPlayer* forPlayer) const{ return TArray<FFGHypertubeJunctionOutputConnectionInfo>(); }
UFGPipeConnectionComponentBase* AFGBuildablePipeHyperJunction::GetDefaultOutputConnection(const UFGPipeConnectionComponentBase* connectionEnteredThrough) const{ return nullptr; }
FFGDynamicStruct AFGBuildablePipeHyperJunction::PopulateOutputConnectionMetadataForPlayer(const UFGPipeConnectionComponentBase* connectionEnteredThrough, const UFGPipeConnectionComponentBase* outputConnection, AFGCharacterPlayer* forPlayer) const{ return FFGDynamicStruct(); }
