// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableJumppad.h"
#include "Components/BoxComponent.h"
#include "Components/SceneComponent.h"
#include "Components/StaticMeshComponent.h"
#include "Net/UnrealNetwork.h"

DEFINE_LOG_CATEGORY(LogJumpPad);

AFGBuildableJumppad::AFGBuildableJumppad() : Super() {
	this->mPowerBankCapacity = 0.0;
	this->mLaunchPowerCost = 0.0;
	this->mChargeRateMultiplier = 1.0;
	this->mCurrentPowerLevel = 0.0;
	this->mLaunchVelocity = 0.0;
	this->mLaunchAngle = -1.0;
	this->mPlayerChainJumpResetTime = 8.0;
	this->mHasPowerForLaunch = false;
	this->mLauncherBox = CreateDefaultSubobject<UBoxComponent>(TEXT("LauncherBox"));
	this->mLauncherMeshComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("LauncherMeshComponent"));
	this->mLauncherBox->SetupAttachment(mLauncherMeshComponent);
	this->mTrajectoryMeshScale = FVector::OneVector;
	this->mTrajectoryMeshRotation = FRotator::ZeroRotator;
	this->mDestinationMeshHeightOffset = 400.0;
	this->mDestinationMesh = nullptr;
	this->mTrajectorySplineMesh = nullptr;
	this->mNumArrows = 5;
	this->mTrajectorySplineComponent = nullptr;
	this->mDestinationMeshComponent = nullptr;
	this->mSplineComponent = nullptr;
	this->mTrajectoryGravityMultiplier = 1.0;
	this->mLauncherMeshComponent->SetupAttachment(RootComponent);
}
void AFGBuildableJumppad::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableJumppad, mLaunchAngle);
	DOREPLIFETIME(AFGBuildableJumppad, mHasPowerForLaunch);
}
FVector AFGBuildableJumppad::GetLaunchDirection() const{ return FVector(); }
void AFGBuildableJumppad::SetLaunchAngle(float Angle){ }
void AFGBuildableJumppad::SetTrajectoryVisibility(bool Visible){ }
FVector AFGBuildableJumppad::CalculateLaunchVelocity(const FVector& startLocation, const float gravity) const{ return FVector(); }
const FTrajectoryData& AFGBuildableJumppad::ResimulateTrajectory(){ return *(new FTrajectoryData); }
FTrajectoryData AFGBuildableJumppad::SimulateTrajectory(UWorld* pWorld, const FVector& StartLocation, const FVector& LaunchVector, float GravityMultiplier, AFGBuildableJumppad* pJumpPad){ return FTrajectoryData(); }
void AFGBuildableJumppad::Launch(){ }
void AFGBuildableJumppad::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableJumppad::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
float AFGBuildableJumppad::GetProductionProgress() const{ return float(); }
bool AFGBuildableJumppad::CanProduce_Implementation() const{ return bool(); }
EProductionStatus AFGBuildableJumppad::GetProductionIndicatorStatus() const{ return EProductionStatus(); }
void AFGBuildableJumppad::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableJumppad::Factory_TickProducing(float dt){ }
void AFGBuildableJumppad::OnOverlapBegin(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult){ }
void AFGBuildableJumppad::OnOverlapEnd(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex){ }
void AFGBuildableJumppad::OnRep_LaunchAngle(){ }
void AFGBuildableJumppad::GenerateSplineMesh(){ }
void AFGBuildableJumppad::DestroySplineMesh(){ }
void AFGBuildableJumppad::DestroyVisualizer(){ }
void AFGBuildableJumppad::UpdateDestinationLocation(){ }
void AFGBuildableJumppad::ConstructSplineFromTrajectoryData(){ }
