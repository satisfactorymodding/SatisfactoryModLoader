// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableRadarTower.h"

#if WITH_EDITOR
void AFGBuildableRadarTower::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent){ Super::PostEditChangeProperty(PropertyChangedEvent); }
#endif 
AFGBuildableRadarTower::AFGBuildableRadarTower() : Super() {
	this->mMinRevealRadius = 60000.0;
	this->mMaxRevealRadius = 150000.0;
	this->mNumRadarExpansionSteps = 4;
	this->mRadarExpansionInterval = 300.0;
	this->mCurrentExpansionStep = 0;
	this->mTimeToNextExpansion = 0.0;
	this->mActorRepresentationTexture = nullptr;
	this->NetUpdateFrequency = 1.0;
}
void AFGBuildableRadarTower::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
bool AFGBuildableRadarTower::AddAsRepresentation(){ return bool(); }
bool AFGBuildableRadarTower::UpdateRepresentation(){ return bool(); }
bool AFGBuildableRadarTower::RemoveAsRepresentation(){ return bool(); }
bool AFGBuildableRadarTower::IsActorStatic(){ return bool(); }
FVector AFGBuildableRadarTower::GetRealActorLocation(){ return FVector(); }
FRotator AFGBuildableRadarTower::GetRealActorRotation(){ return FRotator(); }
UTexture2D* AFGBuildableRadarTower::GetActorRepresentationTexture(){ return nullptr; }
FText AFGBuildableRadarTower::GetActorRepresentationText(){ return FText(); }
void AFGBuildableRadarTower::SetActorRepresentationText(const FText& newText){ }
FLinearColor AFGBuildableRadarTower::GetActorRepresentationColor(){ return FLinearColor(); }
void AFGBuildableRadarTower::SetActorRepresentationColor(FLinearColor newColor){ }
ERepresentationType AFGBuildableRadarTower::GetActorRepresentationType(){ return ERepresentationType(); }
bool AFGBuildableRadarTower::GetActorShouldShowInCompass(){ return bool(); }
bool AFGBuildableRadarTower::GetActorShouldShowOnMap(){ return bool(); }
EFogOfWarRevealType AFGBuildableRadarTower::GetActorFogOfWarRevealType(){ return EFogOfWarRevealType(); }
float AFGBuildableRadarTower::GetActorFogOfWarRevealRadius(){ return float(); }
ECompassViewDistance AFGBuildableRadarTower::GetActorCompassViewDistance(){ return ECompassViewDistance(); }
void AFGBuildableRadarTower::SetActorCompassViewDistance(ECompassViewDistance compassViewDistance){ }
void AFGBuildableRadarTower::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableRadarTower::Factory_StartProducing(){ }
void AFGBuildableRadarTower::Factory_StopProducing(){ }
void AFGBuildableRadarTower::Factory_TickProducing(float dt){ }
float AFGBuildableRadarTower::GetCurrentRevealRadius(){ return float(); }
float AFGBuildableRadarTower::GetNormalizedProgressValueForStep(int32 step){ return float(); }
void AFGBuildableRadarTower::OnRep_OnRadiusUpdated(){ }
float AFGBuildableRadarTower::GetRevealRadiusOnStep(int32 step){ return float(); }
bool AFGBuildableRadarTower::IsRadarExpandedToMax(){ return bool(); }
