// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableGeneratorFuel.h"
#include "FGInventoryComponent.h"
#include "Net/UnrealNetwork.h"

AFGBuildableGeneratorFuel::AFGBuildableGeneratorFuel() : Super() {
	this->mFuelLoadAmount = 1;
	this->mRequiresSupplementalResource = false;
	this->mSupplementalResourceClass = nullptr;
	this->mSupplementalToPowerRatio = 0.0;
	this->mIsFullBlast = false;
	this->mFuelInventory = CreateDefaultSubobject<UFGInventoryComponent>(TEXT("FuelInventory"));
	this->mCurrentFuelAmount = 0.0;
	this->mCurrentSupplementalAmount = 0.0;
	this->mHasFuelCached = false;
	this->mHasSupplementalCached = false;
	this->mCurrentFuelClass = nullptr;
	this->mCanChangePotential = true;
}
void AFGBuildableGeneratorFuel::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableGeneratorFuel, mAvailableFuelClasses);
	DOREPLIFETIME(AFGBuildableGeneratorFuel, mFuelClassesInInventory);
	DOREPLIFETIME(AFGBuildableGeneratorFuel, mHasFuelCached);
	DOREPLIFETIME(AFGBuildableGeneratorFuel, mHasSupplementalCached);
	DOREPLIFETIME(AFGBuildableGeneratorFuel, mCurrentFuelClass);
}
void AFGBuildableGeneratorFuel::GetConditionalReplicatedProps(TArray<FFGCondReplicatedProperty>& outProps) const{ }
void AFGBuildableGeneratorFuel::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableGeneratorFuel::PostLoad(){ Super::PostLoad(); }
void AFGBuildableGeneratorFuel::Factory_Tick(float dt){ }
bool AFGBuildableGeneratorFuel::IsValidFuel(TSubclassOf<  UFGItemDescriptor > resource) const{ return bool(); }
bool AFGBuildableGeneratorFuel::IsValidSupplementalResource(TSubclassOf<  UFGItemDescriptor > resource) const{ return bool(); }
bool AFGBuildableGeneratorFuel::HasFuel() const{ return bool(); }
bool AFGBuildableGeneratorFuel::HasSupplementalResource() const{ return bool(); }
float AFGBuildableGeneratorFuel::GetSupplementalConsumptionRateCurrent() const{ return float(); }
float AFGBuildableGeneratorFuel::GetSupplementalConsumptionRateMaximum() const{ return float(); }
float AFGBuildableGeneratorFuel::GetFuelAmount() const{ return float(); }
float AFGBuildableGeneratorFuel::GetSupplementalAmount() const{ return float(); }
void AFGBuildableGeneratorFuel::SetPendingPotential(float newPendingPotential){ }
TArray< TSubclassOf< UFGItemDescriptor > > AFGBuildableGeneratorFuel::GetAvailableFuelClasses(const UFGInventoryComponent* instigatorInventory){ return TArray<TSubclassOf<UFGItemDescriptor> >(); }
bool AFGBuildableGeneratorFuel::CanStartPowerProduction_Implementation() const{ return bool(); }
void AFGBuildableGeneratorFuel::Factory_StartPowerProduction_Implementation(){ }
void AFGBuildableGeneratorFuel::Factory_StopPowerProduction_Implementation(){ }
void AFGBuildableGeneratorFuel::Factory_TickPowerProduction_Implementation(float dt){ }
void AFGBuildableGeneratorFuel::Factory_CollectFuel(float dt){ }
void AFGBuildableGeneratorFuel::Factory_CollectSupplementalResource(float dt){ }
void AFGBuildableGeneratorFuel::LoadFuel(){ }
void AFGBuildableGeneratorFuel::LoadSupplemental(){ }
bool AFGBuildableGeneratorFuel::CanLoadFuel() const{ return bool(); }
bool AFGBuildableGeneratorFuel::CanLoadSupplemental() const{ return bool(); }
bool AFGBuildableGeneratorFuel::FilterFuelClasses(TSubclassOf< UObject > object, int32 idx) const{ return bool(); }
void AFGBuildableGeneratorFuel::UpdateInInventoryFuelTypes(const UFGInventoryComponent* instigatorInventory){ }
TArray< TSubclassOf< UFGItemDescriptor > > AFGBuildableGeneratorFuel::UpdateUnlockedFuelTypes(){ return TArray< TSubclassOf< UFGItemDescriptor > >(); }
