// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableRailroadStation.h"
#include "Net/UnrealNetwork.h"

AFGBuildableRailroadStation::AFGBuildableRailroadStation() : Super() {
	this->mShouldTeleportHere = false;
	this->mStationIdentifier = nullptr;
	this->mCurrentDockedWithRuleSet.DockingDefinition = ETrainDockingDefinition::TDD_LoadUnloadOnce;
	this->mCurrentDockedWithRuleSet.DockForDuration = 15.0;
	this->mCurrentDockedWithRuleSet.IsDurationAndRule = false;
	this->mCurrentDockedWithRuleSet.IgnoreFullLoadUnloadIfTransferBlockedByFilters = false;
	this->mDockingLocomotive = nullptr;
	this->mCurrentDockForDuration = 0.0;
	this->mActorRepresentationTexture = nullptr;
	this->mCompassMaterial = nullptr;
	this->mInteractionRegisterPlayerWithCircuit = true;
	this->mPlatformConnections.Add(mPlatformConnection0);
	this->mPlatformConnections.Add(mPlatformConnection1);
}
void AFGBuildableRailroadStation::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableRailroadStation, mStationIdentifier);
}
void AFGBuildableRailroadStation::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableRailroadStation::Destroyed(){ Super::Destroyed(); }
void AFGBuildableRailroadStation::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
bool AFGBuildableRailroadStation::CanDismantle_Implementation() const{ return bool(); }
void AFGBuildableRailroadStation::GetDismantleDisqualifiers_Implementation(TArray<TSubclassOf<UFGConstructDisqualifier>>& out_dismantleDisqualifiers, const TArray<AActor*>& allSelectedActors) const{ }
void AFGBuildableRailroadStation::Factory_Tick(float dt){ }
bool AFGBuildableRailroadStation::CanProduce_Implementation() const{ return bool(); }
EProductionStatus AFGBuildableRailroadStation::GetProductionIndicatorStatus() const{ return EProductionStatus(); }
UFGTrainPlatformConnection* AFGBuildableRailroadStation::GetStationOutputConnection(){ return nullptr; }
bool AFGBuildableRailroadStation::CanDock( AFGLocomotive* locomotive){ return bool(); }
bool AFGBuildableRailroadStation::StartDocking( AFGLocomotive* locomotive, float offset){ return bool(); }
void AFGBuildableRailroadStation::NotifyPlatformDockingComplete( AFGBuildableTrainPlatform* completedPlatform){ }
void AFGBuildableRailroadStation::CancelDockingSequence(){ }
void AFGBuildableRailroadStation::SetupRailroadTrack(){ }
void AFGBuildableRailroadStation::OnRep_StationIdentifier(){ }
bool AFGBuildableRailroadStation::DockVehiclesToPlatforms( AFGLocomotive* locomotive){ return bool(); }
void AFGBuildableRailroadStation::FinishDockingSequence(){ }
