// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableDroneStation.h"
#include "FGInventoryComponent.h"
#include "Net/UnrealNetwork.h"

DEFINE_LOG_CATEGORY(LogDroneStation);

AFGBuildableDroneStation::AFGBuildableDroneStation() : Super() {
	this->mDroneDockingStartLocationLocal = FVector::ZeroVector;
	this->mDroneDockingLocationLocal = FVector::ZeroVector;
	this->mDroneClass = nullptr;
	this->mStationHasDronesInQueue = false;
	this->mRecentlyDockedDrone = nullptr;
	this->mItemTransferringStage = EItemTransferringStage::ITS_NONE;
	this->mTransferProgress = 0.0;
	this->mTransferSpeed = 0.5;
	this->mStackTransferSize = 1.0;
	this->mDroneQueueRadius = 2000.0;
	this->mDroneQueueSeparationRadius = 0.0;
	this->mDroneQueueVerticalSeparation = 1000.0;
	this->mTripPowerCost = 0.0;
	this->mTripPowerPerMeterCost = 0.0;
	this->mTripInformationSampleCount = 3;
	this->mStationDrone = nullptr;
	this->mDockedDrone = nullptr;
	this->mStorageSizeX = 1;
	this->mStorageSizeY = 1;
	this->mFuelStorageSizeX = 1;
	this->mFuelStorageSizeY = 1;
	this->mInputInventory = CreateDefaultSubobject<UFGInventoryComponent>(TEXT("InputInventory"));
	this->mOutputInventory = CreateDefaultSubobject<UFGInventoryComponent>(TEXT("OutputInventory"));
	this->mFuelInventory = CreateDefaultSubobject<UFGInventoryComponent>(TEXT("FuelInventory"));
	this->mInfo = nullptr;
	this->mTempInfo = nullptr;
	this->mActorRepresentationTexture = nullptr;
	this->mActorRepresentationCompassMaterial = nullptr;
	this->mMapText = INVTEXT("");
}
bool AFGBuildableDroneStation::AddAsRepresentation(){ return bool(); }
bool AFGBuildableDroneStation::UpdateRepresentation(){ return bool(); }
bool AFGBuildableDroneStation::RemoveAsRepresentation(){ return bool(); }
bool AFGBuildableDroneStation::IsActorStatic(){ return bool(); }
FVector AFGBuildableDroneStation::GetRealActorLocation(){ return FVector(); }
FRotator AFGBuildableDroneStation::GetRealActorRotation(){ return FRotator(); }
UTexture2D* AFGBuildableDroneStation::GetActorRepresentationTexture(){ return nullptr; }
FText AFGBuildableDroneStation::GetActorRepresentationText(){ return FText(); }
void AFGBuildableDroneStation::SetActorRepresentationText(const FText& newText){ }
FLinearColor AFGBuildableDroneStation::GetActorRepresentationColor(){ return FLinearColor(); }
void AFGBuildableDroneStation::SetActorRepresentationColor(FLinearColor newColor){ }
ERepresentationType AFGBuildableDroneStation::GetActorRepresentationType(){ return ERepresentationType(); }
bool AFGBuildableDroneStation::GetActorShouldShowInCompass(){ return bool(); }
bool AFGBuildableDroneStation::GetActorShouldShowOnMap(){ return bool(); }
EFogOfWarRevealType AFGBuildableDroneStation::GetActorFogOfWarRevealType(){ return EFogOfWarRevealType(); }
float AFGBuildableDroneStation::GetActorFogOfWarRevealRadius(){ return float(); }
ECompassViewDistance AFGBuildableDroneStation::GetActorCompassViewDistance(){ return ECompassViewDistance(); }
void AFGBuildableDroneStation::SetActorCompassViewDistance(ECompassViewDistance compassViewDistance){ }
UMaterialInterface* AFGBuildableDroneStation::GetActorRepresentationCompassMaterial(){ return nullptr; }
void AFGBuildableDroneStation::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableDroneStation, mStationHasDronesInQueue);
	DOREPLIFETIME(AFGBuildableDroneStation, mItemTransferringStage);
	DOREPLIFETIME(AFGBuildableDroneStation, mStationDrone);
	DOREPLIFETIME(AFGBuildableDroneStation, mDockedDrone);
	DOREPLIFETIME(AFGBuildableDroneStation, mInfo);
	DOREPLIFETIME(AFGBuildableDroneStation, mMapText);
}
void AFGBuildableDroneStation::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableDroneStation::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGBuildableDroneStation::Factory_Tick(float dt){ }
void AFGBuildableDroneStation::Factory_TickProducing(float dt){ }
void AFGBuildableDroneStation::Factory_CollectInput_Implementation(){ }
void AFGBuildableDroneStation::Dismantle_Implementation(){ }
void AFGBuildableDroneStation::GetChildDismantleActors_Implementation(TArray< AActor* >& out_ChildDismantleActors) const{ }
void AFGBuildableDroneStation::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableDroneStation::StartIsLookedAtForSnapping( AFGCharacterPlayer* byCharacter, bool IsValidSnap){ }
void AFGBuildableDroneStation::StopIsLookedAtForSnapping( AFGCharacterPlayer* byCharacter){ }
void AFGBuildableDroneStation::Undock(bool Immediate){ }
int32 AFGBuildableDroneStation::RequestDocking( AFGDroneVehicle* DroneToDock){ return int32(); }
bool AFGBuildableDroneStation::IsDroneInQueue( AFGDroneVehicle* Drone) const{ return bool(); }
void AFGBuildableDroneStation::SetStationDrone( AFGDroneVehicle* Drone){ }
FVector AFGBuildableDroneStation::GetDroneDockingStartLocation() const{ return FVector(); }
FVector AFGBuildableDroneStation::GetDroneDockingLocation() const{ return FVector(); }
void AFGBuildableDroneStation::EnsureInfoCreated(){ }
void AFGBuildableDroneStation::StartDockingSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::EndDockingSequence_Implementation( AFGDroneVehicle* Drone, bool ShouldTransferItems){ }
void AFGBuildableDroneStation::StartTakeoffSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::EndTakeoffSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::PreSerializedToBlueprint(){ }
void AFGBuildableDroneStation::PostSerializedToBlueprint(){ }
void AFGBuildableDroneStation::PostSerializedFromBlueprint(bool isBlueprintWorld){ }
bool AFGBuildableDroneStation::FilterFuelClasses(TSubclassOf< UObject > object, int32 idx) const{ return bool(); }
void AFGBuildableDroneStation::OnFuelItemAdded(TSubclassOf< UFGItemDescriptor > item, const int32 amount, UFGInventoryComponent* sourceInventory){ }
void AFGBuildableDroneStation::OnRep_ItemTransferringStage(){ }
void AFGBuildableDroneStation::OnRep_StationHasDronesInQueue(){ }
void AFGBuildableDroneStation::OnRep_DroneStationInfo(){ }
void AFGBuildableDroneStation::SetItemTransferringStage(EItemTransferringStage NewStage){ }
void AFGBuildableDroneStation::BeginItemTransfer(){ }
void AFGBuildableDroneStation::EndItemTransfer(){ }
EItemTransferTickResult AFGBuildableDroneStation::ItemTransferTick( UFGInventoryComponent* FromInventory,  UFGInventoryComponent* ToInventory, bool MustTransferEverything){ return EItemTransferTickResult(); }
void AFGBuildableDroneStation::OnDroneFuelTypeChanged(const FFGDroneFuelType& newFuelType){ }
FName AFGBuildableDroneStation::sFuelTag = FName();
