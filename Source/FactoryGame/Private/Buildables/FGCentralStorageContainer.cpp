// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGCentralStorageContainer.h"
#include "Net/UnrealNetwork.h"

AFGCentralStorageContainer::AFGCentralStorageContainer() : Super() {
	this->mCentralStorageSubsystem = nullptr;
	this->mUploadTimer = 0.0;
	this->mTimeToUpload = 1.0;
	this->mCompassMaterialInstance = nullptr;
	this->bAlwaysRelevant = true;
}
bool AFGCentralStorageContainer::AddAsRepresentation(){ return bool(); }
bool AFGCentralStorageContainer::UpdateRepresentation(){ return bool(); }
bool AFGCentralStorageContainer::RemoveAsRepresentation(){ return bool(); }
bool AFGCentralStorageContainer::IsActorStatic(){ return bool(); }
FVector AFGCentralStorageContainer::GetRealActorLocation(){ return FVector(); }
FRotator AFGCentralStorageContainer::GetRealActorRotation(){ return FRotator(); }
UTexture2D* AFGCentralStorageContainer::GetActorRepresentationTexture(){ return nullptr; }
FText AFGCentralStorageContainer::GetActorRepresentationText(){ return FText(); }
void AFGCentralStorageContainer::SetActorRepresentationText(const FText& newText){ }
FLinearColor AFGCentralStorageContainer::GetActorRepresentationColor(){ return FLinearColor(); }
void AFGCentralStorageContainer::SetActorRepresentationColor(FLinearColor newColor){ }
ERepresentationType AFGCentralStorageContainer::GetActorRepresentationType(){ return ERepresentationType(); }
bool AFGCentralStorageContainer::GetActorShouldShowInCompass(){ return bool(); }
bool AFGCentralStorageContainer::GetActorShouldShowOnMap(){ return bool(); }
EFogOfWarRevealType AFGCentralStorageContainer::GetActorFogOfWarRevealType(){ return EFogOfWarRevealType(); }
float AFGCentralStorageContainer::GetActorFogOfWarRevealRadius(){ return float(); }
ECompassViewDistance AFGCentralStorageContainer::GetActorCompassViewDistance(){ return ECompassViewDistance(); }
void AFGCentralStorageContainer::SetActorCompassViewDistance(ECompassViewDistance compassViewDistance){ }
UMaterialInterface* AFGCentralStorageContainer::GetActorRepresentationCompassMaterial(){ return nullptr; }
void AFGCentralStorageContainer::BeginPlay(){ Super::BeginPlay(); }
void AFGCentralStorageContainer::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGCentralStorageContainer::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGCentralStorageContainer, mUploadTimer);
	DOREPLIFETIME(AFGCentralStorageContainer, mTimeToUpload);
}
void AFGCentralStorageContainer::Tick(float DeltaSeconds){ Super::Tick(DeltaSeconds); }
void AFGCentralStorageContainer::Factory_Tick(float dt){ }
void AFGCentralStorageContainer::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
bool AFGCentralStorageContainer::IsUploadingToCentralStorage(){ return bool(); }
float AFGCentralStorageContainer::GetCentralStorageUploadProgress() const{ return float(); }
bool AFGCentralStorageContainer::IsUploadInventoryEmpty(){ return bool(); }
void AFGCentralStorageContainer::UpdateTimeToUpload(){ }
bool AFGCentralStorageContainer::CanUploadItem(){ return bool(); }
void AFGCentralStorageContainer::TryUploadItem(){ }
