// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableFactory.h"
#include "FGInventoryComponent.h"
#include "FGPowerInfoComponent.h"
#include "Hologram/FGFactoryHologram.h"
#include "Net/UnrealNetwork.h"

AFGBuildableFactory::AFGBuildableFactory() : Super() {
	this->mPowerConsumption = 0.0;
	this->mPowerConsumptionExponent = 1.6;
	this->mProductionBoostPowerConsumptionExponent = 2.0;
	this->mDoesHaveShutdownAnimation = false;
	this->mPowerInfo = CreateDefaultSubobject<UFGPowerInfoComponent>(TEXT("powerInfo"));
	this->mMinimumProducingTime = 2.0;
	this->mMinimumStoppedTime = 5.0;
	this->mTimeSinceStartStopProducing = 0.0;
	this->mCanEverMonitorProductivity = false;
	this->mCanChangePotential = false;
	this->mCanChangeProductionBoost = false;
	this->mPendingPotential = 1.0;
	this->mPendingProductionBoost = 1.0;
	this->mMinPotential = 0.01;
	this->mMaxPotential = 1.0;
	this->mBaseProductionBoost = 1.0;
	this->mProductionShardBoostMultiplier = 1.0;
	this->mFluidStackSizeDefault = EStackSize::SS_FLUID;
	this->mFluidStackSizeMultiplier = 1;
	this->mHasInventoryPotential = true;
	this->mIsProductionPaused = false;
	this->mIsTickRateManaged = true;
	this->mInventoryPotential = CreateDefaultSubobject<UFGInventoryComponent>(TEXT("InventoryPotential"));
	this->mCurrentPotential = 1.0;
	this->mCurrentProductionBoost = 1.0;
	this->mEffectUpdateInterval = 0.0;
	this->mDefaultProductivityMeasurementDuration = 300.0;
	this->mLastProductivityMeasurementProduceDuration = 300.0;
	this->mLastProductivityMeasurementDuration = 300.0;
	this->mCurrentProductivityMeasurementProduceDuration = 0.0;
	this->mCurrentProductivityMeasurementDuration = 0.0;
	this->mCurrentProductivity = 0;
	this->mProductivityMonitorEnabled = false;
	this->mIsProducing = false;
	this->mHasPower = false;
	this->mIsOverclocked = false;
	this->mIsAlienOverclocked = false;
	this->mOverridePotentialShardSlots = false;
	this->mOverrideProductionShardSlotSize = false;
	this->mAddToSignificanceManager = true;
	this->mAlienOverClockingLayerSFXComponent = nullptr;
	this->mSignificanceRange = 18000.0;
	this->mTickExponent = 5.0;
	this->mHologramClass = AFGFactoryHologram::StaticClass();
	this->mFactoryTickFunction.TickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.bTickEvenWhenPaused = false;
	this->mFactoryTickFunction.bCanEverTick = true;
	this->mFactoryTickFunction.bStartWithTickEnabled = true;
	this->mFactoryTickFunction.bAllowTickOnDedicatedServer = true;
	this->mFactoryTickFunction.TickInterval = 0.0;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = false;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->NetDormancy = ENetDormancy::DORM_Awake;
}
void AFGBuildableFactory::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableFactory, mPropertyReplicator);
	DOREPLIFETIME(AFGBuildableFactory, mIsProductionPaused);
	DOREPLIFETIME(AFGBuildableFactory, mIsProducing);
	DOREPLIFETIME(AFGBuildableFactory, mHasPower);
	DOREPLIFETIME(AFGBuildableFactory, mIsOverclocked);
	DOREPLIFETIME(AFGBuildableFactory, mIsAlienOverclocked);
}
void AFGBuildableFactory::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableFactory::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGBuildableFactory::Tick(float dt){ Super::Tick(dt); }
void AFGBuildableFactory::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableFactory::GainedSignificance_Implementation(){ }
void AFGBuildableFactory::LostSignificance_Implementation(){ }
void AFGBuildableFactory::UpdateSignificanceTickRate_Implementation(float NewTickRate, bool bTickEnabled){ }
void AFGBuildableFactory::GainedSignificance_Native(){ }
void AFGBuildableFactory::LostSignificance_Native(){ }
void AFGBuildableFactory::SetupForSignificance(){ }
bool AFGBuildableFactory::DoesReduceTick() const{ return bool(); }
int32 AFGBuildableFactory::NumTickLevels() const{ return int32(); }
void AFGBuildableFactory::RegisterInteractingPlayer_Implementation( AFGCharacterPlayer* player){ }
void AFGBuildableFactory::UnregisterInteractingPlayer_Implementation( AFGCharacterPlayer* player){ }
void AFGBuildableFactory::GetConditionalReplicatedProps(TArray<FFGCondReplicatedProperty>& outProps) const{ }
bool AFGBuildableFactory::IsPropertyRelevantForConnection(UNetConnection* netConnection, const FProperty* property) const{ return bool(); }
void AFGBuildableFactory::Factory_Tick(float dt){ }
void AFGBuildableFactory::OnBuildEffectFinished(){ }
void AFGBuildableFactory::OnBuildEffectActorFinished(){ }
void AFGBuildableFactory::Dismantle_Implementation(){ }
TArray< UFGFactoryConnectionComponent* > AFGBuildableFactory::GetConnectionComponents() const{ return TArray<UFGFactoryConnectionComponent*>(); }
float AFGBuildableFactory::GetEmissivePower(){ return float(); }
bool AFGBuildableFactory::ShouldShowCenterGuidelinesForHologram(const AFGHologram* hologram) const{ return bool(); }
float AFGBuildableFactory::GetIdlePowerConsumption() const{ return float(); }
float AFGBuildableFactory::GetProducingPowerConsumption() const{ return float(); }
float AFGBuildableFactory::GetDefaultProducingPowerConsumption() const{ return float(); }
float AFGBuildableFactory::CalcOverclockPowerConsumption(float power, float overclock, float exponent){ return float(); }
float AFGBuildableFactory::CalcProductionBoostPowerConsumption(float power, float productionBoost, float exponent){ return float(); }
float AFGBuildableFactory::CalcProducingPowerConsumptionForPotential(float potential) const{ return float(); }
bool AFGBuildableFactory::IsConfigured() const{ return bool(); }
bool AFGBuildableFactory::CanProduce_Implementation() const{ return bool(); }
void AFGBuildableFactory::SetIsProductionPaused(bool isPaused){ }
EProductionStatus AFGBuildableFactory::GetProductionIndicatorStatus() const{ return EProductionStatus(); }
float AFGBuildableFactory::GetProductionProgress() const{ return float(); }
float AFGBuildableFactory::GetProductionCycleTime() const{ return float(); }
float AFGBuildableFactory::GetDefaultProductionCycleTime() const{ return float(); }
float AFGBuildableFactory::GetProductionCycleTimeForRecipe(TSubclassOf< UFGRecipe > recipe) const{ return float(); }
float AFGBuildableFactory::CalcProductionCycleTimeForPotential(float potential) const{ return float(); }
float AFGBuildableFactory::GetProductivity() const{ return float(); }
float AFGBuildableFactory::GetProductivityMeasurementDuration() const{ return float(); }
void AFGBuildableFactory::SetPendingPotential(float newPendingPotential){ }
float AFGBuildableFactory::GetCurrentMinPotential() const{ return float(); }
float AFGBuildableFactory::GetCurrentMaxPotential() const{ return float(); }
void AFGBuildableFactory::TryStopIdlingLoopEffects(bool didLosePower){ }
void AFGBuildableFactory::TryStartIdlingLoopEffects(bool didGainPower){ }
void AFGBuildableFactory::TryStartProductionLoopEffects(bool didStartProducing){ }
void AFGBuildableFactory::TryStopProductionLoopEffects(bool didStopProducing){ }
void AFGBuildableFactory::UpdateAnimTickOption(EVisibilityBasedAnimTickOption newOption){ }
void AFGBuildableFactory::SetPendingProductionBoost(float newPendingProductionBoost){ }
float AFGBuildableFactory::GetCurrentMaxProductionBoost() const{ return float(); }
bool AFGBuildableFactory::TryFillPotentialInventory(AFGCharacterPlayer* player, const TMap<EPowerShardType, TPair<TSubclassOf<class UFGPowerShardDescriptor>, float>>& potentialValues, TMap<EPowerShardType, float>& out_reachedPotentialValues, bool simulate){ return bool(); }
void AFGBuildableFactory::MoveOrDropInventory(UFGInventoryComponent* inventory, AFGCharacterPlayer* player){ }
void AFGBuildableFactory::FillPotentialSlotsInternal(UFGInventoryComponent* playerInventory, EPowerShardType powerShardType, TSubclassOf<UFGPowerShardDescriptor> shardItemDescriptor, int32& ref_targetAmountOfShardsInSlots, TArray<FInventoryStack>& out_itemsToDrop) const{ }
float AFGBuildableFactory::GetCurrentMaxPotentialForType(EPowerShardType powerShardType, float minValue, float maxValue, float boostPerShardMultiplier) const{ return float(); }
void AFGBuildableFactory::OnIsProducingChanged_Native(bool newIsProducing){ }
void AFGBuildableFactory::OnHasPowerChanged_Native(bool newHasPower){ }
void AFGBuildableFactory::SetCurrentPotential(float newCurrentPotential){ }
void AFGBuildableFactory::SetCurrentProductionBoost(float newProductionBoost){ }
void AFGBuildableFactory::OnCurrentProductionBoostChanged_Implementation(float newCurrentProductionBoost){ }
bool AFGBuildableFactory::Factory_HasPower() const{ return bool(); }
void AFGBuildableFactory::Factory_ProductionCycleCompleted(float overProductionRate){ }
void AFGBuildableFactory::Factory_CollectInput_Implementation(){ }
void AFGBuildableFactory::Factory_PullPipeInput_Implementation(float dt){ }
void AFGBuildableFactory::Factory_PushPipeOutput_Implementation(float dt){ }
void AFGBuildableFactory::Factory_StartProducing(){ }
void AFGBuildableFactory::Factory_TickProducing(float dt){ }
void AFGBuildableFactory::Factory_TickProductivity(float dt){ }
void AFGBuildableFactory::Factory_StopProducing(){ }
void AFGBuildableFactory::NativeUpdateEffects(float DeltaSeconds){ }
void AFGBuildableFactory::TrySpawnAlienOverClockingEffects_Implementation(const TArray<UNiagaraSystem*>& ParticlesToSpawn, const TArray<FTransform>& LocationsForParticlesToSpawn){ }
void AFGBuildableFactory::TryCleanupAlienOverClockingEffects_Implementation(){ }
void AFGBuildableFactory::GetAlienOverClockingEffectLocations(UStaticMesh* SourceMesh, FTransform SourceTransform, TArray<UNiagaraSystem*>& ParticlesToSpawn, TArray<FTransform>& LocationsForParticlesToSpawn){ }
void AFGBuildableFactory::ScheduleTaskOnMainThread(const TDelegate<void()>& inDelegate) const{ }
void AFGBuildableFactory::OnRep_CurrentPotential(){ }
void AFGBuildableFactory::OnRep_IsProductionPaused(){ }
void AFGBuildableFactory::OnRep_CurrentProductionBoost(){ }
void AFGBuildableFactory::OnRep_PendingPotential(){ }
void AFGBuildableFactory::OnRep_PendingProductionBoost(){ }
void AFGBuildableFactory::OnRep_CurrentProductivity(){ }
void AFGBuildableFactory::OnRep_IsProducing(){ }
void AFGBuildableFactory::OnRep_IsAlienOverclocked(){ }
void AFGBuildableFactory::OnPotentialInventoryItemChanged(TSubclassOf< UFGItemDescriptor > itemClass, const int32 numChanged, UFGInventoryComponent* sourceOrTargetInventory){ }
bool AFGBuildableFactory::FilterPotentialInventoryClasses(TSubclassOf< UObject > object, int32 idx) const{ return bool(); }
bool AFGBuildableFactory::IsPowerShardTypeAllowed(EPowerShardType PowerShardType) const{ return bool(); }
void AFGBuildableFactory::SetIsProducing(uint8 isProducing){ }
void AFGBuildableFactory::SetHasPower(uint8 hasPower){ }
void AFGBuildableFactory::SetCurrentProductivity(uint8 productivity){ }
void AFGBuildableFactory::SetIsAlienOverclocked(bool isAlienOverclocked){ }
void AFGBuildableFactory::SetIsOverclocked(bool isOverclocked){ }
void AFGBuildableFactory::SetProductivityMonitorEnabled(bool enabled){ }
void AFGBuildableFactory::MigratePotentialInventorySlots(UFGInventoryComponent* inventory, int32 oldSize, int32 newSize){ }
void AFGBuildableFactory::UpdateAlienOverclockingEffects(){ }
void AFGBuildableFactory::StopAlienOverclockingEffects(){ }
void AFGBuildableFactory::StartAlienOverclockingEffects(){ }
void AFGBuildableFactory::GetSlotsForPowerShardType(EPowerShardType powerShardType, TArray< int32 >& out_slotIndices) const{ }
EPowerShardType AFGBuildableFactory::GetPowerShardTypeForSlot(int32 slotIdx) const{ return EPowerShardType(); }
void AFGBuildableFactory::RecalculateProducingPowerConsumption(){ }
