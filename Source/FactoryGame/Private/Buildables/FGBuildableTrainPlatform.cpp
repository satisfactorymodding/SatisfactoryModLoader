// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableTrainPlatform.h"
#include "Components/SceneComponent.h"
#include "FGTrainPlatformConnection.h"

AFGBuildableTrainPlatform::AFGBuildableTrainPlatform() : Super() {
	this->mRailroadTrack = nullptr;
	this->mPlatformConnection0 = CreateDefaultSubobject<UFGTrainPlatformConnection>(TEXT("PlatformConnection0"));
	this->mPlatformConnections.Add(mPlatformConnection0);
	this->mPlatformConnection1 = CreateDefaultSubobject<UFGTrainPlatformConnection>(TEXT("PlatformConnection1"));
	this->mPlatformConnections.Add(mPlatformConnection1);
	this->mDockedRailroadVehicle = nullptr;
	this->mStationDockingMaster = nullptr;
	this->mIsOrientationReversed = false;
	this->mPlatformDockingStatus = ETrainPlatformDockingStatus::ETPDS_None;
	this->mSavedDockingStatus = ETrainPlatformDockingStatus::ETPDS_None;
	this->mDockWasCancelled = false;
	this->mShouldShowAttachmentPointVisuals = true;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = false;
	this->PrimaryActorTick.bStartWithTickEnabled = false;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->mPlatformConnection0->SetupAttachment(RootComponent);
	this->mPlatformConnection1->SetupAttachment(RootComponent);
}
void AFGBuildableTrainPlatform::BeginPlay(){ }
void AFGBuildableTrainPlatform::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGBuildableTrainPlatform::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableTrainPlatform::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
bool AFGBuildableTrainPlatform::CanDismantle_Implementation() const{ return bool(); }
void AFGBuildableTrainPlatform::Dismantle_Implementation(){ }
void AFGBuildableTrainPlatform::GetDismantleRefund_Implementation(TArray< FInventoryStack >& out_refund) const{ }
bool AFGBuildableTrainPlatform::IsUseable_Implementation() const{ return bool(); }
FRailroadTrackPosition AFGBuildableTrainPlatform::GetTrackPosition() const{ return FRailroadTrackPosition(); }
int32 AFGBuildableTrainPlatform::GetTrackGraphID() const{ return int32(); }
AFGBuildableTrainPlatform* AFGBuildableTrainPlatform::GetConnectedPlatformInDirectionOf(uint8 direction){ return nullptr; }
void AFGBuildableTrainPlatform::NotifyTrainDocked( AFGRailroadVehicle* railroadVehicle,  AFGBuildableRailroadStation* initiatedByStation){ }
void AFGBuildableTrainPlatform::UpdateDockingSequence(){ }
void AFGBuildableTrainPlatform::CancelDockingSequence(){ }
void AFGBuildableTrainPlatform::SetupRailroadTrack(){ }
void AFGBuildableTrainPlatform::FinishDockingSequence(){ }
void AFGBuildableTrainPlatform::OnRep_UpdateDockingStatus(){ }
void AFGBuildableTrainPlatform::ReverseConnectionDirections(){ }
void AFGBuildableTrainPlatform::AssignRailroadTrack( AFGBuildableRailroadTrack* track){ }
