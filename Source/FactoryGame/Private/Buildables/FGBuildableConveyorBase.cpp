// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableConveyorBase.h"
#include "Components/SceneComponent.h"
#include "FGFactoryConnectionComponent.h"
#include "Net/UnrealNetwork.h"

bool GIsConveyorFreezingEnabled = false;

void UFGConveyorRemoteCallObject::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGConveyorRemoteCallObject, mForceNetField_UFGConveyorRemoteCallObject);
}
void UFGConveyorRemoteCallObject::Server_OnUse_Implementation( AFGBuildableConveyorBase* target,  AFGCharacterPlayer* byCharacter, float itemOffset, uint16 desiredItemClassIdx){ }
#if !UE_BUILD_SHIPPING
void AFGBuildableConveyorBase::DebugDrawStalled() const{ }
#if !UE_BUILD_SHIPPING
void AFGBuildableConveyorBase::SetStalled(bool stall) const{ }
#endif
#endif 
#if UE_BUILD_SHIPPING
#endif 
AFGBuildableConveyorBase::AFGBuildableConveyorBase() : Super() {
	this->mSpeed = 0.0;
	this->mItems.ArrayReplicationKey = -1;
	this->mItems.ConveyorLength = 0.0;
	this->mConnection0 = CreateDefaultSubobject<UFGFactoryConnectionComponent>(TEXT("ConveyorAny0"));
	this->mConnection1 = CreateDefaultSubobject<UFGFactoryConnectionComponent>(TEXT("ConveyorAny1"));
	this->mNextConveyor = nullptr;
	this->mConveyorChainFlags = 0;
	this->mConveyorChainActor = nullptr;
	this->mChainSegmentIndex = -1;
	this->mFactoryTickFunction.TickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.bTickEvenWhenPaused = false;
	this->mFactoryTickFunction.bCanEverTick = true;
	this->mFactoryTickFunction.bStartWithTickEnabled = true;
	this->mFactoryTickFunction.bAllowTickOnDedicatedServer = true;
	this->mFactoryTickFunction.TickInterval = 0.0;
	this->mRemoveBuildableFromSubsystemOnDismantle = true;
	this->mConnection0->SetupAttachment(RootComponent);
	this->mConnection1->SetupAttachment(RootComponent);
}
void AFGBuildableConveyorBase::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableConveyorBase, mConveyorChainActor);
	DOREPLIFETIME(AFGBuildableConveyorBase, mChainSegmentIndex);
}
void AFGBuildableConveyorBase::PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker){ }
void AFGBuildableConveyorBase::BeginPlay(){ Super::BeginPlay(); }
void AFGBuildableConveyorBase::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGBuildableConveyorBase::Serialize(FArchive& ar){ Super::Serialize(ar); }
void AFGBuildableConveyorBase::Tick(float dt){ Super::Tick(dt); }
void AFGBuildableConveyorBase::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableConveyorBase::UpdateUseState_Implementation( AFGCharacterPlayer* byCharacter, const FVector& atLocation,  UPrimitiveComponent* componentHit, FUseState& out_useState){ }
void AFGBuildableConveyorBase::OnUse_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
void AFGBuildableConveyorBase::OnUseStop_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
bool AFGBuildableConveyorBase::IsUseable_Implementation() const{ return bool(); }
void AFGBuildableConveyorBase::StartIsLookedAt_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
void AFGBuildableConveyorBase::StopIsLookedAt_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
FText AFGBuildableConveyorBase::GetLookAtDecription_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state) const{ return FText(); }
bool AFGBuildableConveyorBase::ShouldBeConsideredForBase_Implementation(){ return bool(); }
void AFGBuildableConveyorBase::GetClearanceData_Implementation(TArray< FFGClearanceData >& out_data) const{ }
bool AFGBuildableConveyorBase::ShouldBlockGuidelinePathForHologram(const  AFGHologram* hologram) const{ return bool(); }
void AFGBuildableConveyorBase::Factory_Tick(float deltaTime){ }
uint8 AFGBuildableConveyorBase::MaxNumGrab(float dt) const{ return uint8(); }
uint8 AFGBuildableConveyorBase::EstimatedMaxNumGrab_Threadsafe(float estimatedDeltaTime) const{ return uint8(); }
void AFGBuildableConveyorBase::GainedSignificance_Implementation(){ }
void AFGBuildableConveyorBase::LostSignificance_Implementation(){ }
void AFGBuildableConveyorBase::GainedSignificance_Native(){ }
void AFGBuildableConveyorBase::LostSignificance_Native(){ }
void AFGBuildableConveyorBase::SetupForSignificance(){ }
void AFGBuildableConveyorBase::OnUseServerRepInput( AFGCharacterPlayer* byCharacter, float itemOffset, TSubclassOf<  UFGItemDescriptor > desiredItemClass){ }
void AFGBuildableConveyorBase::BuildStaticItemInstances(){ }
void AFGBuildableConveyorBase::DestroyStaticItemInstancesNextFrame(){ }
float AFGBuildableConveyorBase::GetDistanceBetweenFirstConnection(){ return float(); }
float AFGBuildableConveyorBase::GetDistanceBetweenLastConnection(){ return float(); }
void AFGBuildableConveyorBase::SetConveyorChainActor(AFGConveyorChainActor* chainActor){ }
void AFGBuildableConveyorBase::ReportInvalidStateAndRequestConveyorRepReset(){ }
bool AFGBuildableConveyorBase::Factory_PeekOutput_Implementation(const  UFGFactoryConnectionComponent* connection, TArray< FInventoryItem >& out_items, TSubclassOf< UFGItemDescriptor > type) const{ return bool(); }
bool AFGBuildableConveyorBase::Factory_GrabOutput_Implementation( UFGFactoryConnectionComponent* connection, FInventoryItem& out_item, float& out_OffsetBeyond, TSubclassOf< UFGItemDescriptor > type){ return bool(); }
bool AFGBuildableConveyorBase::Factory_QuickPullConveyorToConveyor(FConveyorBeltItem& out_item, float availableSpace, float deltaTime){ return bool(); }
void AFGBuildableConveyorBase::GetDismantleInventoryReturns(TArray< FInventoryStack >& out_returns) const{ }
const FConveyorBeltItem* AFGBuildableConveyorBase::FindItemClosestToLocation(const FVector& location) const{ return nullptr; }
void AFGBuildableConveyorBase::Factory_RemoveItemAt(int32 index){ }
void AFGBuildableConveyorBase::DestroyStaticItemInstances(){ }
void AFGBuildableConveyorBase::GenerateCachedClearanceData(TArray< FFGClearanceData >& out_clearanceData){ }
void AFGBuildableConveyorBase::OnRep_ChainInformation(){ }
void AFGBuildableConveyorBase::PlayPickupFX(int32 itemIndex) const{ }
void AFGBuildableConveyorBase::Factory_DequeueItem(){ }
void AFGBuildableConveyorBase::Factory_EnqueueItem(const FInventoryItem& item, float initialOffset){ }
