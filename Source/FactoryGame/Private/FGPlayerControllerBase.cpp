// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGPlayerControllerBase.h"
#include "FGCheatManager.h"
#include "Net/UnrealNetwork.h"

AFGPlayerControllerBase::AFGPlayerControllerBase() : Super() {
	this->mAdminInterface = nullptr;
	this->mReplicatedCheatManager = nullptr;
	this->CheatClass = UFGCheatManager::StaticClass();
	this->bReplicateUsingRegisteredSubObjectList = true;
}
void AFGPlayerControllerBase::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGPlayerControllerBase, mAdminInterface);
	DOREPLIFETIME(AFGPlayerControllerBase, mReplicatedCheatManager);
}
void AFGPlayerControllerBase::BeginPlay(){ Super::BeginPlay(); }
void AFGPlayerControllerBase::ClientRestart_Implementation(APawn* newPawn){ }
void AFGPlayerControllerBase::AddCheats(bool force){ }
void AFGPlayerControllerBase::OnPossess(APawn* aPawn){ Super::OnPossess(aPawn); }
void AFGPlayerControllerBase::OnUnPossess(){ Super::OnUnPossess(); }
void AFGPlayerControllerBase::SetupWwise(){  }
void AFGPlayerControllerBase::RemoveWwise(){  }
void AFGPlayerControllerBase::ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params){ Super::ClientPlayForceFeedback(ForceFeedbackEffect, Params); }
void AFGPlayerControllerBase::Client_SetupWwise_Implementation(){  }
void AFGPlayerControllerBase::SetIsUsingGamepad(bool newIsUsingGamepad){ }
void AFGPlayerControllerBase::OnControlledCharacterDied( AFGCharacterBase* character){ }
void AFGPlayerControllerBase::OnControlledCharacterRevived( AFGCharacterBase* character){ }
void AFGPlayerControllerBase::FlushPressedKeys(){ }
void AFGPlayerControllerBase::FlushMouseKeys(){ }
void AFGPlayerControllerBase::OnMouseSensitivityUpdated(FString updatedCvar){ }
void AFGPlayerControllerBase::SetMouseSensitivity(float newSense){ }
float AFGPlayerControllerBase::GetMouseSensitivity(){ return float(); }
float AFGPlayerControllerBase::GetMouseSensitivityX(){ return float(); }
float AFGPlayerControllerBase::GetMouseSensitivityY(){ return float(); }
float AFGPlayerControllerBase::GetDefaultMouseSensitivity(){ return float(); }
float AFGPlayerControllerBase::GetDefaultMouseSensitivityX(){ return float(); }
float AFGPlayerControllerBase::GetDefaultMouseSensitivityY(){ return float(); }
void AFGPlayerControllerBase::OnGamepadSpeakerEnabledUpdated(FString updatedCvar){ }
FText AFGPlayerControllerBase::GetKeyNameForAction(FName inAction, bool getGamepadKey){ return FText(); }
FText AFGPlayerControllerBase::GetKeyNameForUseAction(){ return FText(); }
FString AFGPlayerControllerBase::GetPresenceString_Implementation() const{ return FString(); }
void AFGPlayerControllerBase::Client_UpdateCappedBandwidth_Implementation(int32 cap){ }
void AFGPlayerControllerBase::Server_UpdateCappedBandwidth_Implementation(int32 cap){ }
bool AFGPlayerControllerBase::Server_UpdateCappedBandwidth_Validate(int32 cap){ return bool(); }
void AFGPlayerControllerBase::OnAdminRightsGranted(){ }
void AFGPlayerControllerBase::OnAdminRightsRevoked(){ }
void AFGPlayerControllerBase::Admin(const FString& command){ }
void AFGPlayerControllerBase::Server_Admin_Implementation(const FString& command){ }
TScriptInterface<class IFGSaveManagerInterface> AFGPlayerControllerBase::GetMostRelevantSaveManager(){ return TScriptInterface<class IFGSaveManagerInterface>(); }
TScriptInterface<class IFGSaveManagerInterface> AFGPlayerControllerBase::GetLocalSaveManager(){ return TScriptInterface<class IFGSaveManagerInterface>(); }
EInputDeviceType AFGPlayerControllerBase::GetPlayerInputDeviceType() const{ return EInputDeviceType(); }
void AFGPlayerControllerBase::DiscardInput(){ }
void AFGPlayerControllerBase::SetPlayer(UPlayer* InPlayer){ }
void AFGPlayerControllerBase::OnNetCleanup( UNetConnection* Connection){ }
void AFGPlayerControllerBase::ActiveInputDeviceChanged(EInputDeviceType deviceType){  }
void AFGPlayerControllerBase::EnablePlayerInput(bool enable){ }
void AFGPlayerControllerBase::SetCurrentServer( UFGServerObject* CurrentServer){ }
void AFGPlayerControllerBase::OnRep_ReplicatedCheatManager(){ }
void AFGPlayerControllerBase::InitDefaultCheats(){ }
int32 AFGPlayerControllerBase::GetMotionDeviceIndex(bool& SonyController){ return int32(); }
int32 AFGPlayerControllerBase::GetPS5PadDeviceIndex(){ return int32(); }
bool AFGPlayerControllerBase::GetMMDeviceFromPadHandle(int in_padHandle, IMMDevice*& io_pMmDevice){ return bool(); }
bool AFGPlayerControllerBase::IsControllerSpeakerSettingEnabled(){ return false; }
void AFGPlayerControllerBase::InitializePadSpeakers(){ }
void AFGPlayerControllerBase::InitializePadSpeakerWindows(){  }
void AFGPlayerControllerBase::InitializePadSpeakerNative(){  }
void AFGPlayerControllerBase::InitializePadType(const bool IsSonyController){  }
void AFGPlayerControllerBase::OnGamepadRumbleStrengthRequiresChange(bool enabled, float strength){  }