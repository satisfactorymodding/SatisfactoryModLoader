// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGPlayerControllerBase.h"
#include "FGCheatManager.h"

AFGPlayerControllerBase::AFGPlayerControllerBase() : Super() {
	this->mAdminInterface = nullptr;
	this->mReplicatedCheatManager = nullptr;
	this->mDisableInputComponent = nullptr;
	this->mEnableInputComponent = nullptr;
	this->mAllowedInputWhenDead.Add(TEXT("SecondaryFire"));
	this->mAllowedInputWhenDead.Add(TEXT("PauseGame"));
	this->mAllowedInputWhenDead.Add(TEXT("Chat"));
	this->CheatClass = UFGCheatManager::StaticClass();
}
void AFGPlayerControllerBase::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGPlayerControllerBase::BeginPlay(){ }
bool AFGPlayerControllerBase::ReplicateSubobjects( UActorChannel *Channel,  FOutBunch *Bunch, FReplicationFlags *RepFlags){ return bool(); }
void AFGPlayerControllerBase::ClientRestart_Implementation(APawn* newPawn){ }
void AFGPlayerControllerBase::AddCheats(bool force){ }
void AFGPlayerControllerBase::SetIsUsingGamepad(bool newIsUsingGamepad){ }
void AFGPlayerControllerBase::OnControlledCharacterDied( AFGCharacterBase* character){ }
void AFGPlayerControllerBase::OnControlledCharacterRevived( AFGCharacterBase* character){ }
void AFGPlayerControllerBase::FlushPressedKeys(){ }
bool AFGPlayerControllerBase::RebindActionKey(FFGKeyMapping newKeyMapping){ return bool(); }
void AFGPlayerControllerBase::ResetInputBindings(){ }
void AFGPlayerControllerBase::UpdatePlayerInput(){ }
void AFGPlayerControllerBase::OnGamepadInputEnabledUpdated(FString updatedCvar){ }
void AFGPlayerControllerBase::OnMouseSensitivityUpdated(FString updatedCvar){ }
void AFGPlayerControllerBase::SetMouseSensitivity(float newSense){ }
float AFGPlayerControllerBase::GetMouseSensitivity(){ return float(); }
float AFGPlayerControllerBase::GetMouseSensitivityX(){ return float(); }
float AFGPlayerControllerBase::GetMouseSensitivityY(){ return float(); }
float AFGPlayerControllerBase::GetDefaultMouseSensitivity(){ return float(); }
float AFGPlayerControllerBase::GetDefaultMouseSensitivityX(){ return float(); }
float AFGPlayerControllerBase::GetDefaultMouseSensitivityY(){ return float(); }
FText AFGPlayerControllerBase::GetKeyNameForAction(FName inAction, bool getGamepadKey){ return FText(); }
FString AFGPlayerControllerBase::GetPresenceString_Implementation() const{ return FString(); }
void AFGPlayerControllerBase::Client_UpdateCappedBandwidth_Implementation(int32 cap){ }
void AFGPlayerControllerBase::Server_UpdateCappedBandwidth_Implementation(int32 cap){ }
bool AFGPlayerControllerBase::Server_UpdateCappedBandwidth_Validate(int32 cap){ return bool(); }
void AFGPlayerControllerBase::OnAdminRightsGranted(){ }
void AFGPlayerControllerBase::OnAdminRightsRevoked(){ }
void AFGPlayerControllerBase::Admin(const FString& command){ }
void AFGPlayerControllerBase::ServerAdmin_Implementation(const FString& command){ }
bool AFGPlayerControllerBase::ServerAdmin_Validate(const FString& command){ return bool(); }
bool AFGPlayerControllerBase::ProcessConsoleExec(const TCHAR* Cmd, FOutputDevice& Ar, UObject* Executor){ return bool(); }
void AFGPlayerControllerBase::DiscardInput(){ }
void AFGPlayerControllerBase::EnablePlayerInput(bool enable){ }
void AFGPlayerControllerBase::InitDeathInput(){ }
