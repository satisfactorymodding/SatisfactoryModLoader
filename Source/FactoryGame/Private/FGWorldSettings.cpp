// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGWorldSettings.h"
#include "FactoryGameCustomVersion.h"
#include "FGMinimapCaptureActor.h"
#include "Components/SkyAtmosphereComponent.h"
#include "Engine/ExponentialHeightFog.h"
#if WITH_EDITOR
#include "LevelEditor.h"
#endif

void AFGWorldSettings::BeginDestroy() {
	Super::BeginDestroy();

#if WITH_EDITOR
	// Unregister Map Change Events
	FLevelEditorModule& LevelEditor = FModuleManager::LoadModuleChecked<FLevelEditorModule>("LevelEditor");
	LevelEditor.OnMapChanged().Remove(mOnMapChangedDelegateHandle);
	mOnMapChangedDelegateHandle.Reset();

	// Unregister Actor Spawned Event
	GetWorld()->RemoveOnActorSpawnedHandler(mActorSpawnedDelegateHandle);
	mActorSpawnedDelegateHandle.Reset();
#endif
}
void AFGWorldSettings::Serialize(FArchive& ar) {
	Super::Serialize(ar);
	ar.UsingCustomVersion(FFactoryGameCustomVersion::GUID);
	
	if (ar.IsSaveGame()) {
		return;	
	}
	if (!ar.IsSaving() && !ar.IsLoading()) {
		return;
	}
	if (ar.CustomVer(FFactoryGameCustomVersion::GUID) >= FFactoryGameCustomVersion::CachedSaveActors
		&& ar.CustomVer(FFactoryGameCustomVersion::GUID) < FFactoryGameCustomVersion::RemovedCachedSaveActors) {
		TArray<AActor*> SaveActors;
	
		const FString LevelName = GetLevel()->GetFullName();
		if (LevelName.Find(TEXT("_LOD"), ESearchCase::IgnoreCase, ESearchDir::FromEnd) == INDEX_NONE) {
			ar << SaveActors;
		}
	}
}
void AFGWorldSettings::PostLoad() {
	Super::PostLoad();
}
void AFGWorldSettings::PreInitializeComponents() {
	Super::PreInitializeComponents();

#if WITH_EDITOR
	// Register Map Change Events
	FLevelEditorModule& LevelEditor = FModuleManager::LoadModuleChecked<FLevelEditorModule>("LevelEditor");
	mOnMapChangedDelegateHandle = LevelEditor.OnMapChanged().AddUObject(this, &AFGWorldSettings::HandleMapChanged);

	// Register Actor Spawned Event
	// mActorSpawnedDelegateHandle = GetWorld()->AddOnActorSpawnedHandler(FOnActorSpawned::FDelegate::CreateUObject(this, &AFGWorldSettings::OnActorSpawned));
#endif

	/*UFGSubsystemClasses* SubsystemClasses = UFGSubsystemClasses::Get();
	SpawnSubsystem<AFGFoliageRemovalSubsystem>(mFoliageRemovalSubsystem, SubsystemClasses->mFoliageRemovalSubsystemClass, TEXT("FoliageRemovalSubsystem"));
	SpawnSubsystem<AFGAudioVolumeSubsystem>(mAudioVolumeSubsystem, AFGAudioVolumeSubsystem::StaticClass(), TEXT("AudioVolumeSubsystem"));
	SpawnSubsystem<AFGBuildableSubsystem>(mBuildableSubsystem, SubsystemClasses->mBuildableSubsystemClass, TEXT("BuildableSubsystem"));
	SpawnSubsystem<AFGPhotoModeManager>(mPhotoModeManager, SubsystemClasses->mPhotoModeManagerClass, TEXT("PhotoModeManager"));

	if (GetWorld()->WorldType != EWorldType::Editor && GetWorld()->WorldType != EWorldType::EditorPreview) {
		SpawnSubsystem<AFGConveyorItemSubsystem>(mConveyorItemSubsystem, SubsystemClasses->mConveyorItemSubsystemClass, TEXT("ConveyorItemSubsystem"));
	}*/
}
void AFGWorldSettings::NotifyBeginPlay() {
	Super::NotifyBeginPlay();

	/*if (!GetWorld()->HasBegunPlay()) {
		AFGFoliageRemovalSubsystem* FoliageRemovalSubsystem = AFGFoliageRemovalSubsystem::Get(GetWorld());
		if (FoliageRemovalSubsystem) {
			FoliageRemovalSubsystem->Init();
		}

		UFGGameUserSettings* UserSettings = UFGGameUserSettings::GetFGGameUserSettings();
		if (UserSettings) {
			UserSettings->ApplyHologramColoursToCollectionParameterInstance(GetWorld());
		}
	}*/
}
AExponentialHeightFog* AFGWorldSettings::GetExponentialHeightFog() const {
	return mExponentialHeightFog.LoadSynchronous();
}
ASkyAtmosphere* AFGWorldSettings::GetSkyAtmosphere() const {
	return mSkyAtmosphere.LoadSynchronous();
}
AFGSkySphere* AFGWorldSettings::GetSkySphere() const {
	return mSkySphere.LoadSynchronous();
}
void AFGWorldSettings::UpdateWorldBounds() {
	/*UMaterialParameterCollection* ParameterCollection = UFGEnvironmentSettings::GetWorldBoundsParameters();

	if (ParameterCollection) {
		FVector2D Min, Max;
		UFGMapFunctionLibrary::GetWorldBounds(this, Min, Max);

		UKismetMaterialLibrary::SetVectorParameterValue(this, ParameterCollection,
			UFGEnvironmentSettings::WorldBoundsMinName,
			FLinearColor(FVector(Min.X, Min.Y, 0.0f)));

		UKismetMaterialLibrary::SetVectorParameterValue(this, ParameterCollection,
			UFGEnvironmentSettings::WorldBoundsExtentName,
			FLinearColor(FVector(Max.X - Min.X, Max.Y - Min.Y, 0.0f)));
	}*/
}

#if WITH_EDITOR
void AFGWorldSettings::CheckForErrors(){ Super::CheckForErrors(); }
void AFGWorldSettings::PostEditChangeProperty( FPropertyChangedEvent& propertyChangedEvent){ Super::PostEditChangeProperty(propertyChangedEvent); }
#endif 
#if WITH_EDITOR
void AFGWorldSettings::HandleMapChanged( UWorld* newWorld, EMapChangeType mapChangeType){ }
#endif 
#if WITH_EDITORONLY_DATA
#endif 
#if WITH_EDITOR
#endif 
#if WITH_EDITORONLY_DATA
#endif 
AFGWorldSettings::AFGWorldSettings() : Super() {
	this->mDefaultHeightFogSettings.FogHeight = 5000.0;
	this->mDefaultHeightFogSettings.FogDensity = 0.02;
	this->mDefaultHeightFogSettings.FogInscatteringLuminance = FLinearColor(0.0, 0.0, 0.0, 1.0);
	this->mDefaultHeightFogSettings.FullyDirectionalInscatteringColorDistance = 100000.0;
	this->mDefaultHeightFogSettings.NonDirectionalInscatteringColorDistance = 1000.0;
	this->mDefaultHeightFogSettings.DirectionalInscatteringExponent = 4.0;
	this->mDefaultHeightFogSettings.DirectionalInscatteringStartDistance = 10000.0;
	this->mDefaultHeightFogSettings.DirectionalInscatteringLuminance = FLinearColor(0.0, 0.0, 0.0, 1.0);
	this->mDefaultHeightFogSettings.FogHeightFalloff = 0.2;
	this->mDefaultHeightFogSettings.FogMaxOpacity = 1.0;
	this->mDefaultHeightFogSettings.StartDistance = 0.0;
	this->mDefaultHeightFogSettings.FogCutoffDistance = 0.0;
	this->mDefaultHeightFogSettings.SecondFogDensity = 0.0;
	this->mDefaultHeightFogSettings.SecondFogHeightFalloff = 0.2;
	this->mDefaultHeightFogSettings.SecondFogHeightOffset = 0.0;
	this->mExponentialHeightFog = nullptr;
	this->mSkyAtmosphere = nullptr;
	this->mSkySphere = nullptr;
	this->mMinimapCaptureActor = nullptr;
	this->mTimeOfDaySubsystem = nullptr;
	this->mLevelStartedEvent = nullptr;
	this->mDefaultLoadSave = TEXT("");
	this->mStartTimeOfDay = 12.0;
	this->mBuildableSubsystem = nullptr;
	this->mLightweightBuildableSubsystem = nullptr;
	this->mAudioVolumeSubsystem = nullptr;
	this->mVoiceChatAudioMeterSubsystem = nullptr;
	this->mLocalAudioContextSubsystem = nullptr;
	this->mFoliageRemovalSubsystem = nullptr;
	this->mConveyorItemSubsystem = nullptr;
	this->mProximitySubsystem = nullptr;
	this->mAbstractInstanceManager = nullptr;
}
void AFGWorldSettings::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGWorldSettings::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGWorldSettings::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGWorldSettings::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGWorldSettings::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGWorldSettings::NeedTransform_Implementation(){ return bool(); }
bool AFGWorldSettings::ShouldSave_Implementation() const{ return bool(); }
void AFGWorldSettings::RenameTimeSubsystem(){ }
