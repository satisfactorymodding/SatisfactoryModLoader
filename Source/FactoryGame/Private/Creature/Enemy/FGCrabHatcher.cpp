// This file has been automatically generated by the Unreal Header Implementation tool

#include "Creature/Enemy/FGCrabHatcher.h"
#include "Net/UnrealNetwork.h"

AFGCrabHatcher::AFGCrabHatcher() : Super() {
	this->mBabyClass = nullptr;
	this->mBabySpawnCenterOffset = FVector(0, 0, 300);
	this->mBabySpawnExtent = FVector(100, 100, 25);
	this->mBabySpawnImpulse = FFloatInterval(150.0, 500.0);
	this->mCurrentHealth = 20.0;
}
void AFGCrabHatcher::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCrabHatcher::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCrabHatcher::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCrabHatcher::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCrabHatcher::GatherDependencies_Implementation(TArray<UObject*>& out_dependentObjects){ }
bool AFGCrabHatcher::NeedTransform_Implementation(){ return bool(); }
bool AFGCrabHatcher::ShouldSave_Implementation() const{ return bool(); }
float AFGCrabHatcher::TakeDamage(float DamageAmount, FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser){ return float(); }
void AFGCrabHatcher::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGCrabHatcher, mCurrentHealth);
}
void AFGCrabHatcher::RegisterHostilePlayer( AFGCharacterPlayer* player){ }
AFGFlyingBabyCrab* AFGCrabHatcher::SpawnBabyCrab(){ return nullptr; }
void AFGCrabHatcher::OnBabyCrabDestroyed( AActor* babyCrabActor){ }
