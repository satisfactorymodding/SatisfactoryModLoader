// This file has been automatically generated by the Unreal Header Implementation tool

#include "Narrative/FGMessage.h"

DEFINE_LOG_CATEGORY(LogNarrative);

#if WITH_EDITOR
void UFGMessage::MarkMessageAssetDirty(){ }
void UFGMessage::SaveAsset(){ }
void UFGMessage::SetSubtitles(const TArray<FMessageSubtitle>& subtitles){ }
void UFGMessage::SetMessage(FText message){ }
UFGAudioMessage* UFGMessage::GetTestAudioWidget(UUserWidget* owningWidget, int32 startOnSubtitleIndex , bool skipIncomingAnimation){ return nullptr; }
void UFGMessage::GetAllMessageAssetsData(TArray<FAssetData>& out_messageAssets, bool FilterLegacyMessages){ }
bool UFGMessage::GenerateSubtitlesForTool(const FString& locaNamespace, const FString& locaKeyRoot){ return bool(); }
bool UFGMessage::FindAudioEventForMessage(){ return bool(); }
#endif 
TArray<UFGMessage*> UFGMessage::GetAllMessageAssets(){ return TArray<UFGMessage*>(); }
bool UFGMessage::operator<(const UFGMessage& otherMessage) const{ return bool(); }
TArray<FMessageSubtitle> UFGMessage::GetSubtitles(){ return TArray<FMessageSubtitle>(); }
bool UFGMessage::DoesMessageContainPresentation() const{ return bool(); }
bool UFGMessage::IsBarkMessage() const{ return false; }
float UFGMessage::GetSharingDistance() const{ return float(); }
bool UFGMessage::IsMessageConsideredImportant() const{ return bool(); }
bool UFGMessage::AreConditionsMet(UWorld* world) const{ return bool(); }
bool UFGMessage::ArePlayerSpecificConditionssMet( AFGPlayerState* playerState) const{ return bool(); }
bool UFGMessage::AreLocalConditionsMet(UWorld* world) const{ return bool(); }
