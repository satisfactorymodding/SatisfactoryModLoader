// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGDropPod.h"
#include "Components/SceneComponent.h"
#include "FGInventoryComponent.h"
#include "FGPowerConnectionComponent.h"
#include "FGPowerInfoComponent.h"
#include "Net/UnrealNetwork.h"
#include "UObject/ObjectSaveContext.h"

#if WITH_EDITOR
void AFGDropPod::PostLoad(){ Super::PostLoad(); }
void AFGDropPod::PreEditChange(FProperty* PropertyAboutToChange){ }
void AFGDropPod::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent){ Super::PostEditChangeProperty(PropertyChangedEvent); }
#endif 
AFGDropPod::AFGDropPod() : Super() {
	this->mSignificanceRange = 15000.0;
	this->mLinkedCrashSiteDebris = nullptr;
	this->mDisplayName = INVTEXT("");
	this->mUnlockRewardClass = nullptr;
	this->mUnlockCost.CostType = EFGDropPodUnlockCostType::None;
	this->mUnlockCost.ItemCost.ItemClass = nullptr;
	this->mUnlockCost.PowerConsumption = 0.0;
	this->mDismantleBuildEffect = nullptr;
	this->mInteractWidgetClass = nullptr;
	this->mPowerConnectionComponent = CreateDefaultSubobject<UFGPowerConnectionComponent>(TEXT("PowerConnection2"));
	this->mPowerInfoComponent = CreateDefaultSubobject<UFGPowerInfoComponent>(TEXT("PowerInfo2"));
	this->mInventoryComponent = CreateDefaultSubobject<UFGInventoryComponent>(TEXT("Inventory2"));
	this->mSpawnedDebris = false;
	this->mHasBeenOpened = false;
	this->mIsDismantled = false;
	this->mHasBeenLooted = false;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = false;
	this->PrimaryActorTick.bStartWithTickEnabled = false;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->bReplicates = true;
	this->RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
	this->mPowerConnectionComponent->SetupAttachment(RootComponent);
}
void AFGDropPod::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGDropPod, mPropertyReplicator);
	DOREPLIFETIME(AFGDropPod, mHasBeenOpened);
}
void AFGDropPod::BeginPlay(){ Super::BeginPlay(); }
void AFGDropPod::EndPlay(const EEndPlayReason::Type EndPlayReason){ Super::EndPlay(EndPlayReason); }
void AFGDropPod::PreSave(FObjectPreSaveContext SaveContext){ Super::PreSave(SaveContext); }
void AFGDropPod::GainedSignificance_Implementation(){ }
void AFGDropPod::LostSignificance_Implementation(){ }
void AFGDropPod::GetConditionalReplicatedProps(TArray<FFGCondReplicatedProperty>& outProps) const{ }
bool AFGDropPod::IsPropertyRelevantForConnection(UNetConnection* netConnection, const FProperty* property) const{ return bool(); }
void AFGDropPod::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDropPod::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDropPod::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDropPod::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDropPod::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGDropPod::NeedTransform_Implementation(){ return bool(); }
bool AFGDropPod::ShouldSave_Implementation() const{ return bool(); }
void AFGDropPod::RegisterInteractingPlayer_Implementation( AFGCharacterPlayer* player){ }
void AFGDropPod::UnregisterInteractingPlayer_Implementation( AFGCharacterPlayer* player){ }
void AFGDropPod::UpdateUseState_Implementation( AFGCharacterPlayer* byCharacter, const FVector& atLocation,  UPrimitiveComponent* componentHit, FUseState& out_useState){ }
void AFGDropPod::OnUse_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
void AFGDropPod::OnUseStop_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
bool AFGDropPod::IsUseable_Implementation() const{ return bool(); }
void AFGDropPod::StartIsLookedAt_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
FText AFGDropPod::GetLookAtDecription_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state) const{ return FText(); }
void AFGDropPod::StopIsLookedAt_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
bool AFGDropPod::HasBeenLooted() const{ return bool(); }
bool AFGDropPod::GetHasPower() const{ return bool(); }
bool AFGDropPod::CanPlayerOpen(const AFGCharacterPlayer* player) const{ return bool(); }
bool AFGDropPod::OpenDropPod(AFGCharacterPlayer* player){ return bool(); }
AFGCrashSiteDebris* AFGDropPod::GetCrashSiteDebrisActor() const{ return nullptr; }
void AFGDropPod::OnInventoryItemRemoved(TSubclassOf< UFGItemDescriptor > itemClass, const int32 numRemoved, UFGInventoryComponent* targetInventory){ }
void AFGDropPod::SpawnDebrisAroundDropPod(){ }
void AFGDropPod::CacheAndDisconnectWires(){ }
void AFGDropPod::ReconnectCachedWires(){ }
void AFGDropPod::ConsumeOpenCost(AFGCharacterPlayer* player) const{ }
int32 AFGDropPod::GetNumInteractingPlayers() const{ return int32(); }
void AFGDropPod::OnRep_HasBeenOpened(){ }
