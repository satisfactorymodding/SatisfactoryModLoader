// This file has been automatically generated by the Unreal Header Implementation tool

#include "Equipment/FGBuildGunBuild.h"
#include "Net/UnrealNetwork.h"

UFGBuildGunStateBuild::UFGBuildGunStateBuild() : Super() {
	this->mMappingContextHologram = nullptr;
	this->mLastFocusedCategory = nullptr;
	this->mIsUsingPressAndReleaseAsBuildSteps = true;
	this->mPendingRecipe = nullptr;
	this->mActiveRecipe = nullptr;
	this->mLastRecipe = nullptr;
	this->mHologram = nullptr;
	this->mUpgradedActor = nullptr;
	this->mInstanceConverterInstigator = nullptr;
	this->mActiveBlueprintDescriptor = nullptr;
	this->mLastBlueprintDescriptor = nullptr;
	this->mSampledClipboardSettings = nullptr;
}
void UFGBuildGunStateBuild::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGBuildGunStateBuild, mIsUsingPressAndReleaseAsBuildSteps);
}
void UFGBuildGunStateBuild::BeginState_Implementation(){ }
void UFGBuildGunStateBuild::EndState_Implementation(){ }
void UFGBuildGunStateBuild::TickState_Implementation(float deltaTime){ }
void UFGBuildGunStateBuild::PrimaryFire_Implementation(){ }
void UFGBuildGunStateBuild::PrimaryFireRelease_Implementation(){ }
void UFGBuildGunStateBuild::SecondaryFire_Implementation(){ }
void UFGBuildGunStateBuild::Scroll_Implementation(int32 delta){ }
void UFGBuildGunStateBuild::BuildSampleRelease_Implementation(){ }
bool UFGBuildGunStateBuild::IsValidBuildingSample( AFGBuildable* buildable) const{ return bool(); }
bool UFGBuildGunStateBuild::IsValidVehicleSample( AFGVehicle* vehicle) const{ return bool(); }
void UFGBuildGunStateBuild::OnRecipeSampled_Implementation(TSubclassOf<class UFGRecipe> recipe){ }
void UFGBuildGunStateBuild::OnBuildGunModeChanged_Implementation(TSubclassOf< UFGBuildGunModeDescriptor > newMode){ }
void UFGBuildGunStateBuild::GetSupportedBuildModes_Implementation(TArray< TSubclassOf< UFGBuildGunModeDescriptor > >& out_buildModes) const{ }
TSubclassOf< UFGBuildGunModeDescriptor > UFGBuildGunStateBuild::GetInitialBuildGunMode_Implementation() const{ return TSubclassOf<UFGBuildGunModeDescriptor>(); }
float UFGBuildGunStateBuild::GetBuildGunRangeOverride_Implementation(){ return float(); }
void UFGBuildGunStateBuild::BindInputActions( UFGEnhancedInputComponent* inputComponent){ }
bool UFGBuildGunStateBuild::CanSampleBuildables() const{ return bool(); }
bool UFGBuildGunStateBuild::OnShortcutPressed(int32 shortcutIndex){ return bool(); }
void UFGBuildGunStateBuild::OnBuildableSampled_Implementation(AFGBuildable* buildable){ Super::OnBuildableSampled_Implementation(buildable); }
void UFGBuildGunStateBuild::OnVehicleSampled_Implementation(AFGVehicle* vehicle){ Super::OnVehicleSampled_Implementation(vehicle); }
void UFGBuildGunStateBuild::OnLightweightBuildableSampled_Implementation(FLightweightBuildableInstanceRef& buildableInstance){ Super::OnLightweightBuildableSampled_Implementation(buildableInstance); }
void UFGBuildGunStateBuild::SetActiveRecipe(TSubclassOf<  UFGRecipe > recipe){ }
void UFGBuildGunStateBuild::OnHoldToSnapUpdated(FString cvar){ }
void UFGBuildGunStateBuild::OnActiveInputChanged(EInputDeviceType newInputDeviceType){ }
void UFGBuildGunStateBuild::SetActiveBlueprintDescriptor(UFGBlueprintDescriptor* blueprintDesc){ }
TSubclassOf< class UFGItemDescriptor > UFGBuildGunStateBuild::GetDescriptor() const{ return TSubclassOf<class UFGItemDescriptor>(); }
TArray< FItemAmount > UFGBuildGunStateBuild::GetHologramCost() const{ return TArray<FItemAmount>(); }
AFGHologram* UFGBuildGunStateBuild::GetHologram() const{ return nullptr; }
AFGHologram* UFGBuildGunStateBuild::SpawnChildHologram(AFGHologram* parent, TSubclassOf<  UFGRecipe > recipe){ return nullptr; }
void UFGBuildGunStateBuild::Server_ConstructHologram_Implementation(FNetConstructionID clientNetConstructID, FConstructHologramMessage data){ }
void UFGBuildGunStateBuild::InternalConstructHologram(FNetConstructionID clientNetConstructID){ }
void UFGBuildGunStateBuild::Server_ChangeGuideLinesSnapMode_Implementation(bool enabled){ }
void UFGBuildGunStateBuild::ChangeGuidelineSnapMode(bool enabled){ }
void UFGBuildGunStateBuild::Server_ToggleHologramPositionLock_Implementation(){ }
void UFGBuildGunStateBuild::ToggleHologramPositionLock(){ }
TSubclassOf<class UFGHologramBuildModeDescriptor> UFGBuildGunStateBuild::GetLastBuildModeForCategory(uint8 category, TSubclassOf<  AActor > actorClass) const{ return TSubclassOf<class UFGHologramBuildModeDescriptor>(); }
void UFGBuildGunStateBuild::OnZoopUpdated_Implementation(float currentZoop, float maxZoop, const FVector& zoopLocation){ }
void UFGBuildGunStateBuild::OnHologramLockStateChanged( AFGHologram* hologram, bool isLocked){ }
void UFGBuildGunStateBuild::OnHologramNudgeOffsetChanged( AFGHologram* hologram, const FVector& newOffset){ }
void UFGBuildGunStateBuild::HookUpUserSettings(){ }
void UFGBuildGunStateBuild::OnClearanceDetectorAdded(UBoxComponent* clearanceDetector){ }
void UFGBuildGunStateBuild::OnDelayedConstructHologram(FNetConstructionID localId, FConstructHologramMessage message){ }
UPackageMap* UFGBuildGunStateBuild::FindPackageMapForPlayerController(const APlayerController* playerController){ return nullptr; }
const FActorClearanceData* UFGBuildGunStateBuild::GetClearanceDataForActor(const AActor* actor) const{ return nullptr; }
void UFGBuildGunStateBuild::Server_SampleClipboardSettingsFromActor_Implementation(AActor* actor){ }
void UFGBuildGunStateBuild::SampleClipboardSettingsFromActor(AActor* actor){ }
void UFGBuildGunStateBuild::InternalExecuteDuBuildStepInput(bool isInputFromARelease){ }
void UFGBuildGunStateBuild::ResetHologram(){ }
void UFGBuildGunStateBuild::Server_ResetHologram_Implementation(){ }
void UFGBuildGunStateBuild::Client_OnBuildableConstructed_Implementation(TSubclassOf< UFGItemDescriptor > desc){ }
void UFGBuildGunStateBuild::Client_OnRecipeBuilt_Implementation(TSubclassOf<  UFGRecipe > recipe, int32 numConstructed){ }
void UFGBuildGunStateBuild::Client_OnBlueprintConstructed_Implementation(const FString& blueprintName, int32 numConstructed){ }
void UFGBuildGunStateBuild::Client_OnBuildableFailedConstruction_Implementation(FNetConstructionID netConstructionID){ }
void UFGBuildGunStateBuild::SpawnHologram(){ }
void UFGBuildGunStateBuild::RemoveHologram( AFGHologram*& hologram, bool cleanupClearanceDetection){ }
void UFGBuildGunStateBuild::CleanupHologramClearanceDetection(){ }
AFGHologram* UFGBuildGunStateBuild::InternalSpawnHologram(){ return nullptr; }
void UFGBuildGunStateBuild::ApplyPlayerRelativeRotation(AFGHologram* hologram, int32 minRotationMode){ }
void UFGBuildGunStateBuild::BeginClearanceDetectorOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult & SweepResult){ }
void UFGBuildGunStateBuild::EndClearanceDetectorOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex){ }
void UFGBuildGunStateBuild::OnUserSettingsUpdated(){ }
void UFGBuildGunStateBuild::Server_SetUseAutomaticClearanceSnapping_Implementation(bool useAutomaticSnapping){ }
void UFGBuildGunStateBuild::Server_UpdateNudgeOffset_Implementation(const FVector& newNudgeOffset){ }
void UFGBuildGunStateBuild::NudgeTimerTick(){ }
void UFGBuildGunStateBuild::NudgeOnce(const FVector& nudgeVector){ }
void UFGBuildGunStateBuild::Server_SetSampledCustomizationData_Implementation(const FFactoryCustomizationData& customizationData){ }
void UFGBuildGunStateBuild::SetSampledCustomizationData(const FFactoryCustomizationData& customizationData){ }
void UFGBuildGunStateBuild::Input_HologramLock(const FInputActionValue& actionValue){ }
void UFGBuildGunStateBuild::Input_HologramNudgeAxis(const FInputActionValue& actionValue){ }
void UFGBuildGunStateBuild::Input_SnapToGuideLines(const FInputActionValue& actionValue){ }
void UFGBuildGunStateBuild::Input_HotbarSample(const FInputActionValue& actionValue){ }
void UFGBuildGunStateBuild::HandleBuildableAchievementTags(const AFGBuildable* buildable) const{ }
void UFGBuildGunStateBuild::SetUpgradeActorHidden(bool hidden) const{ }
void UFGBuildGunStateBuild::UpdateClearanceData(){ }
