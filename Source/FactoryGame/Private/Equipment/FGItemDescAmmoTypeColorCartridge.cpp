// This file has been automatically generated by the Unreal Header Implementation tool

#include "Equipment/FGItemDescAmmoTypeColorCartridge.h"

UFGItemDescAmmoTypeColorCartridge::UFGItemDescAmmoTypeColorCartridge() : Super() {
	this->mRedundantTargetCrosshairColor.R = 0.5;
	this->mRedundantTargetCrosshairColor.G = 0.2;
	this->mRedundantTargetCrosshairColor.B = 0.2;
	this->mRedundantTargetCrosshairColor.A = 0.7;
	this->mRedundantTargetCrosshairTexture = nullptr;
	this->mNoTargetCrosshairColor.R = 0.4;
	this->mNoTargetCrosshairColor.G = 0.1;
	this->mNoTargetCrosshairColor.B = 0.1;
	this->mNoTargetCrosshairColor.A = 0.4;
	this->mNoTargetCrosshairTexture = nullptr;
	this->mNonColorableTargetCrosshairColor.R = 0.1;
	this->mNonColorableTargetCrosshairColor.G = 0.05;
	this->mNonColorableTargetCrosshairColor.B = 0.05;
	this->mNonColorableTargetCrosshairColor.A = 0.92;
	this->mNonColorableTargetCrosshairTexture = nullptr;
	this->mValidTargetCrosshairTexture = nullptr;
	this->mColorSlot = 1;
	this->mCurrentColorTarget = nullptr;
	this->mCharOwner = nullptr;
}
void UFGItemDescAmmoTypeColorCartridge::BeginDestroy(){ Super::BeginDestroy(); }
void UFGItemDescAmmoTypeColorCartridge::Tick(float DeltaTime){ }
TStatId UFGItemDescAmmoTypeColorCartridge::GetStatId() const{ return TStatId(); }
void UFGItemDescAmmoTypeColorCartridge::InitializeAmmoType_Implementation(AFGWeapon* Weapon){ }
void UFGItemDescAmmoTypeColorCartridge::FireAmmunition_Implementation(){ }
void UFGItemDescAmmoTypeColorCartridge::SetColorSlot(uint8 slotIndex){ }
void UFGItemDescAmmoTypeColorCartridge::Server_SetColorSlot_Implementation(uint8 slotIndex){ }
bool UFGItemDescAmmoTypeColorCartridge::Server_SetColorSlot_Validate(uint8 slotIndex){ return bool(); }
uint8 UFGItemDescAmmoTypeColorCartridge::GetMaxNumColorSlots(){ return uint8(); }
uint8 UFGItemDescAmmoTypeColorCartridge::GetNumColorSlotsExposedToPlayers() const{ return uint8(); }
FFactoryCustomizationColorSlot UFGItemDescAmmoTypeColorCartridge::GetColorDataForSlot(uint8 slotIndex){ return FFactoryCustomizationColorSlot(); }
void UFGItemDescAmmoTypeColorCartridge::SetColorDataForSlot(uint8 slotIndex, FFactoryCustomizationColorSlot colorData){ }
void UFGItemDescAmmoTypeColorCartridge::Server_SetColorDataForSlot_Implementation(uint8 slotIndex, FFactoryCustomizationColorSlot colorData){ }
void UFGItemDescAmmoTypeColorCartridge::SetPrimaryColorForSlot(uint8 slotIndex, FLinearColor newColor){ }
void UFGItemDescAmmoTypeColorCartridge::Server_SetPrimaryColorForSlot_Implementation(uint8 slotIndex, FLinearColor newColor){ }
bool UFGItemDescAmmoTypeColorCartridge::Server_SetPrimaryColorForSlot_Validate(uint8 slotIndex, FLinearColor newColor){ return bool(); }
void UFGItemDescAmmoTypeColorCartridge::SetSecondaryColorForSlot(uint8 slotIndex, FLinearColor newColor){ }
void UFGItemDescAmmoTypeColorCartridge::Server_SetSecondaryColorForSlot_Implementation(uint8 slotIndex, FLinearColor newColor){ }
bool UFGItemDescAmmoTypeColorCartridge::Server_SetSecondaryColorForSlot_Validate(uint8 slotIndex, FLinearColor newColor){ return bool(); }
FLinearColor UFGItemDescAmmoTypeColorCartridge::GetPrimaryColorForSlot(uint8 index) const{ return FLinearColor(); }
FLinearColor UFGItemDescAmmoTypeColorCartridge::GetSecondaryColorForSlot(uint8 index) const{ return FLinearColor(); }
void UFGItemDescAmmoTypeColorCartridge::ApplyCrosshairState() const{ }
EFGColorGunTargetType UFGItemDescAmmoTypeColorCartridge::FindIfValidColorTarget(){ return EFGColorGunTargetType(); }
void UFGItemDescAmmoTypeColorCartridge::ProcessInstantHit_Confirmed(const FHitResult& hitResult){ }
void UFGItemDescAmmoTypeColorCartridge::OnSecondaryFirePressed(){ }
