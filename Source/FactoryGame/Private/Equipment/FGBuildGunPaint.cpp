// This file has been automatically generated by the Unreal Header Implementation tool

#include "Equipment/FGBuildGunPaint.h"

UFGBuildGunStatePaint::UFGBuildGunStatePaint() : Super() {
	this->mHoverProxyMaterial = nullptr;
	this->mInvisibleMaterialDescriptor = nullptr;
	this->mActiveColorSlot = 0;
	this->mCurrentCustomizeClassFilter = nullptr;
	this->mActiveRecipe = nullptr;
	this->mActiveColorSwatch = nullptr;
	this->mActivePatternDesc = nullptr;
	this->mActiveMaterialDesc = nullptr;
	this->mActiveSkinDesc = nullptr;
	this->mPatternRotation = 0;
	this->mCurrentCustomizationTarget = nullptr;
	this->mCurrentlyAimedAtActor = nullptr;
	this->mLastAppliedActor = nullptr;
	this->mPreviewActor = nullptr;
	this->mInstanceConverterInstigator = nullptr;
}
void UFGBuildGunStatePaint::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);

}
void UFGBuildGunStatePaint::BeginState_Implementation(){ }
void UFGBuildGunStatePaint::EndState_Implementation(){ }
void UFGBuildGunStatePaint::TickState_Implementation(float deltaTime){ }
void UFGBuildGunStatePaint::PrimaryFire_Implementation(){ }
void UFGBuildGunStatePaint::PrimaryFireRelease_Implementation(){ }
void UFGBuildGunStatePaint::SecondaryFire_Implementation(){ }
void UFGBuildGunStatePaint::Scroll_Implementation(int32 delta){ }
void UFGBuildGunStatePaint::BindInputActions( UFGEnhancedInputComponent* inputComponent){ }
bool UFGBuildGunStatePaint::CanSampleCustomizations() const{ return bool(); }
void UFGBuildGunStatePaint::CreateStencilProxy(AActor* selected){ }
void UFGBuildGunStatePaint::DestroyStencilProxies(bool destroyComponents){ }
void UFGBuildGunStatePaint::Server_ExecutePrimaryFire_Implementation(){ }
void UFGBuildGunStatePaint::Server_ExecutePaint_Implementation(uint8 mode, FFactoryCustomizationData customizationData, AActor* hitActor){ }
void UFGBuildGunStatePaint::Server_SetActiveRecipe_Implementation(TSubclassOf<UFGCustomizationRecipe> customizationRecipe){ }
void UFGBuildGunStatePaint::Server_SetCustomizeClassFilter_Implementation(TSubclassOf<AActor> actorToFilter){ }
void UFGBuildGunStatePaint::SetActiveCustomization(TSubclassOf< UFGFactoryCustomizationDescriptor > customizationDesc){ }
void UFGBuildGunStatePaint::SetActiveSwatchDesc(TSubclassOf< UFGFactoryCustomizationDescriptor_Swatch > swatchDesc){ }
void UFGBuildGunStatePaint::SetActivePatternDesc(TSubclassOf< UFGFactoryCustomizationDescriptor_Pattern > patternDesc){ }
void UFGBuildGunStatePaint::SetActiveMaterialDesc(TSubclassOf< UFGFactoryCustomizationDescriptor_Material > materialDesc){ }
void UFGBuildGunStatePaint::SetActiveSkinDesc(TSubclassOf< UFGFactoryCustomizationDescriptor_Skin > skinDesc){ }
void UFGBuildGunStatePaint::RemoveCustomization(TSubclassOf< UFGFactoryCustomizationDescriptor > customization){ }
void UFGBuildGunStatePaint::ClearAllCustomizations(){ }
void UFGBuildGunStatePaint::SetActiveRecipe(TSubclassOf< UFGCustomizationRecipe > customizationRecipe){ }
void UFGBuildGunStatePaint::SetCustomizeClassFilter(AActor* actorToFilter){ }
void UFGBuildGunStatePaint::SetCustomizeClassFilter_Internal(TSubclassOf<AActor> actorClass, TSubclassOf<UFGItemDescriptor> itemDesc){ }
bool UFGBuildGunStatePaint::IsCustomizationActive(TSubclassOf< UFGFactoryCustomizationDescriptor > customization){ return bool(); }
bool UFGBuildGunStatePaint::IsRecipeActive(TSubclassOf<  UFGCustomizationRecipe > inClass){ return bool(); }
TArray< FItemAmount > UFGBuildGunStatePaint::GetCustomizationCost() const{ return TArray<FItemAmount>(); }
void UFGBuildGunStatePaint::SpawnPreviewActor(AFGBuildable* aimedAtBuildable, TSubclassOf< UFGRecipe > recipe, TSubclassOf< UFGFactoryCustomizationDescriptor_Material >& targetMaterialDesc){ }
void UFGBuildGunStatePaint::SpawnPreviewForMaterial(AFGBuildable* aimedAtBuildable, TSubclassOf< UFGFactoryCustomizationDescriptor_Material >& targetMaterialDesc){ }
USceneComponent* UFGBuildGunStatePaint::SetupComponent(USceneComponent* attachParent, UActorComponent* componentTemplate, const FName& componentName, const FName& attachSocketName){ return nullptr; }
void UFGBuildGunStatePaint::Input_SelectBuildingForCustomizeFilter(const FInputActionValue& actionValue){ }
void UFGBuildGunStatePaint::ValidateCost(){ }
void UFGBuildGunStatePaint::AddConstructDisqualifier(TSubclassOf<  UFGConstructDisqualifier > disqualifier){ }
uint8 UFGBuildGunStatePaint::AlignPatternRotationWithActor(const AActor* actor, uint8 currentPatternRotation) const{ return uint8(); }
