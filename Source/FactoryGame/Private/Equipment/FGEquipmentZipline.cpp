// This file has been automatically generated by the Unreal Header Implementation tool

#include "Equipment/FGEquipmentZipline.h"
#include "Equipment/FGEquipment.h"
#include "Net/UnrealNetwork.h"

AFGEquipmentZipline::AFGEquipmentZipline() : Super() {
	this->mWantToGrab = false;
	this->mZiplineParticle = nullptr;
	this->mZiplineJumpLaunchVelocity = 600.0;
	this->mMaxZiplineAngle = 0.95;
	this->mTraceDistance = 500.0;
	this->mTraceStartOffset = 300.0;
	this->mTraceRadius = 70.0;
	this->mVisualizeTraceDistance = false;
	this->mActiveNoise = nullptr;
	this->mActiveNoiseFrequency = 0.2;
	this->mZiplineReattachCooldown = 1.0;
	this->mEquipmentSlot = EEquipmentSlot::ES_ARMS;
	this->mDefaultEquipmentActions = 3;
}
void AFGEquipmentZipline::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGEquipmentZipline, mWantToGrab);
}
void AFGEquipmentZipline::Tick(float delta){ Super::Tick(delta); }
void AFGEquipmentZipline::AddEquipmentActionBindings(){ }
void AFGEquipmentZipline::UnEquip(){ }
void AFGEquipmentZipline::DoDrop(){ }
void AFGEquipmentZipline::JumpExit(){ }
void AFGEquipmentZipline::TryToGrab(){ }
bool AFGEquipmentZipline::CanGrab(AActor* attachActor, const FVector& point1, const FVector& point2) const{ return bool(); }
void AFGEquipmentZipline::HandleDefaultEquipmentActionEvent(EDefaultEquipmentAction action, EDefaultEquipmentActionEvent actionEvent){ }
void AFGEquipmentZipline::Input_Crouch(const FInputActionValue& actionValue){ }
void AFGEquipmentZipline::Input_Jump(const FInputActionValue& actionValue){ }
void AFGEquipmentZipline::PlayZiplineEffects_Implementation(const FVector &inLocation){ }
void AFGEquipmentZipline::ZiplineStart(AActor* ziplineActor, const FVector& point1, const FVector& point2, const FVector& actorForward){ }
void AFGEquipmentZipline::Local_ZiplineStart(AActor* ziplineActor, const FVector& point1, const FVector& point2, const FVector& actorForward){ }
void AFGEquipmentZipline::ZiplineEnd(const FVector& exitForce){ }
void AFGEquipmentZipline::Local_ZiplineEnd(const FVector& exitForce){ }
void AFGEquipmentZipline::StartActiveNoise(){ }
void AFGEquipmentZipline::StopActiveNoise(){ }
void AFGEquipmentZipline::MakeActiveNoise(){ }
void AFGEquipmentZipline::Multicast_ZiplineStart_Implementation(AActor* ziplineActor, const FVector& point1, const FVector& point2, const FVector& actorForward){ }
void AFGEquipmentZipline::Multicast_ZiplineEnd_Implementation(FVector exitForce){ }
void AFGEquipmentZipline::Server_DoDrop_Implementation(){ }
void AFGEquipmentZipline::Server_JumpExit_Implementation(){ }
void AFGEquipmentZipline::SetWantsToGrab(bool wantsToGrab, bool jumpExit){ }
void AFGEquipmentZipline::OnRep_WantToGrab(){ }
