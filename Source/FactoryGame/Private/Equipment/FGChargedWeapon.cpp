// This file has been automatically generated by the Unreal Header Implementation tool

#include "Equipment/FGChargedWeapon.h"
#include "Net/UnrealNetwork.h"

AFGChargedWeapon::AFGChargedWeapon() : Super() {
	this->bHasDispensedProjectiles = false;
	this->mMaxChargeTime = 0.0;
	this->mReleaseCooldown = 0.0;
	this->mDelayBetweenSecondaryTriggers = 0.25;
	this->mAutoReloadDelay = 1.0;
	this->mDefaultEquipmentActions = 3;
}
void AFGChargedWeapon::Multicast_BeginPrimaryFire_Implementation(){ }
void AFGChargedWeapon::EndPrimaryFire(){ }
void AFGChargedWeapon::Equip( AFGCharacterPlayer* character){ }
void AFGChargedWeapon::UnEquip(){ }
float AFGChargedWeapon::GetChargePct() const{ return float(); }
bool AFGChargedWeapon::HasDispensedProjectiles() const{ return false; }
void AFGChargedWeapon::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGChargedWeapon, bHasDispensedProjectiles);
}
void AFGChargedWeapon::SpawnChargedProjectile(FTransform spawnTransform, int32 throwForce){ }
void AFGChargedWeapon::Server_SpawnChargedProjectile_Implementation(FTransform spawnTransform, int32 throwForce){ }
bool AFGChargedWeapon::Server_SpawnChargedProjectile_Validate(FTransform spawnTransform, int32 throwForce){ return bool(); }
void AFGChargedWeapon::StartChargedProjectileSecondary(){ }
void AFGChargedWeapon::Server_StartChargedProjectileSecondary_Implementation(){ }
void AFGChargedWeapon::OnPrimaryFireStarted_Implementation(){ }
void AFGChargedWeapon::OnPrimaryFireEnded_Implementation(){ }
void AFGChargedWeapon::ExecutePrimaryFire(FVector spawnLocation){ }
void AFGChargedWeapon::Multicast_ResetPressTimestamp_Implementation(){ }
void AFGChargedWeapon::Multicast_SecondaryFirePressed_Implementation(){ }
void AFGChargedWeapon::OnSecondaryFirePressed_Implementation(){ }
void AFGChargedWeapon::ExecuteSecondaryFire(){ }
void AFGChargedWeapon::Server_ExecuteSecondaryFire_Implementation(){ }
void AFGChargedWeapon::HandleDefaultEquipmentActionEvent(EDefaultEquipmentAction action, EDefaultEquipmentActionEvent actionEvent){ }
bool AFGChargedWeapon::IsEquipmentMontageTagAllowed_Implementation(FName montageTag) const{ return bool(); }
void AFGChargedWeapon::AddEquipmentActionBindings(){ Super::AddEquipmentActionBindings(); }
void AFGChargedWeapon::Input_Detonate(const FInputActionValue& actionValue){ }
void AFGChargedWeapon::UpdateDispersion(float DeltaSeconds){ }
void AFGChargedWeapon::OnAmmoFired(AActor* SpawnedActor){ }
