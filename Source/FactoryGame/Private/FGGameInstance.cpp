// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGGameInstance.h"

TAutoConsoleVariable<bool> CVarForceMouseAndKeyboardDeviceType(TEXT("CVarForceMouseAndKeyboardDeviceType"), false, TEXT(""));
TAutoConsoleVariable<bool> CVarForceGamepadDeviceType(TEXT("CVarForceGamepadDeviceType"), false, TEXT(""));
void FOnJoinSessionData::SetState(EJoinSessionState newState, FOnJoinSessionStateChanged& onStateChangedDelegate){ }
#if WITH_EDITOR
FGameInstancePIEResult UFGGameInstance::InitializeForPlayInEditor(int32 PIEInstanceIndex, const FGameInstancePIEParameters& Params){ return FGameInstancePIEResult::Success(); }
#endif 
#if WITH_EDITOR
#endif 
void UFGGameInstance::Init(){ }
void UFGGameInstance::StartGameInstance(){ }
bool UFGGameInstance::JoinSession(ULocalPlayer* localPlayer, const FOnlineSessionSearchResult& searchResult){ return bool(); }
void UFGGameInstance::ReceivedNetworkEncryptionAck(const FOnEncryptionKeyResponse& Delegate){ }
void UFGGameInstance::ReceivedNetworkEncryptionToken(const FString& EncryptionToken, const FOnEncryptionKeyResponse& Delegate){ }
EEncryptionFailureAction UFGGameInstance::ReceivedNetworkEncryptionFailure(UNetConnection* Connection){ return EEncryptionFailureAction(); }
TSubclassOf<UOnlineSession> UFGGameInstance::GetOnlineSessionClass(){ return TSubclassOf<UOnlineSession>(); }
UDSTelemetry* UFGGameInstance::GetTelemetryInstanceFromWorld(UWorld* world){ return nullptr; }
void UFGGameInstance::PushError(TSubclassOf<class UFGErrorMessage> errorMessage){ }
void UFGGameInstance::PushError(UObject* worldContext, TSubclassOf<class UFGErrorMessage> errorMessage){ }
UFGErrorMessage* UFGGameInstance::GetNextError(){ return nullptr; }
UFGErrorMessage* UFGGameInstance::GetNextError(UObject* worldContext){ return nullptr; }
UFGErrorMessage* UFGGameInstance::PeekNextError() const{ return nullptr; }
UFGErrorMessage* UFGGameInstance::PeekNextError(UObject* worldContext){ return nullptr; }
void UFGGameInstance::SetHasSeenAlphaInfoScreen(){ }
bool UFGGameInstance::ShouldShowAlphaInfoScreen() const{ return bool(); }
bool UFGGameInstance::FindModPackages(){ return bool(); }
void UFGGameInstance::GetFGUGC(UClass* WeaponClass, UClass* EnemyClass, UClass* BossClass, UClass *PlayerPawnClass){ }
void UFGGameInstance::Shutdown(){ }
bool UFGGameInstance::GetLatestNetworkError(FFGGameNetworkErrorMsg& msg){ return bool(); }
bool UFGGameInstance::PopLatestNetworkError(){ return bool(); }
EJoinSessionState UFGGameInstance::GetCurrentJoinSessionState() const{ return EJoinSessionState(); }
UFGDebugOverlayWidget* UFGGameInstance::GetDebugOverlayWidget(){ return nullptr; }
IFGDedicatedServerInterface* UFGGameInstance::GetDedicatedServerInterface() const{ return nullptr; }
void UFGGameInstance::SetPendingConnectionEncryptionData(const FFGPendingConnectionEncryptionData& NewEncryptionData){ }
EInputDeviceType UFGGameInstance::GetActiveInputDeviceType() const{ return EInputDeviceType(); }
void UFGGameInstance::LoadComplete(const float loadTime, const FString& mapName){ }
void UFGGameInstance::OnDestroyOldSessionComplete_JoinSession(FName gameSessionName, bool wasSuccessful){ }
void UFGGameInstance::OnQueryFriendProductIdCompleted_JoinSession(bool wasSuccessful, FString EpicId,  EOS_ProductUserIdDetails* ProductId){ }
void UFGGameInstance::PollHostProductUserId_JoinSession(){ }
void UFGGameInstance::OnJoinSessionComplete(FName sessionName, EOnJoinSessionCompleteResult::Type joinResult){ }
void UFGGameInstance::SendRecievedNetworkErrorOnDelegate(UWorld* world, UNetDriver* driver, ENetworkFailure::Type errorType, const FString& errorMsg){ }
void UFGGameInstance::SwitchActiveInput(EInputDeviceType deviceType){  }
void UFGGameInstance::OnLastInputDeviceTypeChanged(EInputDeviceType deviceType){ }
void UFGGameInstance::PreloadAssetsForGameInstance(){  }
void UFGGameInstance::OnPackagePreloaded(const FName& PackageName, UPackage* LoadedPackage, EAsyncLoadingResult::Type Result, TArray<FSoftObjectPath> AssetsInPackage){  }
void UFGGameInstance::GatherDefaultAssetsForPreload(TArray<FSoftObjectPath>& OutAssetsToPreload){  }
class UCommonUserSubsystem* UFGGameInstance::GetCommonUserSubsystem() const{ return nullptr; }
const UTexture* UFGGameInstance::GetCachedAvatarTexture(const FString& avatarURL){ return nullptr; }
void UFGGameInstance::AddAvatarToTextureCache(const FString& avatarURL, UTexture* texture){  }
void UFGGameInstance::AddAndCallDeviceTypeChangedCallback(FFGInputDeviceTypeChangedDelegate Delegate){ }
void UFGGameInstance::OnPreLoadMap(const FString& levelName){ }
void UFGGameInstance::InitGameAnalytics(){ }
void UFGGameInstance::ShutdownGameAnalytics(){ }
bool UFGGameInstance::InitTelemetry(const FString& gameID, const FString& buildID, const FString& onlinePlatformIdentifier, const FString& onlinePlatformUserID){ return bool(); }
void UFGGameInstance::ShutdownTelemetry(){ }
void UFGGameInstance::SubmitGameStartTelemetry() const{ }
void UFGGameInstance::SubmitNetModeTelemetry(UWorld* world) const{ }
void UFGGameInstance::SubmitModTelemetry() const{ }
void UFGGameInstance::JoinSession_Internal(){ }
void UFGGameInstance::SetInputDeviceMode(EInputDeviceMode InputDeviceMode, bool bForce){  }
bool UFGGameInstance::GetConsoleVariableBool(const char* Variable){ return bool(); }
void UFGGameInstance::SetConsoleVariable(const char* Variable, bool Active){ }
void UFGGameInstance::UpdateStringTableVariants(bool UsingGamepad){  }
UFGLocalPersistenceStore* UFGGameInstance::GetLocalPersistenceStore(){ return nullptr; }
void UFGGameInstance::OnFocusChanged(const FFocusEvent& FocusEvent, const FWeakWidgetPath& OldFocusedWidgetPath, const TSharedPtr< SWidget >& OldFocusedWidget, const FWidgetPath& NewFocusedWidgetPath, const TSharedPtr< SWidget >& NewFocusedWidget){ }
void UFGGameInstance::OnMpSessionExpiredConfirmed(bool ConfirmClicked){  }
void UFGGameInstance::SetupInitialInputDeviceMode(){  }
void UFGGameInstance::OnInputModeUpdated(FString cvar){  }
void UFGGameInstance::OnDynamicInputSwapUpdated(FString cvar){  }
void UFGGameInstance::OnControllerConnectionChanged(EInputDeviceConnectionState NewConnectionState, FPlatformUserId UserID, FInputDeviceId InputDeviceId){  }
void UFGGameInstance::HandleMouseEnteredViewport(){ }