// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGPortableMiner.h"

void AFGPortableMiner::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
AFGPortableMiner::AFGPortableMiner() : Super() {
	this->mExtractCycleTime = 1.0;
	this->mExtractResourceNode = nullptr;
	this->mOutputInventory = nullptr;
	this->mCurrentExtractProgress = 0.0;
	this->mInteractWidgetClass = nullptr;
	this->mInventorySize = 1;
	this->mIsProducing = false;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->bReplicates = true;
}
void AFGPortableMiner::Tick(float dt){ }
void AFGPortableMiner::Destroyed(){ }
void AFGPortableMiner::BeginPlay(){ }
void AFGPortableMiner::TickProducing(float dt){ }
void AFGPortableMiner::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGPortableMiner::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGPortableMiner::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGPortableMiner::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGPortableMiner::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGPortableMiner::NeedTransform_Implementation(){ return bool(); }
bool AFGPortableMiner::ShouldSave_Implementation() const{ return bool(); }
void AFGPortableMiner::UpdateUseState_Implementation( AFGCharacterPlayer* byCharacter, const FVector& atLocation,  UPrimitiveComponent* componentHit, FUseState& out_useState) const{ }
void AFGPortableMiner::OnUse_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
void AFGPortableMiner::OnUseStop_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
bool AFGPortableMiner::IsUseable_Implementation() const{ return bool(); }
void AFGPortableMiner::StartIsLookedAt_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
FText AFGPortableMiner::GetLookAtDecription_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state) const{ return FText(); }
void AFGPortableMiner::StopIsLookedAt_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
bool AFGPortableMiner::IsProducing() const{ return bool(); }
bool AFGPortableMiner::CanProduce() const{ return bool(); }
void AFGPortableMiner::StartProducing(){ }
void AFGPortableMiner::StopProducing(){ }
TArray< FInventoryStack > AFGPortableMiner::GetDismantleInventoryReturns() const{ return TArray<FInventoryStack>(); }
void AFGPortableMiner::OnRep_IsProducing(){ }
