// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGCheatBoardMenuElements.h"

#include "FGCheatManager.h"

FCheatMenuElement::FCheatMenuElement(const TSharedPtr<FCheatMenuCategory> InParentCategory, const FString& InDisplayName){ }
void FCheatMenuElement::ForEachElement(TFunctionRef<void(const TSharedPtr<FCheatMenuElement>& Element)> Functor, bool bRecursive){ }
int16 FCheatMenuElement::GetSortValue() const{ return int16(); }
bool FCheatMenuElement::IsMatchingSearchString(const FString& InSearchString) const{ return bool(); }
void FCheatMenuElement::FilterElementRecursive(const FString& InSearchString){ }
void FCheatMenuElement::SortRecursive(){ }
TSharedPtr<FCheatMenuElement> FCheatMenuElement::GetFirstNonFilteredSubItem(){ return TSharedPtr<FCheatMenuElement>(); }
void FCheatMenuElement::ExpandElementRecursive(TSharedPtr<SCheatTreeView> TreeView){ }
void FCheatMenuElement::RequestItemExpansion(TSharedPtr<SCheatTreeView> TreeView) const{ }
TSharedPtr<FCheatMenuElement> FCheatMenuElement::FindElement(const FString& InDisplayName, bool bRecursive){ return TSharedPtr<FCheatMenuElement>(); }
bool FCheatMenuElement::LenientStringMatch(const FString& MyStr, const FString& InSearchString){ return bool(); }
bool FCheatMenuElement::operator>(const FCheatMenuElement& b) const{ return bool(); }
bool FCheatMenuElement::operator<(const FCheatMenuElement& b) const{ return bool(); }
bool FCheatMenuElement::operator==(const FString& InDisplayName) const{ return bool(); }
FCheatMenuParam::FCheatMenuParam(const TSharedPtr<FCheatMenuCategory> InParentCategory, const FString& InDisplayName):FCheatMenuElement(InParentCategory, InDisplayName){ }
FCheatMenuParam::FCheatMenuParam(const TSharedPtr<FCheatMenuCategory> InParentCategory, const FString& InDisplayName, const TSoftObjectPtr<UObject>& InObjectValue):FCheatMenuElement(InParentCategory, InDisplayName){ }
FCheatMenuParam::FCheatMenuParam(const TSharedPtr<FCheatMenuCategory> InParentCategory, const FString& InDisplayName, bool bInBoolValue):FCheatMenuElement(InParentCategory, InDisplayName){ }
FCheatMenuParam::FCheatMenuParam(const TSharedPtr<FCheatMenuCategory> InParentCategory, const FString& InDisplayName, int64 InIntegerValue):FCheatMenuElement(InParentCategory, InDisplayName){ }
FCheatMenuElement::EItemType FCheatMenuParam::GetType() const{ return EItemType(); }
FCheatMenuCategory::FCheatMenuCategory(const TSharedPtr<FCheatMenuCategory>& InParentCategory, const FString& InCategoryName):FCheatMenuElement(InParentCategory, InCategoryName){ }
FCheatMenuElement::EItemType FCheatMenuCategory::GetType() const{ return EItemType(); }
void FCheatMenuCategory::AddReferencedObjects(FReferenceCollector& ReferenceCollector){ }
int16 FCheatMenuCategory::GetSortValue() const{ return int16(); }
void FCheatMenuCategory::ForEachElement(TFunctionRef<void(const TSharedPtr<FCheatMenuElement>& Element)> Functor, bool bRecursive){ }
void FCheatMenuCategory::FilterElementRecursive(const FString& InSearchString){ }
void FCheatMenuCategory::SortRecursive(){ }
TSharedPtr<FCheatMenuElement> FCheatMenuCategory::GetFirstNonFilteredSubItem(){ return TSharedPtr<FCheatMenuElement>(); }
void FCheatMenuCategory::ExpandElementRecursive(TSharedPtr<SCheatTreeView> TreeView){ }
TSharedPtr<FCheatMenuCategory> FCheatMenuCategory::FindCategory(const FString& CategoryName) const{ return TSharedPtr<FCheatMenuCategory>(); }
FCheatMenuCheatToggle::FCheatMenuCheatToggle(const TSharedPtr<FCheatMenuCategory> InParentCategory, UFunction* InSetterFunction, UFunction* InGetterFunction, UObject* InCheatManagerObject):FCheatMenuElement(InParentCategory, TEXT("")){ }
FCheatMenuElement::EItemType FCheatMenuCheatToggle::GetType() const{ return EItemType(); }
void FCheatMenuCheatToggle::AddReferencedObjects(FReferenceCollector& ReferenceCollector){ }
bool FCheatMenuCheatToggle::GetCheatToggleState() const{ return bool(); }
void FCheatMenuCheatToggle::SetCheatToggleState(bool bNewState) const{ }
FText FCheatMenuCheatToggle::GetStateText() const{ return FText(); }
FSlateColor FCheatMenuCheatToggle::GetStateTextColor() const{ return FSlateColor(); }
FCheatMenuObject::FCheatMenuObject(const TSharedPtr<FCheatMenuCategory> InParentCategory, UFunction* InCheatFunction, UObject* InCheatManagerObject):FCheatMenuElement(InParentCategory, TEXT("")){ }
FCheatMenuElement::EItemType FCheatMenuObject::GetType() const{ return EItemType(); }
void FCheatMenuObject::AddReferencedObjects(FReferenceCollector& ReferenceCollector){ }
void FCheatMenuObject::ExecuteCheat(){ }
FCheatBoardParamSelectionData FCheatMenuObject::GetParamSelectionData(FName InParamName) const{ return FCheatBoardParamSelectionData(); }
void FCheatMenuObject::SetParamSelectionData(FName InParamName, const FCheatBoardParamSelectionData& InSelectionData) const{ }
TSharedPtr<IFGCheatBoardParameterFilter> FCheatMenuObject::GetParameterFilter(FName InParamName, TSharedPtr<IFGCheatBoardParameterFilter> InFallbackFilter) const{ return TSharedPtr<IFGCheatBoardParameterFilter>(); }
FReply SCheatTreeView::OnPreviewKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent){ return FReply::Unhandled(); }
