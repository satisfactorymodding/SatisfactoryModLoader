// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGBlueprintSubsystem.h"
#include "Net/UnrealNetwork.h"

void UFGBlueprintRemoteCallObject::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGBlueprintRemoteCallObject, mForceNetField_UFGSignDataRemoteCallObject);
}
void UFGBlueprintRemoteCallObject::Server_SetCategoryRecordData_Implementation(const TArray< FBlueprintCategoryRecord >& categoryRecords){ }
void UFGBlueprintRemoteCallObject::Server_SetBlueprintRecordData_Implementation(const TArray< FBlueprintRecord >& categoryRecords){ }
void UFGBlueprintRemoteCallObject::Server_RequestFileData_Implementation(const FString& fileName, int32 currentProgress){ }
void UFGBlueprintRemoteCallObject::Client_RespondFileDataResponse_Implementation(const TArray< uint8 >& fileData){ }
void UFGBlueprintRemoteCallObject::Client_RespondFinalFileDataResponse_Implementation(const TArray< uint8 >& fileData, FBlueprintRecord record){ }
void UFGBlueprintRemoteCallObject::Client_RespondFileFailure_Implementation(const FString& fileName){ }
void UFGBlueprintRemoteCallObject::Server_SaveBlueprintInDesigner_Implementation( AFGBuildableBlueprintDesigner* designer,  AFGPlayerController* controller, FBlueprintRecord record, FBlueprintCategoryRecord categoryRecord, FBlueprintSubCategoryRecord subCategoryRecord){ }
void UFGBlueprintRemoteCallObject::Server_ClearBlueprintDesigner_Implementation( AFGBuildableBlueprintDesigner* designer,  AFGPlayerController* controller){ }
void UFGBlueprintRemoteCallObject::Server_LoadBlueprintInDesigner_Implementation( AFGBuildableBlueprintDesigner* designer,  AFGPlayerController* controller, const FString& blueprintName){ }
void UFGBlueprintRemoteCallObject::Server_DeleteBlueprintDescriptor_Implementation(const FString& blueprintName){ }
AFGBlueprintSubsystem::AFGBlueprintSubsystem() : Super() {
	this->mDefaultBuildEffectActor = nullptr;
	this->mUndefinedCategoryDefaultName = INVTEXT("");
	this->mTimeSinceLastBlueprintRecordMulticast = 0.0;
	this->mTimeSinceLastRecipeCheck = 0.0;
	this->mRecordDataIsDirty = false;
	this->mBlueprintDescriptorsRequireRefresh = false;
	this->mBlueprintWorld = nullptr;
	this->mHasInitialized = false;
	this->mActiveBlueprintDescriptor = nullptr;
	this->mClientHasGeneratedInitialManifest = false;
	this->mPendingFileTransferName = TEXT("");
	this->mHasActiveFileTransfer = false;
	this->mClientAwaitingResponse = false;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_DuringPhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
}
void AFGBlueprintSubsystem::BeginPlay(){ Super::BeginPlay(); }
void AFGBlueprintSubsystem::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGBlueprintSubsystem::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBlueprintSubsystem, mBlueprintCategoryRecords);
	DOREPLIFETIME(AFGBlueprintSubsystem, mServerManifest);
}
void AFGBlueprintSubsystem::Tick(float deltaTime){ Super::Tick(deltaTime); }
AFGBlueprintSubsystem* AFGBlueprintSubsystem::Get(UWorld* world){ return nullptr; }
AFGBlueprintSubsystem* AFGBlueprintSubsystem::GetBlueprintSubsystem(UObject* worldContext){ return nullptr; }
void AFGBlueprintSubsystem::Init(){ }
void AFGBlueprintSubsystem::GenerateManifest(){ }
void AFGBlueprintSubsystem::RefreshBlueprintsAndDescriptors(){ }
void AFGBlueprintSubsystem::RefreshBlueprintRecipeRequirements(){ }
void AFGBlueprintSubsystem::UpdateBlueprintCategoryPlacement(){ }
void AFGBlueprintSubsystem::AssignCategoryAndSubcategoryToBlueprintRecord(FBlueprintRecord& record){ }
void AFGBlueprintSubsystem::SetActiveBlueprintHologramDescriptor(UFGBlueprintDescriptor* desc){ }
bool AFGBlueprintSubsystem::SerializeBlueprintHeader(FArchive& ar, FBlueprintHeader& blueprintHeader){ return bool(); }
bool AFGBlueprintSubsystem::SerializeBlueprintConfig(FArchive& ar, FBlueprintRecord& blueprintRecord){ return bool(); }
void AFGBlueprintSubsystem::CreateBlueprintWorld(){ }
FBlueprintHeader AFGBlueprintSubsystem::WriteBlueprintToArchive(const FBlueprintRecord& record, const FTransform& blueprintOrigin, const TArray<  AFGBuildable* >& buildables, FIntVector dimensions){ return FBlueprintHeader(); }
bool AFGBlueprintSubsystem::WriteBlueprintToDisk(const FBlueprintRecord& record){ return bool(); }
bool AFGBlueprintSubsystem::WriteBlueprintConfigToDisk(const FBlueprintRecord& record){ return bool(); }
void AFGBlueprintSubsystem::CalculateBlueprintCost(const TArray< AFGBuildable* >& buildables, TArray< FBlueprintItemAmount >& out_cost) const{ }
void AFGBlueprintSubsystem::CalculateBlueprintCost(const TArray< AFGBuildable* >& buildables, TArray< FItemAmount >& out_cost) const{ }
bool AFGBlueprintSubsystem::LoadFileFromDisk(const FString& fileName, const FString& extension, TArray< uint8 >& out_FileData){ return bool(); }
bool AFGBlueprintSubsystem::WriteFileToDisk(const FString& fileName, const FString& extension, const TArray< uint8 >& dataToWrite){ return bool(); }
bool AFGBlueprintSubsystem::ReadBlueprintFromDisc(const FString& blueprintName){ return bool(); }
void AFGBlueprintSubsystem::EnumerateBlueprints(){ }
void AFGBlueprintSubsystem::EnumerateBlueprintConfigs(){ }
void AFGBlueprintSubsystem::FindBlueprintHeaders(FString blueprintDir, TArray< FBlueprintHeader >& out_Headers){ }
void AFGBlueprintSubsystem::LoadStoredBlueprint(UFGBlueprintDescriptor* blueprintDesc, const FTransform& blueprintOrigin, TArray<  AFGBuildable* >& out_spawnedBuildables, bool useBlueprintWorld , 
	                         AFGBuildableBlueprintDesigner* , APawn* instigator , const TFunction<void(AFGBuildable*)>& buildablePreBeginPlayDelegate ,  AFGBlueprintProxy* blueprintProxy){ }
void AFGBlueprintSubsystem::CollectObjects(TArray<  AFGBuildable* >& buildables, TArray< UObject* >& out_objectsToSerialize){ }
FString AFGBlueprintSubsystem::GetSessionBlueprintPath(){ return FString(); }
FString AFGBlueprintSubsystem::SanitizeBlueprintFileName(const FString& blueprintName){ return FString(); }
FString AFGBlueprintSubsystem::SanitizeBlueprintFolderName(const FString& folderName) { return FString(); }
void AFGBlueprintSubsystem::GatherRecipeObjectRefsForBuildableArray(const TArray< AFGBuildable* >& buildables, TArray< FObjectReferenceDisc >& out_recipeRefs){ }
AFGBuildableBlueprintDesigner* AFGBlueprintSubsystem::IsLocationInsideABlueprintDesigner(const FVector& hitLocation){ return nullptr; }
void AFGBlueprintSubsystem::NotifyBuildableWithBlueprintBuildIDSet( AFGBuildable* buildable, int32 id){ }
void AFGBlueprintSubsystem::NotifyRuntimeInstanceWithBlueprintBuildIDSet(int32 buildEffectId, int32 runtimeIndex, TSubclassOf<  AFGBuildable > buildableClass, UAbstractInstanceDataObject* abstractData){ }
void AFGBlueprintSubsystem::OnRep_BlueprintCategoryRecords(){ }
bool AFGBlueprintSubsystem::AreRecipeRequirementsMetForBlueprint(const FBlueprintHeader& header){ return bool(); }
void AFGBlueprintSubsystem::SetBlueprintCategories(TArray< UFGBlueprintCategory* > blueprintCategories){ }
bool AFGBlueprintSubsystem::DeleteBlueprintDescriptor(UFGBlueprintDescriptor* blueprintDesc){ return bool(); }
bool AFGBlueprintSubsystem::DeleteBlueprintDescriptor_Internal(UFGBlueprintDescriptor* blueprintDesc){ return bool(); }
void AFGBlueprintSubsystem::GetBlueprintDescriptors(TArray< UFGBlueprintDescriptor* >& out_descriptors, UObject* worldContext){ }
void AFGBlueprintSubsystem::CreateBlueprintCategoriesFromRecords(){ }
void AFGBlueprintSubsystem::GetBlueprintRecordForDescriptor(UFGBlueprintDescriptor* desc, FBlueprintRecord& out_blueprintRecord){ }
void AFGBlueprintSubsystem::GetBlueprintCategoryAndSubCategoryForDescriptor(UFGBlueprintDescriptor* desc, UFGBlueprintCategory** out_Category, UFGBlueprintSubCategory** out_SubCategory){ }
void AFGBlueprintSubsystem::GetBlueprintCategoryAndSubCategoryByName(const FString& catName, const FString& subName, UFGBlueprintCategory** out_Category, UFGBlueprintSubCategory** out_SubCategory){ }
void AFGBlueprintSubsystem::GetBlueprintCategoryAndSubCategoryByPrio(const int32 catID, const int32 subID, UFGBlueprintCategory** out_Category, UFGBlueprintSubCategory** out_SubCategory){ }
UFGBlueprintDescriptor* AFGBlueprintSubsystem::CreateBlueprintDescriptor(const FBlueprintRecord& record, FBlueprintHeader& header, bool markDescriptorsForRefresh){ return nullptr; }
void AFGBlueprintSubsystem::FindSubcategoryAndAddBlueprintDescriptor(UFGBlueprintDescriptor* desc, const FBlueprintRecord& record){ }
void AFGBlueprintSubsystem::RemoveBlueprintDescriptorFromSubCategory(UFGBlueprintDescriptor* blueprintDesc){ }
void AFGBlueprintSubsystem::RebuildCategoryRecordsFromDescriptors(TArray< FBlueprintCategoryRecord >& out_categoryRecords){ }
UFGBlueprintCategory* AFGBlueprintSubsystem::CreateBlueprintCategory(const FBlueprintCategoryRecord& record){ return nullptr; }
UFGBlueprintCategory* AFGBlueprintSubsystem::CreateBlueprintCategory(FText categoryName, int32 iconID, float menuPriority){ return nullptr; }
UFGBlueprintSubCategory* AFGBlueprintSubsystem::CreateBlueprintSubCategory(const FBlueprintSubCategoryRecord& record){ return nullptr; }
FBlueprintCategoryRecord& AFGBlueprintSubsystem::FindOrAddCategoryRecordForCategory(UFGBlueprintCategory* category){ return *(new FBlueprintCategoryRecord); }
void AFGBlueprintSubsystem::FindOrAddBlueprintRecordFromHeader(const FBlueprintHeader& header, FBlueprintRecord& out_record){ }
void AFGBlueprintSubsystem::NotifyBlueprintDescriptorUpdated(UFGBlueprintDescriptor* desc){ }
FFileNameToRawFileData* AFGBlueprintSubsystem::FindOrAddRawDataForFile(const FString& fileName){ return nullptr; }
void AFGBlueprintSubsystem::RemoveRawDataForFile(const FString& fileName){ }
void AFGBlueprintSubsystem::CalculateBlueprintCustomizationCost(const TArray<AFGBuildable*>& buildables, TArray<FItemAmount>& out_cost) const{ }
void AFGBlueprintSubsystem::OnRep_ServerManifest(){ }
void AFGBlueprintSubsystem::Multicast_BroadcastBlueprintRecordChanges_Implementation(const TArray< FBlueprintRecord >& records){ }
void AFGBlueprintSubsystem::Multicast_AddBlueprintBuildEffectData_Implementation(const FBlueprintBuildEffectData& buildeffectData){ }
void AFGBlueprintSubsystem::Multicast_DeleteBlueprintDescriptor_Implementation(const FString& blueprintName){ }
void AFGBlueprintSubsystem::AddOrModifyEntryToServerManifest(const FString& fileName, const FString& hash){ }
void AFGBlueprintSubsystem::GenerateClientServerManifestDiff(){ }
