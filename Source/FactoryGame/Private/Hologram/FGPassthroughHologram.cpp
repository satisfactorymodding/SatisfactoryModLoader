// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGPassthroughHologram.h"
#include "Net/UnrealNetwork.h"

AFGPassthroughHologram::AFGPassthroughHologram() : Super() {
	this->mMaxPassthroughLength = 5600.0;
	this->mAllowMultiFoundationPassThrough = false;
	this->mSnappedBuildingThickness = 0.0;
}
void AFGPassthroughHologram::BeginPlay(){ Super::BeginPlay(); }
void AFGPassthroughHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGPassthroughHologram, mSnappedBuildingThickness);
}
void AFGPassthroughHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
bool AFGPassthroughHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
void AFGPassthroughHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGPassthroughHologram::GetIgnoredClearanceActors(TArray<AActor*>& ignoredActors) const{ }
int32 AFGPassthroughHologram::GetBaseCostMultiplier() const{ return int32(); }
void AFGPassthroughHologram::GetClearanceData(TArray< const FFGClearanceData* >& out_ClearanceData) const{ }
void AFGPassthroughHologram::CheckValidPlacement(){ }
void AFGPassthroughHologram::OnRep_SnappedBuildingThickness(){ }
void AFGPassthroughHologram::RebuildMeshesAndUpdateClearance(){ }
void AFGPassthroughHologram::TryExtendInWorldDirection(const FVector& worldLocation, const FQuat& worldRotation, const FVector& worldDirection, AFGBuildableFoundation* snappedFoundation, float& out_extension, TArray<AFGBuildableFoundation*>& overlappingFoundations) const{ }
void AFGPassthroughHologram::OverlapCheckFoundations(const FVector& worldLocation, const FQuat& worldRotation, const FVector& offsetDirection, TArray<AFGBuildableFoundation*>& out_foundations) const{ }
