// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGPipelineSupportHologram.h"
#include "Components/InstancedStaticMeshComponent.h"
#include "Components/SceneComponent.h"
#include "Net/UnrealNetwork.h"

AFGPipelineSupportHologram::AFGPipelineSupportHologram() : Super() {
	this->mSupportMesh.Mesh = nullptr;
	this->mSupportMesh.Height = 0.0;
	this->mCanAdjustVerticalAngle = true;
	this->mSnapConnection = nullptr;
	this->mVerticalAngle = 0.0;
	this->mSupportLength = 0.0;
	this->mSupportMeshComponent = nullptr;
	this->mSupportTopPartMeshComponent = nullptr;
	this->mSupportLengthComponent = nullptr;
	this->mInstancedMeshComponent = CreateDefaultSubobject<UInstancedStaticMeshComponent>(TEXT("Instanced Mesh Component"));
	this->mMaxZoopAmount = 9;
	this->mBuildModeZoop = nullptr;
	this->mClearanceExtent = FVector::ZeroVector;
	this->mUseGradualFoundationRotations = true;
	this->mAllowEdgePlacementInDesignerEvenOnIntersect = true;
	this->mInstancedMeshComponent->SetupAttachment(RootComponent);
}
void AFGPipelineSupportHologram::BeginPlay(){ Super::BeginPlay(); }
void AFGPipelineSupportHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGPipelineSupportHologram, mVerticalAngle);
	DOREPLIFETIME(AFGPipelineSupportHologram, mSupportLength);
}
bool AFGPipelineSupportHologram::IsHologramIdenticalToActor(AActor* actor, const FVector& hologramLocationOffset) const{ return bool(); }
bool AFGPipelineSupportHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
bool AFGPipelineSupportHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
bool AFGPipelineSupportHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
void AFGPipelineSupportHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
AActor* AFGPipelineSupportHologram::Construct(TArray<AActor*>& out_children, FNetConstructionID constructionID){ return nullptr; }
void AFGPipelineSupportHologram::GetSupportedBuildModes_Implementation(TArray< TSubclassOf< UFGBuildGunModeDescriptor > >& out_buildmodes) const{ }
void AFGPipelineSupportHologram::OnBuildModeChanged(TSubclassOf<UFGHologramBuildModeDescriptor> buildMode){ }
bool AFGPipelineSupportHologram::CanNudgeHologram() const{ return bool(); }
void AFGPipelineSupportHologram::GetClearanceData(TArray< const FFGClearanceData* >& out_ClearanceData) const{ }
void AFGPipelineSupportHologram::ReplaceHologram(AFGHologram* hologram, bool snapTransform){ }
int32 AFGPipelineSupportHologram::GetBaseCostMultiplier() const{ return int32(); }
void AFGPipelineSupportHologram::SetSupportLength(float height){ }
void AFGPipelineSupportHologram::SnapToConnection(UFGPipeConnectionComponentBase* connection,  AFGPipelineHologram* parentPipeline){ }
void AFGPipelineSupportHologram::ResetBuildSteps(){ }
void AFGPipelineSupportHologram::ResetVerticalRotation(){ }
void AFGPipelineSupportHologram::UpdateSupportLengthRelativeLoc(){ }
void AFGPipelineSupportHologram::UpdateSupportMesh(){ }
void AFGPipelineSupportHologram::Scroll(int32 delta){ }
void AFGPipelineSupportHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGPipelineSupportHologram::CheckValidPlacement(){ }
void AFGPipelineSupportHologram::OnRep_VerticalAngle(){ }
void AFGPipelineSupportHologram::OnRep_SupportLength(){ }
