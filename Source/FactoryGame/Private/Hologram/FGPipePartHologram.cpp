// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGPipePartHologram.h"
#include "Net/UnrealNetwork.h"

AFGPipePartHologram::AFGPipePartHologram() : Super() {
	this->mSupportMesh.Mesh = nullptr;
	this->mSupportMesh.Height = 0.0;
	this->mSnapConnection = nullptr;
	this->mSnappedConnectionComponent = nullptr;
	this->mSupportMeshComponent = nullptr;
	this->mSupportLengthComponent = nullptr;
}
void AFGPipePartHologram::BeginPlay(){ Super::BeginPlay(); }
void AFGPipePartHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGPipePartHologram, mSupportMesh);
	DOREPLIFETIME(AFGPipePartHologram, mSnappedConnectionComponent);
}
bool AFGPipePartHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
bool AFGPipePartHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
bool AFGPipePartHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
void AFGPipePartHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
void AFGPipePartHologram::CheckValidFloor(){ }
void AFGPipePartHologram::GetIgnoredClearanceActors(TArray< AActor* >& ignoredActors) const{ }
bool AFGPipePartHologram::CanNudgeHologram() const{ return bool(); }
void AFGPipePartHologram::SetSupportLength(float height){ }
void AFGPipePartHologram::SnapToConnection(UFGPipeConnectionComponentBase* connection, FVector preSnapLocation){ }
void AFGPipePartHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGPipePartHologram::ConfigureComponents( AFGBuildable* inBuildable) const{ }
void AFGPipePartHologram::CheckValidPlacement(){ }
void AFGPipePartHologram::OnRep_SupportMesh(){ }
void AFGPipePartHologram::UpdateSupportLengthRelativeLoc(){ }
