// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGLadderHologram.h"
#include "Components/InstancedStaticMeshComponent.h"
#include "Components/SceneComponent.h"
#include "Net/UnrealNetwork.h"

AFGLadderHologram::AFGLadderHologram() : Super() {
	this->mLadderBottomSnapThreshold = 0.4;
	this->mWidth = 0.0;
	this->mMeshHeight = 0.0;
	this->mPlacementPosition = FVector::ZeroVector;
	this->mCanDragDown = true;
	this->mCanDragUp = true;
	this->mInstancedMeshComponent = CreateDefaultSubobject<UInstancedStaticMeshComponent>(TEXT("Instanced Mesh Component"));
	this->mBuildStep = ELadderHologramBuildStep::LHBS_SnapToActor;
	this->mInstancedMeshComponent->SetupAttachment(RootComponent);
}
void AFGLadderHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGLadderHologram, mTargetSegmentHeight);
	DOREPLIFETIME(AFGLadderHologram, mBuildStep);
}
void AFGLadderHologram::BeginPlay(){ Super::BeginPlay(); }
bool AFGLadderHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
void AFGLadderHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
bool AFGLadderHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
bool AFGLadderHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
void AFGLadderHologram::SetMaterial( UMaterialInterface* material){ }
int32 AFGLadderHologram::GetBaseCostMultiplier() const{ return int32(); }
void AFGLadderHologram::GetClearanceData(TArray< const FFGClearanceData* >& out_ClearanceData) const{ }
void AFGLadderHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGLadderHologram::CheckValidFloor(){ }
void AFGLadderHologram::OnRep_TargetSegmentHeight(){ }
void AFGLadderHologram::UpdateClearance(){ }
