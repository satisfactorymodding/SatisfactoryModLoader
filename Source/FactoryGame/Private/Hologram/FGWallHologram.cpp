// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGWallHologram.h"

AFGWallHologram::AFGWallHologram() : Super() {
	this->mUpgradeTarget = nullptr;
	this->mOnlyAllowLineZoop = false;
	this->mClearanceShrink.X = 0.0;
	this->mClearanceShrink.Y = 0.0;
	this->mClearanceShrink.Z = 0.0;
	this->mPlacementRequirements = EFactoryBuildingPlacementRequirements::FBPR_MustSnap;
}
void AFGWallHologram::BeginPlay(){ }
void AFGWallHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
bool AFGWallHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
AActor* AFGWallHologram::GetUpgradedActor() const{ return nullptr; }
bool AFGWallHologram::TryUpgrade(const FHitResult& hitResult){ return bool(); }
bool AFGWallHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
void AFGWallHologram::ConfigureActor(AFGBuildable* inBuildable) const{ }
int32 AFGWallHologram::GetRotationStep() const{ return int32(); }
void AFGWallHologram::CheckValidPlacement(){ }
void AFGWallHologram::UpdateZoop(){ }
void AFGWallHologram::ConstructZoop(TArray<AActor*>& out_children){ }
FVector AFGWallHologram::ConvertZoopToWorldLocation(const FIntVector& zoop) const{ return FVector(); }
bool AFGWallHologram::IsHologramIdenticalToBuildable( AFGBuildable* buildable, const FVector& hologramLocationOffset) const{ return bool(); }
void AFGWallHologram::SelectWallVariantForElevation(float NewAngle){ }
void AFGWallHologram::CalculateClearanceInformation(FVector& newRelativeLocation, FRotator& newRelativeRotation, FVector& newExtents){ }
