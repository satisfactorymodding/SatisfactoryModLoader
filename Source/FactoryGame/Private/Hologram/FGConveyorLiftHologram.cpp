// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGConveyorLiftHologram.h"
#include "Net/UnrealNetwork.h"

AFGConveyorLiftHologram::AFGConveyorLiftHologram() : Super() {
	this->mConnectionComponents[0] = nullptr;
	this->mConnectionComponents[1] = nullptr;
	this->mSnappedConnectionComponents[0] = nullptr;
	this->mSnappedConnectionComponents[1] = nullptr;
	this->mUpgradedConveyorLift = nullptr;
	this->mTopTransform = FTransform(FQuat::Identity, FVector::ZeroVector, FVector::OneVector);
	this->mBottomMesh = nullptr;
	this->mMidMesh = nullptr;
	this->mHalfMidMesh = nullptr;
	this->mTopMesh = nullptr;
	this->mJointMesh = nullptr;
	this->mPassthroughBottomMesh = nullptr;
	this->mFlipOnReverse = false;
	this->mIsReversed = false;
	this->mPassthroughTopMesh = nullptr;
	this->mArrowDirection = EFactoryConnectionDirection::FCD_ANY;
	this->mArrowComponent = nullptr;
	this->mBuildModeReverse = nullptr;
	this->mFirstStepYaw = 0.0;
	this->mUseBuildClearanceOverlapSnapp = false;
}
void AFGConveyorLiftHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGConveyorLiftHologram, mSnappedConnectionComponents);
	DOREPLIFETIME(AFGConveyorLiftHologram, mUpgradedConveyorLift);
	DOREPLIFETIME(AFGConveyorLiftHologram, mTopTransform);
	DOREPLIFETIME(AFGConveyorLiftHologram, mSnappedPassthroughs);
	DOREPLIFETIME(AFGConveyorLiftHologram, mArrowDirection);
}
void AFGConveyorLiftHologram::BeginPlay(){ Super::BeginPlay(); }
bool AFGConveyorLiftHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
void AFGConveyorLiftHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
bool AFGConveyorLiftHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
bool AFGConveyorLiftHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
bool AFGConveyorLiftHologram::TryUpgrade(const FHitResult& hitResult){ return bool(); }
AActor* AFGConveyorLiftHologram::GetUpgradedActor() const{ return nullptr; }
int32 AFGConveyorLiftHologram::GetBaseCostMultiplier() const{ return int32(); }
float AFGConveyorLiftHologram::GetHologramHoverHeight() const{ return float(); }
void AFGConveyorLiftHologram::GetIgnoredClearanceActors(TArray< AActor* >& ignoredActors) const{ }
void AFGConveyorLiftHologram::GetSupportedBuildModes_Implementation(TArray< TSubclassOf< UFGBuildGunModeDescriptor > >& out_buildmodes) const{ }
void AFGConveyorLiftHologram::PostHologramPlacement(const FHitResult& hitResult){ }
void AFGConveyorLiftHologram::CheckBlueprintCommingling(){ }
void AFGConveyorLiftHologram::ReplaceHologram(AFGHologram* hologram, bool snapTransform){ }
bool AFGConveyorLiftHologram::CanNudgeHologram() const{ return bool(); }
void AFGConveyorLiftHologram::GetClearanceData(TArray<const FFGClearanceData*>& out_ClearanceData) const{ }
void AFGConveyorLiftHologram::CheckValidFloor(){ }
void AFGConveyorLiftHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGConveyorLiftHologram::ConfigureComponents( AFGBuildable* inBuildable) const{ }
int32 AFGConveyorLiftHologram::GetRotationStep() const{ return int32(); }
void AFGConveyorLiftHologram::PostConstructMessageDeserialization(){ }
void AFGConveyorLiftHologram::UpdateConnectionDirections(){ }
void AFGConveyorLiftHologram::CheckValidPlacement(){ }
void AFGConveyorLiftHologram::UpdateTopTransform(const FHitResult& hitResult, FRotator rotation){ }
void AFGConveyorLiftHologram::OnRep_TopTransform(){ }
void AFGConveyorLiftHologram::UpdateClearance(){ }
void AFGConveyorLiftHologram::OnRep_ArrowDirection(){ }
void AFGConveyorLiftHologram::OnRep_SnappedPassthroughs(){ }
bool AFGConveyorLiftHologram::CanConnectToConnection(UFGFactoryConnectionComponent* from, UFGFactoryConnectionComponent* to) const{ return bool(); }
