// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGRailroadTrackHologram.h"
#include "Net/UnrealNetwork.h"

AFGRailroadTrackHologram::AFGRailroadTrackHologram() : Super() {
	this->mDefaultSwitchControlRecipe = nullptr;
	this->mMinLength = 0.0;
	this->mMaxLength = 10000.0;
	this->mMinBendRadius = 3000.0;
	this->mMaxGrade = 25.0;
	this->mSnapDistance = 500.0;
	this->mConnectionComponents[0] = nullptr;
	this->mConnectionComponents[1] = nullptr;
	this->mSnappedConnectionComponents[0] = nullptr;
	this->mSnappedConnectionComponents[1] = nullptr;
	this->mSnappedRailroadTrack = nullptr;
	this->mSnappedRailroadTrackDistance = 0.0;
	this->mFlipSnappedDirection = false;
	this->mStraightMode = false;
	this->mMesh = nullptr;
	this->mSwitchControls[0] = nullptr;
	this->mSwitchControls[1] = nullptr;
}
void AFGRailroadTrackHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGRailroadTrackHologram, mSwitchControls);
	DOREPLIFETIME(AFGRailroadTrackHologram, mNumSwitchConnections);
}
void AFGRailroadTrackHologram::BeginPlay(){ Super::BeginPlay(); }
bool AFGRailroadTrackHologram::TrySnapToActor(const FHitResult& hitResult){ return Super::TrySnapToActor(hitResult); }
void AFGRailroadTrackHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
int32 AFGRailroadTrackHologram::GetBaseCostMultiplier() const{ return int32(); }
void AFGRailroadTrackHologram::SpawnChildren(AActor* hologramOwner, FVector spawnLocation, APawn* hologramInstigator){ }
bool AFGRailroadTrackHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
void AFGRailroadTrackHologram::CheckBlueprintCommingling(){ }
void AFGRailroadTrackHologram::GetIgnoredClearanceActors(TSet< AActor* >& ignoredActors) const{ }
void AFGRailroadTrackHologram::PostHologramPlacement(const FHitResult& hitResult, bool callForChildren){ Super::PostHologramPlacement(hitResult, callForChildren); }
bool AFGRailroadTrackHologram::CanTakeNextBuildStep() const{ return Super::CanTakeNextBuildStep(); }
int32 AFGRailroadTrackHologram::GetRotationStep() const{ return Super::GetRotationStep(); }
void AFGRailroadTrackHologram::ScrollRotate(int32 delta, int32 step){ Super::ScrollRotate(delta, step); }
void AFGRailroadTrackHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGRailroadTrackHologram::ConfigureComponents( AFGBuildable* inBuildable) const{ }
void AFGRailroadTrackHologram::SetLocationAndRotationFromPlatformConnections( UFGTrainPlatformConnection* connectionOne,  UFGTrainPlatformConnection* connectionTwo){ }
TArray< class UFGRailroadTrackConnectionComponent* > AFGRailroadTrackHologram::GetSnappedConnectionComponents(){ return TArray<class UFGRailroadTrackConnectionComponent*>(); }
void AFGRailroadTrackHologram::GenerateAndUpdateSpline(const FHitResult& hitResult){ }
void AFGRailroadTrackHologram::CheckValidPlacement(){ }
void AFGRailroadTrackHologram::CheckValidFloor(){ }
void AFGRailroadTrackHologram::ValidateRailroadTrack(){ }
void AFGRailroadTrackHologram::UpdateClearanceData(){ }
void AFGRailroadTrackHologram::UpdateSplineComponent(){ }
bool AFGRailroadTrackHologram::TryFindAndSnapToOverlappingConnection(int32 forConnectionIndex, const FVector& location){ return false; }
void AFGRailroadTrackHologram::TryPlaceSwitchControl(int32 forConnectionIndex,
	const TArray<class UFGRailroadTrackConnectionComponent*>* blueprintHologramConnections){  }
bool AFGRailroadTrackHologram::ValidateGrade(){ return bool(); }
bool AFGRailroadTrackHologram::ValidateCurvature(){ return bool(); }
void AFGRailroadTrackHologram::AutoRouteSpline(const FVector& startConnectionPos,
		const FVector& startConnectionNormal,
		const FVector& endConnectionPos,
		const FVector& endConnectionNormal){ }
