// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGSplineHologram.h"
#include "Components/SceneComponent.h"
#include "Components/SplineComponent.h"
#include "Net/UnrealNetwork.h"

AFGSplineHologram::AFGSplineHologram() : Super() {
	this->mSplineComponent = CreateDefaultSubobject<USplineComponent>(TEXT("mSplineComponent"));
	this->mSplineData.Emplace();
	this->mSplineData[0].Location = FVector::ZeroVector;
	this->mSplineData[0].ArriveTangent = FVector((1, 0, 0));
	this->mSplineData[0].LeaveTangent = FVector((1, 0, 0));
	this->mSplineData.Emplace();
	this->mSplineData[1].Location = FVector::ZeroVector;
	this->mSplineData[1].ArriveTangent = FVector((1, 0, 0));
	this->mSplineData[1].LeaveTangent = FVector((1, 0, 0));
	this->mBuildStep = ESplineHologramBuildStep::SHBS_FindStart;
	this->mSplineComponent->SetupAttachment(RootComponent);
}
void AFGSplineHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGSplineHologram, mSplineData);
	DOREPLIFETIME(AFGSplineHologram, mBuildStep);
}
void AFGSplineHologram::BeginPlay(){ Super::BeginPlay(); }
bool AFGSplineHologram::CanNudgeHologram() const{ return bool(); }
bool AFGSplineHologram::IsConnectionSnapped(bool lastConnection){ return bool(); }
void AFGSplineHologram::GetLastSplineData(FSplinePointData& data){ }
void AFGSplineHologram::ResetBuildSteps(){ }
bool AFGSplineHologram::IsHologramIdenticalToActor(AActor* actor, const FVector& hologramLocationOffset) const{ return bool(); }
void AFGSplineHologram::OnRep_SplineData(){ }
void AFGSplineHologram::UpdateSplineComponent(){ }
void AFGSplineHologram::UpdateClearanceData(){ }
