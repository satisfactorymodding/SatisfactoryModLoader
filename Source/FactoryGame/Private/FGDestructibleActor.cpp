// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGDestructibleActor.h"
#include "Components/StaticMeshComponent.h"
#include "Net/UnrealNetwork.h"

void AFGDestructibleActor::GetClearanceData_Implementation(TArray< FFGClearanceData >& out_data) const {
	out_data = mClearanceData;
}

AFGDestructibleActor::AFGDestructibleActor() : Super() {
	this->mStaticMeshProxy = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("StaticMeshProxy"));
	this->mGeometryCollection = nullptr;
	this->mDestructibleActorFractureTime = 10.0;
	this->mDestructibleActorState = EDestructibleActorState::DSS_Intact;
	this->mGeometryCollectionComponent = nullptr;
	this->mDestructionImpulseScale = 1.0;
	this->mBindChaosPhysicsCollisionEvent = false;
	this->mDestroyedByForceLocation = FVector::ZeroVector;
	this->mRadialForceDestruction = 0.0;
	this->mDestroyedByActor = nullptr;
	this->mHasBeenFractured = false;
	this->bReplicates = true;
	this->NetDormancy = ENetDormancy::DORM_DormantAll;
	this->RootComponent = mStaticMeshProxy;
}
void AFGDestructibleActor::BeginPlay(){ Super::BeginPlay(); }
float AFGDestructibleActor::TakeDamage(float damage,  FDamageEvent const& damageEvent, AController* eventInstigator, AActor* damageCauser){ return float(); }
void AFGDestructibleActor::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDestructibleActor::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDestructibleActor::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDestructibleActor::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGDestructibleActor::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGDestructibleActor::NeedTransform_Implementation(){ return bool(); }
bool AFGDestructibleActor::ShouldSave_Implementation() const{ return bool(); }
bool AFGDestructibleActor::IsMeshChainSawable(UStaticMesh* Mesh) const{ return bool(); }
void AFGDestructibleActor::SetDestructibleActorState(EDestructibleActorState newState){ }
void AFGDestructibleActor::ApplyDestructibleActorState(){ }
void AFGDestructibleActor::OnDestructibleFractured(){ }
void AFGDestructibleActor::OnFracturingFinished(){ }
void AFGDestructibleActor::OnRep_DestructibleActorState(){ }
void AFGDestructibleActor::GetLifetimeReplicatedProps(TArray<FLifetimeProperty> & OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGDestructibleActor, mDestructibleActorState);
	DOREPLIFETIME(AFGDestructibleActor, mDestroyedByForceLocation);
	DOREPLIFETIME(AFGDestructibleActor, mRadialForceDestruction);
}
