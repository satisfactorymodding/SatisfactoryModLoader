// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGSignSubsystem.h"
#include "Components/SceneComponent.h"
#include "Net/UnrealNetwork.h"

bool FSignRPC_Data::NetSerialize(FArchive& Ar,  UPackageMap* Map, bool& bOutSuccess){ return bool(); }
void FSignRPC_Data::AddPendingSign(AFGBuildableWidgetSign* sign){ }
bool FClientSetSignData::NetSerialize(FArchive& Ar,  UPackageMap* Map, bool& bOutSuccess){ return bool(); }
void UFGSignDataRemoteCallObject::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGSignDataRemoteCallObject, mForceNetField_UFGSignDataRemoteCallObject);
}
void UFGSignDataRemoteCallObject::Server_RequestSignData_Implementation(FSignRPC_Data signRPCData){ }
void UFGSignDataRemoteCallObject::Client_RequestSignDataResponse_Implementation(FSignRPC_Data signRPCData){ }
void UFGSignDataRemoteCallObject::Server_SetSignData_Implementation(FClientSetSignData clientData){ }
void AFGSignSubsystem::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);

}
AFGSignSubsystem* AFGSignSubsystem::Get(UWorld* world){ return nullptr; }
AFGSignSubsystem* AFGSignSubsystem::GetSignSubsystem(UObject* worldContext){ return nullptr; }
AFGSignSubsystem::AFGSignSubsystem() : Super() {
	this->mSignPixelInstanceActor = nullptr;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.5;
	this->SetHidden(false);
	this->RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("Root"));
}
void AFGSignSubsystem::BeginPlay(){ Super::BeginPlay(); }
void AFGSignSubsystem::Tick(float DeltaSeconds){ Super::Tick(DeltaSeconds); }
void AFGSignSubsystem::UpdateAndSortPendingSigns(){ }
void AFGSignSubsystem::AddWidgetSign(AFGBuildableWidgetSign* widgetSign){ }
void AFGSignSubsystem::RemoveWidgetSign(AFGBuildableWidgetSign* widgetSign){ }
void AFGSignSubsystem::NotifySignDataDirty(AFGBuildableWidgetSign* widgetSign){ }
void AFGSignSubsystem::AddPixelSign(AFGBuildablePixelSign* pixelSign){ }
void AFGSignSubsystem::RemovePixelSign(AFGBuildablePixelSign* pixelSign){ }
bool AFGSignSubsystem::DoesSamePresetExists(uint32 GUID, FMappedSignData*& OutData){ return bool(); }
void AFGSignSubsystem::RegisterNewPreset(AFGBuildableWidgetSign* Sign, uint32 GUID, UWidgetComponent* Widget, UMaterialInstanceDynamic* InMaterial){ }
void AFGSignSubsystem::SetNewRenderTarget(uint32 GUID, UTextureRenderTarget2D* InRenderTarget, TFunction<void(void)>&& UpdateFunction){ }
void AFGSignSubsystem::ResolveRemoved(AFGBuildableWidgetSign* Sign, uint32 GUID){ }
UWidgetComponent* AFGSignSubsystem::GetWidgetByGUID(uint32 GUID){ return nullptr; }
