// This file has been automatically generated by the Unreal Header Implementation tool

#include "UI/Message/FGAudioMessage.h"

bool FMessageDialogue::HasMoreSubtitlesToShow() const{ return bool(); }
float FMessageDialogue::GetLength() const{ return float(); }
FMessageSubtitle FMessageDialogue::PopNextSubtitle(){ return FMessageSubtitle(); }
#if WITH_EDITOR
float UFGAudioMessage::GetCurrentAudioPlayProgress(){ return float(); }
void UFGAudioMessage::PauseMessage(){ }
bool UFGAudioMessage::IsMessagePaused(){ return bool(); }
void UFGAudioMessage::ResumeMessage(){ }
void UFGAudioMessage::StopAndDestroyMessage(){ }
#endif 
UFGAudioMessage::UFGAudioMessage(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) {
	this->mAkAudioComponent = nullptr;
	this->mCurrentDialogue.AudioEvent = nullptr;
	this->mCurrentDialogue.OverlapWithNextDialogue = 0.0;
	this->mSubtitleTimeMultiplier = 0.065;
	this->mOverrideText = INVTEXT("");
	this->mShowOnlyOverrideText = false;
	this->mMappingContext = nullptr;
	this->mAudioMessageInputComponent = nullptr;
	this->mMessage = nullptr;
}
void UFGAudioMessage::NativeConstruct(){ Super::NativeConstruct(); }
void UFGAudioMessage::NativeDestruct(){ Super::NativeDestruct(); }
int32 UFGAudioMessage::GetMessagePriority() const{ return int32(); }
void UFGAudioMessage::StartPlayback(){ }
void UFGAudioMessage::OnSkipButtonPressed(){ }
void UFGAudioMessage::OnSkipButtonReleased(){ }
void UFGAudioMessage::PlayNextDialogue_Implementation(bool skipToNextTimeStamp){ }
void UFGAudioMessage::ContinuePlayback(){ }
void UFGAudioMessage::SkipToNextSubtitle(){ }
void UFGAudioMessage::CancelPlayback(){ }
void UFGAudioMessage::FinishPlayback(){ }
FAudioSubtitlePair UFGAudioMessage::GetCurrentDialogue(){ return FAudioSubtitlePair(); }
EMessagePriorityType UFGAudioMessage::GetMessagePriorityType(TSubclassOf< UFGAudioMessage > message, UObject* worldContext){ return EMessagePriorityType(); }
void UFGAudioMessage::InitMessage( UFGMessage* message){ }
bool UFGAudioMessage::SkipIncomingAnimation(){ return bool(); }
bool UFGAudioMessage::DoesMessageContainPresentation() const{ return bool(); }
void UFGAudioMessage::SetupAkAudioComponent(){ }
void UFGAudioMessage::TrySkipToSubtitle(){ }
