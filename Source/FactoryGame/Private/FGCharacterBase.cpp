// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGCharacterBase.h"
#include "FGDotReceiverComponent.h"
#include "FGHealthComponent.h"
#include "Net/UnrealNetwork.h"

void AFGCharacterBase::GetClearanceData_Implementation(TArray< FFGClearanceData >& out_data) const {
	out_data = mClearanceData;
}

void FFootstepEffect::Reset(){ }
AFGCharacterBase::AFGCharacterBase(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) {
	this->mDefaultFootstepEffect.Particle = nullptr;
	this->mMaxFootstepParticleSpawnDistance = 2500.0;
	this->mMaxFootstepDecalSpawnDistance = 1250.0;
	this->mFootstepDecalSize.Add(FVector((-20, -20, -20)));
	this->mFootstepDecalSize.Add(FVector((20, 20, 20)));
	this->mFootstepDecalLifetime = 10.0;
	this->mFootstepWalkingNoiseClass = nullptr;
	this->mFootstepSprintingNoiseClass = nullptr;
	this->mFootstepLandingNoiseClass = nullptr;
	this->mHealthComponent = CreateDefaultSubobject<UFGHealthComponent>(TEXT("HealthComponent"));
	this->mDOTReceiverComponent = CreateDefaultSubobject<UFGDotReceiverComponent>(TEXT("DotReceiverComponent"));
	this->mIsInGas = false;
	this->mFallDamageCurve = nullptr;
	this->mFallDamageCurveOverride = nullptr;
	this->mFallDamageDamageType = nullptr;
	this->mVehicleDamageMultiplier = 1.0;
	this->mMaxDeathStayTime = 60.0;
	this->mDeathRemoveCheckTime = 5.0;
	this->mTakeDamageSound = nullptr;
	this->mDeathSound = nullptr;
	this->mLandEvent = nullptr;
	this->mTakeDamageParticle = nullptr;
	this->mMinVehiclePushVelocityForRagdoll = 400.0;
	this->mTimeToGetUpFromRagdoll = 3.0;
	this->mMaxDistanceMovedToGetUp = 9.0;
	this->mIsRagdolled = false;
	this->mRagdollMeshLoc = FVector::ZeroVector;
	this->mRagdollMeshVelocity = FVector::ZeroVector;
	this->mRagdollMeshAngularVelocity = FVector::ZeroVector;
	this->mRagdollMeshLocBoneName = TEXT("Pelvis");
	this->mRagdollMeshPhysicsBoneName = TEXT("Pelvis");
	this->mApplyDamageMomentum = false;
	this->mNormalDamageMultiplier = 1.0;
	this->mIsPossessed = false;
	this->bReplicateUsingRegisteredSubObjectList = true;
}
void AFGCharacterBase::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGCharacterBase, mHealthComponent);
	DOREPLIFETIME(AFGCharacterBase, mIsInGas);
	DOREPLIFETIME(AFGCharacterBase, mIsRagdolled);
	DOREPLIFETIME(AFGCharacterBase, mRagdollMeshLoc);
	DOREPLIFETIME(AFGCharacterBase, mRagdollMeshVelocity);
	DOREPLIFETIME(AFGCharacterBase, mRagdollMeshAngularVelocity);
	DOREPLIFETIME(AFGCharacterBase, mIsPossessed);
}
void AFGCharacterBase::BeginPlay(){ Super::BeginPlay(); }
void AFGCharacterBase::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGCharacterBase::Tick(float deltaTime){ Super::Tick(deltaTime); }
void AFGCharacterBase::CalcCamera(float DeltaTime, FMinimalViewInfo& OutResult){ }
float AFGCharacterBase::TakeDamage(float DamageAmount,  FDamageEvent const& DamageEvent,  AController* EventInstigator, AActor* DamageCauser){ return float(); }
void AFGCharacterBase::ApplyDamageMomentum(float DamageTaken, FDamageEvent const& DamageEvent, APawn* PawnInstigator, AActor* DamageCauser){ }
void AFGCharacterBase::PossessedBy(AController* NewController){ }
void AFGCharacterBase::UnPossessed(){ }
void AFGCharacterBase::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGCharacterBase::NeedTransform_Implementation(){ return bool(); }
bool AFGCharacterBase::ShouldSave_Implementation() const{ return bool(); }
void AFGCharacterBase::LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride){ }
void AFGCharacterBase::Died(AActor* thisActor){ }
void AFGCharacterBase::OnTakeDamage(AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ }
void AFGCharacterBase::OnTakePointDamage(AActor* damagedActor, float damage,  AController* instigatedBy, FVector hitLocation,  UPrimitiveComponent* hitComponent, FName boneName, FVector shotFromDirection, const  UDamageType* damageType, AActor* damageCauser){ }
void AFGCharacterBase::OnTakeRadialDamage(AActor* damagedActor, float damage, const  UDamageType* damageType, FVector hitLocation, FHitResult hitInfo,  AController* instigatedBy, AActor* damageCauser){ }
void AFGCharacterBase::Landed(const FHitResult& Hit){ }
int32 AFGCharacterBase::CalculateFallDamage_Implementation(float zSpeed) const{ return int32(); }
void AFGCharacterBase::SetFallDamageOverride(UCurveFloat* fallDamageCurveOverride){ }
void AFGCharacterBase::PlayLandEffects(){ }
bool AFGCharacterBase::IsAliveAndWell() const{ return bool(); }
void AFGCharacterBase::PlayFootstepEffect_Implementation(int32 footDown, bool playSound){ }
bool AFGCharacterBase::TraceForGround(FVector traceStart, FVector traceEnd, FHitResult& out_hitResult, float& out_waterDepth) const{ return bool(); }
const FFootstepEffect& AFGCharacterBase::GetFootstepEffect(const FHitResult& hitResult) const{ return *(new FFootstepEffect); }
void AFGCharacterBase::RagdollCharacter(bool newRagdoll){ }
void AFGCharacterBase::UpdateRagdollSyncData(){ }
USkeletalMeshComponent* AFGCharacterBase::GetMesh3P() const{ return nullptr; }
USkeletalMeshComponent* AFGCharacterBase::GetMainMesh() const{ return nullptr; }
void AFGCharacterBase::CheckFallDamage(float zSpeed){ }
void AFGCharacterBase::SetLocallyPossessed(bool inPossessed){ }
void AFGCharacterBase::Native_OnLocallyPossessedChanged(bool isPossessed){ }
UAkAudioEvent* AFGCharacterBase::GetFootstepEvent(int32 footDown) const{ return nullptr; }
float AFGCharacterBase::AdjustDamage(AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ return float(); }
void AFGCharacterBase::PlayFootstepAudio(int32 footIndex, const FHitResult& hitInfo, float waterDepth){ }
void AFGCharacterBase::PlayFootstepParticle(const FHitResult& hitInfo, const FFootstepEffect& precalculatedEffect, FRotator socketRotation){ }
void AFGCharacterBase::PlaceFootstepDecal(const FHitResult& hitInfo, const FFootstepEffect& precalculatedEffect, FRotator socketRotation, int32 footDown){ }
bool AFGCharacterBase::GetWaterFootstepEffect(const TArray< FFootstepEffectWater >& waterEffects, float waterDepth, FFootstepEffect& out_footstepEffect) const{ return bool(); }
void AFGCharacterBase::CheckIfShouldDestroy(){ }
void AFGCharacterBase::DoRagdoll_Internal(){ }
void AFGCharacterBase::TryGetUpFromRagdoll(){ }
void AFGCharacterBase::SyncRagdoll(){ }
void AFGCharacterBase::SetupDestroyTimer(){ }
void AFGCharacterBase::OnRep_IsPossessed(){ }
void AFGCharacterBase::OnRep_IsRagdolled(){ }
FVector AFGCharacterBase::FindSafePlaceToGetUp(){ return FVector(); }
