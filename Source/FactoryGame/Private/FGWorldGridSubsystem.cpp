// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGWorldGridSubsystem.h"

DEFINE_LOG_CATEGORY(LogWorldGrid);

FFGWorldGridCellData::FFGWorldGridCellData(){ }
FFGWorldGridCell::FFGWorldGridCell(){ }
FFGWorldGridCell::FFGWorldGridCell(const FFGWorldGridCellData& Data, const FVector& WorldLocation, int32 CellIndex, float DefaultElevation){ }
float FFGWorldGridCell::GetElevation() const{ return float(); }
void FFGWorldGridCell::OnTraceCompleted(const FTraceHandle& Handle, FTraceDatum& Data){ }
AFGWorldGridSubsystem::AFGWorldGridSubsystem() : Super() {
	this->mWorldGridMin = FVector2D::ZeroVector;
	this->mWorldGridMax = FVector2D::ZeroVector;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
}
AFGWorldGridSubsystem* AFGWorldGridSubsystem::Get(UWorld* world){ return nullptr; }
AFGWorldGridSubsystem* AFGWorldGridSubsystem::Get(UObject* worldContext){ return nullptr; }
void AFGWorldGridSubsystem::CreateRuntimeWorldGrid(const TArray< FFGWorldGridCellData >& CellData, const FVector2D& WorldGridMin, const FVector2D& WorldGridMax, int32 NumGridDivisions){ }
bool AFGWorldGridSubsystem::HasValidGrid() const{ return bool(); }
void AFGWorldGridSubsystem::UpdateCellContainingBuildable( AFGBuildable* pBuildable){ }
void AFGWorldGridSubsystem::UpdateCellContainingLocation(const FVector& location){ }
FIntPoint AFGWorldGridSubsystem::GetWorldGridCoordinatesForLocation(const FVector& WorldLocation) const{ return FIntPoint(); }
FFGWorldGridCell* AFGWorldGridSubsystem::GetCellByIndex(int32 Index){ return nullptr; }
const FFGWorldGridCell* AFGWorldGridSubsystem::GetCellByIndex(int32 Index) const{ return nullptr; }
FFGWorldGridCell* AFGWorldGridSubsystem::GetCellFromGridCoordinates(const FIntPoint& Coords){ return nullptr; }
const FFGWorldGridCell* AFGWorldGridSubsystem::GetCellFromGridCoordinates(const FIntPoint& Coords) const{ return nullptr; }
FFGWorldGridCell* AFGWorldGridSubsystem::GetCellContainingWorldLocation(const FVector& WorldLocation){ return nullptr; }
FFGWorldGridCell* AFGWorldGridSubsystem::GetClosestCellToWorldLocation(const FVector& WorldLocation){ return nullptr; }
int32 AFGWorldGridSubsystem::GetCellIndexFromGridCoordinates(const FIntPoint& Coords) const{ return int32(); }
int32 AFGWorldGridSubsystem::GetCellIndexFromWorldLocation(const FVector& WorldLocation) const{ return int32(); }
FVector AFGWorldGridSubsystem::GetCellWorldLocationFromGridCoords(const FIntPoint& Coords) const { return FVector(); }
void AFGWorldGridSubsystem::GetCellWorldLocationFromGridCoords(const FIntPoint& Coords, FVector& OutVector) const{ }
float AFGWorldGridSubsystem::GetCellElevationFromWorldLocation(const FVector& WorldLocation) const{ return float(); }
float AFGWorldGridSubsystem::GetCellElevationFromGridCoordinates(const FIntPoint& Coords) const{ return float(); }
TArray< const FFGWorldGridCell* > AFGWorldGridSubsystem::GetCellNeighbours(const FFGWorldGridCell* Cell) const{ return TArray<const FFGWorldGridCell*>(); }
TArray< const FFGWorldGridCell* > AFGWorldGridSubsystem::GetCellNeighboursFromIndex(int32 Index) const{ return TArray<const FFGWorldGridCell*>(); }
TArray< int32 > AFGWorldGridSubsystem::GetCellNeighbourIndicesFromIndex(int32 Index) const{ return TArray<int32>(); }
FVector2D AFGWorldGridSubsystem::GetWorldGridSize() const{ return FVector2D(); }
FVector2D AFGWorldGridSubsystem::GetCellSize() const{ return FVector2D(); }
void AFGWorldGridSubsystem::EndPlay(const EEndPlayReason::Type EndPlayReason){ Super::EndPlay(EndPlayReason); }
void AFGWorldGridSubsystem::Tick(float DeltaSeconds){ Super::Tick(DeltaSeconds); }
