// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGStartingPod.h"
#include "Components/SceneComponent.h"
#include "Components/SkeletalMeshComponent.h"
#include "FGCameraModifierLimitFOV.h"
#include "FGCameraModifierLimitLook.h"
#include "Net/UnrealNetwork.h"

AFGStartingPod::AFGStartingPod() : Super() {
	this->mIntroSequencePlayerCameraFOV = 90.0;
	this->mDropPodAttachmentRelativeLocation = FVector((0, 0, 95));
	this->mIntroLevelSequence = nullptr;
	this->mCameraLockLookRotator = FRotator::ZeroRotator;
	this->mPlanetFallOnboardingStep = nullptr;
	this->mSkipIntroForwardDistance = 0.0;
	this->mLimitLookModifierClass = UFGCameraModifierLimitLook::StaticClass();
	this->mLimitFOVModifierClass = UFGCameraModifierLimitFOV::StaticClass();
	this->mDisplayName = INVTEXT("");
	this->mActorRepresentationTexture = nullptr;
	this->mActorRepresentationColor = FLinearColor(0.0, 0.0, 0.0, 0.0);
	this->mDropPodMeshComponent = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("DropPod Mesh"));
	this->mDropModSkeletalMesh = nullptr;
	this->mLocalIntroSequenceState = EIntroSequencePlayState::None;
	this->mCameraModifierLimitFOV = nullptr;
	this->mCameraModifierLimitLook = nullptr;
	this->mLevelSequenceActor = nullptr;
	this->mPreviousOwner = nullptr;
	this->mDropPodSpawnLocation = FVector::ZeroVector;
	this->mCompassMaterialInstance = nullptr;
	this->RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("DefaultSceneRoot"));
	this->mDropPodMeshComponent->SetupAttachment(RootComponent);
}
void AFGStartingPod::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGStartingPod, mDropPodSpawnLocation);
}
void AFGStartingPod::BeginPlay(){ Super::BeginPlay(); }
void AFGStartingPod::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
FVector AFGStartingPod::GetRefundSpawnLocationAndArea_Implementation(const FVector& aimHitLocation, float& out_radius) const{ return FVector(); }
bool AFGStartingPod::CanDismantle_Implementation() const{ return bool(); }
void AFGStartingPod::GetDismantleRefund_Implementation(TArray< FInventoryStack >& out_refund, bool noBuildCostEnabled) const{ }
void AFGStartingPod::PreUpgrade_Implementation(){ }
void AFGStartingPod::Upgrade_Implementation(AActor* newActor){ }
void AFGStartingPod::Dismantle_Implementation(){ }
void AFGStartingPod::StartIsLookedAtForDismantle_Implementation( AFGCharacterPlayer* byCharacter){ }
void AFGStartingPod::StopIsLookedAtForDismantle_Implementation( AFGCharacterPlayer* byCharacter){ }
void AFGStartingPod::GetChildDismantleActors_Implementation(TArray< AActor* >& out_ChildDismantleActors) const{ }
FText AFGStartingPod::GetDismantleDisplayName_Implementation(AFGCharacterPlayer* byCharacter) const{ return FText(); }
bool AFGStartingPod::AddAsRepresentation(){ return bool(); }
bool AFGStartingPod::UpdateRepresentation(){ return bool(); }
bool AFGStartingPod::RemoveAsRepresentation(){ return bool(); }
bool AFGStartingPod::IsActorStatic(){ return bool(); }
FVector AFGStartingPod::GetRealActorLocation(){ return FVector(); }
FRotator AFGStartingPod::GetRealActorRotation(){ return FRotator(); }
UTexture2D* AFGStartingPod::GetActorRepresentationTexture(){ return nullptr; }
FText AFGStartingPod::GetActorRepresentationText(){ return FText(); }
void AFGStartingPod::SetActorRepresentationText(const FText& newText){ }
FLinearColor AFGStartingPod::GetActorRepresentationColor(){ return FLinearColor(); }
void AFGStartingPod::SetActorRepresentationColor(FLinearColor newColor){ }
ERepresentationType AFGStartingPod::GetActorRepresentationType(){ return ERepresentationType(); }
bool AFGStartingPod::GetActorShouldShowInCompass(){ return bool(); }
bool AFGStartingPod::GetActorShouldShowOnMap(){ return bool(); }
EFogOfWarRevealType AFGStartingPod::GetActorFogOfWarRevealType(){ return EFogOfWarRevealType(); }
float AFGStartingPod::GetActorFogOfWarRevealRadius(){ return float(); }
ECompassViewDistance AFGStartingPod::GetActorCompassViewDistance(){ return ECompassViewDistance(); }
void AFGStartingPod::SetActorCompassViewDistance(ECompassViewDistance compassViewDistance){ }
UMaterialInterface* AFGStartingPod::GetActorRepresentationCompassMaterial(){ return nullptr; }
bool AFGStartingPod::NeedTransform_Implementation(){ return bool(); }
bool AFGStartingPod::ShouldSave_Implementation() const{ return bool(); }
AFGCharacterPlayer* AFGStartingPod::GetOwnerPlayer() const{ return nullptr; }
void AFGStartingPod::RequestSkipIntroSequence(){ }
void AFGStartingPod::RequestDropPodExit(){ }
void AFGStartingPod::AllowSkippingOnboarding(bool bAllowSkippingOnboarding){ }
void AFGStartingPod::RequestAllowLookAround(){ }
bool AFGStartingPod::IsIntroSequencePlaying() const{ return bool(); }
void AFGStartingPod::Local_SetupIntroSequence_Implementation(){ }
void AFGStartingPod::Local_ExitDropPod_Implementation(){ }
void AFGStartingPod::Local_AllowLookAround_Implementation(){ }
void AFGStartingPod::Local_EndIntroSequence_Implementation(){ }
void AFGStartingPod::Local_SkipIntroSequence_Implementation(){ }
void AFGStartingPod::Local_PostSkipIntroSequence_Implementation(AFGCharacterPlayer* CharacterPlayer){ }
void AFGStartingPod::Server_RequestSkipIntroSequence_Implementation(){ }
void AFGStartingPod::Multicast_SkipIntroSequence_Implementation(){ }
void AFGStartingPod::OnRep_Owner(){ }
void AFGStartingPod::RequestSetupIntroSequence(){ }
void AFGStartingPod::StopIntroSequence(bool bStopSequencer){ }
void AFGStartingPod::Local_RequestSkipIntroSequence(){ }
void AFGStartingPod::OnIntroSequenceEnded(){ }
