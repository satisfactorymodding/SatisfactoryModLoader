// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGSavePlatform.h"

bool FFGSavePlatform::CheckSaveInCommon(const UWorld*  world, const FString& saveName){ return bool(); }
bool FFGSavePlatform::IsSaveReadOnly(const FString& savePath){ return bool(); }
bool FFGSavePlatform::WriteSaveGame(const TArray< uint8, TSizedDefaultAllocator< 64 > >& outputData, const FString& savePath, bool bIsAutoSave, bool bAllowSaveBackups){ return bool(); }
bool FFGSavePlatform::ReadSaveGame(const FString& saveFile, TArray< uint8 >& out_rawSaveData){ return bool(); }
bool FFGSavePlatform::DeleteSaveGame(const FString& saveFile){ return bool(); }
ESaveLocationInfo FFGSavePlatform::ResolveSaveLocationForSaveDirectory(const FString& saveDirectory){ return ESaveLocationInfo(); }
void FFGSavePlatform::FindSaveGames(const TArray<FString>& saveDirectories, TWeakPtr<FOnEnumerateSaveGamesComplete> onEnumerateSaveGamesComplete){ }
TArray<FSaveHeader> FFGSavePlatform::FindSaveGamesSync(const TArray<FString>& saveDirectories){ return TArray<FSaveHeader>(); }
bool FFGSavePlatform::SaveExists(const FString& saveFile){ return bool(); }
bool FFGSavePlatform::GetUserSaveDirectoryPath(const UWorld* world, FString& out_dirPath){ return bool(); }
FString FFGSavePlatform::GetCommonSaveDirectoryPath(const UWorld* world){ return FString(); }
FString FFGSavePlatform::SaveNameToFileName(const FString& directory, const FString& saveName){ return FString(); }
bool FFGSavePlatform::IsDeprecatedSave(const FString& saveName){ return bool(); }
bool FFGSavePlatform::LoadSaveGameHeaderSync(const FString& saveName, TArray<FString> saveDirectories, FSaveHeader& out_saveHeader){ return bool(); }
void FFGSavePlatform::ExtendedSaveGameInfoDelegate(const TCHAR* SaveName, const EGameDelegates_SaveGame Key, FString& Value){ }
