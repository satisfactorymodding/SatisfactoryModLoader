// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGFoliageStateRepProxy.h"
#include "Components/SceneComponent.h"
#include "Net/UnrealNetwork.h"

DEFINE_LOG_CATEGORY(LogFoliageReplication);

void FFoliageRemovalHashArray::PostReplicatedAdd(const TArrayView<int32>& AddedIndices, int32 FinalSize){ }
void UFGFoliageRemovalBundle::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGFoliageRemovalBundle, ReplicationBuffer);
	DOREPLIFETIME(UFGFoliageRemovalBundle, FoliageType);
	DOREPLIFETIME(UFGFoliageRemovalBundle, FoliageCell);
	DOREPLIFETIME(UFGFoliageRemovalBundle, NumHashes);
}
void UFGFoliageRemovalBundle::PostInitProperties(){ Super::PostInitProperties(); }
bool UFGFoliageRemovalBundle::IsSupportedForNetworking() const{ return bool(); }
void AFGFoliageStateRepProxy::ConfirmFullyReplicated(UFGFoliageRemovalBundle::FRreplicatorWrapper replicator){ }
AFGFoliageStateRepProxy::AFGFoliageStateRepProxy() : Super() {
	this->mReplicationRadius = 102400.0;
	this->mMaxPendingBundles = 24;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->bOnlyRelevantToOwner = true;
	this->bReplicateUsingRegisteredSubObjectList = true;
	this->NetDormancy = ENetDormancy::DORM_Awake;
	this->NetPriority = 0.5;
	this->RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
}
void AFGFoliageStateRepProxy::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGFoliageStateRepProxy, mPendingBundles);
}
void AFGFoliageStateRepProxy::Tick(float DeltaTime){ Super::Tick(DeltaTime); }
void AFGFoliageStateRepProxy::BeginPlay(){ Super::BeginPlay(); }
void AFGFoliageStateRepProxy::Server_ConfirmFullyReplicated_Implementation(UFGFoliageRemovalBundle* replicator){ }
void AFGFoliageStateRepProxy::OnFoliageBucketRemoved(const FIntVector& inCell, const UFoliageType* forFoliageType, int32 bucketId){ }
