// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGTutorialIntroManager.h"

AFGTutorialIntroManager* AFGTutorialIntroManager::Get(UWorld* world){ return nullptr; }
AFGTutorialIntroManager* AFGTutorialIntroManager::Get(UObject* worldContext){ return nullptr; }
AFGTutorialIntroManager::AFGTutorialIntroManager() : Super() {
	this->mTradingPostBuilt = false;
	this->mPendingTutorial = EIntroTutorialSteps::ITS_NONE;
	this->mHasCompletedIntroTutorial = false;
	this->mHasCompletedIntroSequence = false;
	this->mTradingPostDescriptor = nullptr;
	this->mTradingPost = nullptr;
	this->mIronOreDescriptor = nullptr;
	this->mDidPickUpIronOre = false;
	this->mDropPodItemClass = nullptr;
	this->mDidDismantleDropPod = false;
	this->mStunSpearItemClass = nullptr;
	this->mDidEquipStunSpear = false;
	this->mStep1UpgradeSchematic = nullptr;
	this->mDidStep1Upgrade = false;
	this->mStep1_5UpgradeSchematic = nullptr;
	this->mDidStep1_5Upgrade = false;
	this->mStep2UpgradeSchematic = nullptr;
	this->mDidStep2Upgrade = false;
	this->mStep3UpgradeSchematic = nullptr;
	this->mDidStep3Upgrade = false;
	this->mStep4UpgradeSchematic = nullptr;
	this->mDidStep4Upgrade = false;
	this->mStep5UpgradeSchematic = nullptr;
	this->mDidStep5Upgrade = false;
	this->mStartingPodClass = nullptr;
	this->mStartingPod = nullptr;
	this->mTradingPostLevel = 0;
	this->mWaitTimeAfterCompletingMinorStep = 0.0;
	this->mWaitTimeAfterCompletingHubStep = 0.0;
	this->mHoldTimeToSkipIntro = 0.0;
	this->mDidOpenCodex = false;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
}
void AFGTutorialIntroManager::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGTutorialIntroManager::Tick(float DeltaTime){ }
void AFGTutorialIntroManager::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGTutorialIntroManager::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGTutorialIntroManager::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGTutorialIntroManager::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGTutorialIntroManager::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGTutorialIntroManager::NeedTransform_Implementation(){ return bool(); }
bool AFGTutorialIntroManager::ShouldSave_Implementation() const{ return bool(); }
void AFGTutorialIntroManager::AddPlayer( AFGCharacterPlayer* inPlayer){ }
void AFGTutorialIntroManager::OnDismantleDropPod(){ }
void AFGTutorialIntroManager::SetTradingPostLevel(int32 newLevel){ }
void AFGTutorialIntroManager::SetInputGatesFromTutorialLevel( AFGPlayerController* playerController){ }
void AFGTutorialIntroManager::SetupDropPod( AFGCharacterPlayer* forPlayer){ }
void AFGTutorialIntroManager::TradingPostWasBuilt(){ }
void AFGTutorialIntroManager::StartSkipIntroSequence(){ }
void AFGTutorialIntroManager::CancelSkipIntroSequence(){ }
void AFGTutorialIntroManager::EndSkipIntroSequence(){ }
float AFGTutorialIntroManager::GetNormalizedProgressToSkip(){ return float(); }
void AFGTutorialIntroManager::CompleteTutorial(){ }
void AFGTutorialIntroManager::IntroDone(){ }
void AFGTutorialIntroManager::ResetHubTutorial(){ }
void AFGTutorialIntroManager::SetCanSkipTutorialIntro(bool canSkip){ }
void AFGTutorialIntroManager::GiveTutorialResources( AFGCharacterPlayer* inPlayer){ }
void AFGTutorialIntroManager::OnCodexOpened(){ }
void AFGTutorialIntroManager::BeginPlay(){ }
void AFGTutorialIntroManager::OnBuildingBuiltGlobal( AFGBuildable* buildable){ }
void AFGTutorialIntroManager::OnSchematicPurchased(TSubclassOf< UFGSchematic > newSchematic){ }
void AFGTutorialIntroManager::UpdateTutorial(EIntroTutorialSteps nextTutorialStep){ }
void AFGTutorialIntroManager::HandlePendingTutorials(){ }
void AFGTutorialIntroManager::ClearActiveTutorialHint(){ }
void AFGTutorialIntroManager::OnPlayerAddedItemToInventory(TSubclassOf<  UFGItemDescriptor > itemClass, int32 numAdded){ }
void AFGTutorialIntroManager::OnPlayerAddedItemToArmSlot(TSubclassOf<  UFGItemDescriptor > itemClass, int32 numAdded){ }
void AFGTutorialIntroManager::SetTradingpostBuilt(bool hasbuilt){ }
void AFGTutorialIntroManager::OnIntroDone(){ }
void AFGTutorialIntroManager::OnRep_TradingPostLevel(){ }
bool AFGTutorialIntroManager::ShouldSkipTutorial() const{ return bool(); }
