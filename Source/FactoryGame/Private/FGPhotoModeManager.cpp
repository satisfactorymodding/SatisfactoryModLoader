// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGPhotoModeManager.h"

AFGPhotoModeManager::AFGPhotoModeManager() : Super() {
	this->mCachedPlayer = nullptr;
	this->mCachedPlayerController = nullptr;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
}
AFGPhotoModeManager* AFGPhotoModeManager::Get( UWorld* world){ return nullptr; }
AFGPhotoModeManager* AFGPhotoModeManager::Get( UObject* worldContext){ return nullptr; }
void AFGPhotoModeManager::BeginPlay(){ }
void AFGPhotoModeManager::Tick(float DeltaSeconds){ }
void AFGPhotoModeManager::ToggleAdvancedPhotoMode(){ }
void AFGPhotoModeManager::AddCurrentPlayerLocation(FFrameTime frameTime){ }
void AFGPhotoModeManager::AddPlayerLocation(FFrameTime frameTime, FVector location){ }
void AFGPhotoModeManager::AddCurrentPlayerRotation(FFrameTime frameTime){ }
void AFGPhotoModeManager::AddPlayerRotation(FFrameTime frameTime, FRotator rotator){ }
void AFGPhotoModeManager::AddCurrentPlayerFOV(FFrameTime frameTime){ }
void AFGPhotoModeManager::AddPlayerFOV(FFrameTime frameTime, float FOV){ }
void AFGPhotoModeManager::AddCurrentPlayerLocAndRot(FFrameTime frameTime){ }
void AFGPhotoModeManager::AddCurrentPlayerAllValues(FFrameTime frameTime){ }
void AFGPhotoModeManager::RemovePlayerLocation(FFrameTime frameTime){ }
void AFGPhotoModeManager::RemovePlayerRotation(FFrameTime frameTime){ }
void AFGPhotoModeManager::RemovePlayerFOV(FFrameTime frameTime){ }
void AFGPhotoModeManager::PlaySequence(){ }
void AFGPhotoModeManager::ClearSequence(){ }
void AFGPhotoModeManager::EvaluateFrame(const FFrameTime& time, FVector& out_location, FRotator& out_rotation, float& out_FOV){ }
void AFGPhotoModeManager::EvaluateFrameDry(const FFrameTime& time, FVector& out_location, FRotator& out_rotation, float& out_FOV){ }
FVector AFGPhotoModeManager::GetLocationAtFrame(const FFrameTime& time){ return FVector(); }
FRotator AFGPhotoModeManager::GetRotationAtFrame(const FFrameTime& time){ return FRotator(); }
float AFGPhotoModeManager::GetFOVAtFrame(const FFrameTime& time){ return float(); }
bool AFGPhotoModeManager::IsAdvancedPhotoModeAvailable() const{ return bool(); }
void AFGPhotoModeManager::Debug_ToggleDebug(){ }
void AFGPhotoModeManager::Debug_ShowInfo(){ }
AFGCharacterPlayer* AFGPhotoModeManager::GetPlayer(){ return nullptr; }
AFGPlayerController* AFGPhotoModeManager::GetPlayerController(){ return nullptr; }
