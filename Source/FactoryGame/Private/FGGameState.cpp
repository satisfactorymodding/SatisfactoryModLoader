// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGGameState.h"
#include "Net/UnrealNetwork.h"

void UFGGameStateRemoteCallObject::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGGameStateRemoteCallObject, mForceNetField_UFGGameStateRemoteCallObject);
}
UFGGameStateRemoteCallObject* UFGGameStateRemoteCallObject::Get(UWorld* world){ return nullptr; }
void UFGGameStateRemoteCallObject::Server_SetCreativeModeEnabled_Implementation(){ }
void UFGGameStateRemoteCallObject::Client_SendAutoSaveTimeNotification_Implementation(float timeLeft){ }
void UFGGameStateRemoteCallObject::Client_SendAutoSaveFinishedNotification_Implementation(){ }
void UFGGameStateRemoteCallObject::Client_SendRestartTimeNotification_Implementation(float timeLeft){ }
AFGGameState::AFGGameState() : Super() {
	this->mTurboModeMultiplier = 0.0;
	this->mStorySubsystem = nullptr;
	this->mRailroadSubsystem = nullptr;
	this->mCircuitSubsystem = nullptr;
	this->mRecipeManager = nullptr;
	this->mSchematicManager = nullptr;
	this->mGamePhaseManager = nullptr;
	this->mResearchManager = nullptr;
	this->mTutorialIntroManager = nullptr;
	this->mActorRepresentationManager = nullptr;
	this->mMapManager = nullptr;
	this->mRadioactivitySubsystem = nullptr;
	this->mChatManager = nullptr;
	this->mCentralStorageSubsystem = nullptr;
	this->mPipeSubsystem = nullptr;
	this->mUnlockSubsystem = nullptr;
	this->mResourceSinkSubsystem = nullptr;
	this->mItemRegrowSubsystem = nullptr;
	this->mVehicleSubsystem = nullptr;
	this->mEventSubsystem = nullptr;
	this->mWorldGridSubsystem = nullptr;
	this->mDroneSubsystem = nullptr;
	this->mStatisticsSubsystem = nullptr;
	this->mSignSubsystem = nullptr;
	this->mCreatureSubsystem = nullptr;
	this->mScannableSubsystem = nullptr;
	this->mBlueprintSubsystem = nullptr;
	this->mGameRulesSubsystem = nullptr;
	this->mIconDatabaseSubsystem = nullptr;
	this->mWorldEventSubsystem = nullptr;
	this->mTestManager = nullptr;
	this->mProjectAssembly = nullptr;
	this->mConveyorChainSubsystem = nullptr;
	this->mReplicatedSessionName = TEXT("");
	this->mUnlockCustomizerSchematic = nullptr;
	this->mCheatNoCost = false;
	this->mCheatNoPower = false;
	this->mCheatNoFuel = false;
	this->mIsTradingPostBuilt = false;
	this->mHasInitalTradingPostLandAnimPlayed = false;
	this->mIsSpaceElevatorBuilt = false;
	this->mPublicTodoList = TEXT("");
	this->mHasGivenStartingRecipes = false;
	this->mIsCreativeModeEnabled = false;
}
void AFGGameState::Serialize(FArchive& ar){ Super::Serialize(ar); }
void AFGGameState::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGGameState, mStorySubsystem);
	DOREPLIFETIME(AFGGameState, mRailroadSubsystem);
	DOREPLIFETIME(AFGGameState, mCircuitSubsystem);
	DOREPLIFETIME(AFGGameState, mRecipeManager);
	DOREPLIFETIME(AFGGameState, mSchematicManager);
	DOREPLIFETIME(AFGGameState, mGamePhaseManager);
	DOREPLIFETIME(AFGGameState, mResearchManager);
	DOREPLIFETIME(AFGGameState, mTutorialIntroManager);
	DOREPLIFETIME(AFGGameState, mActorRepresentationManager);
	DOREPLIFETIME(AFGGameState, mMapManager);
	DOREPLIFETIME(AFGGameState, mChatManager);
	DOREPLIFETIME(AFGGameState, mCentralStorageSubsystem);
	DOREPLIFETIME(AFGGameState, mPipeSubsystem);
	DOREPLIFETIME(AFGGameState, mUnlockSubsystem);
	DOREPLIFETIME(AFGGameState, mResourceSinkSubsystem);
	DOREPLIFETIME(AFGGameState, mVehicleSubsystem);
	DOREPLIFETIME(AFGGameState, mEventSubsystem);
	DOREPLIFETIME(AFGGameState, mDroneSubsystem);
	DOREPLIFETIME(AFGGameState, mSignSubsystem);
	DOREPLIFETIME(AFGGameState, mCreatureSubsystem);
	DOREPLIFETIME(AFGGameState, mScannableSubsystem);
	DOREPLIFETIME(AFGGameState, mBlueprintSubsystem);
	DOREPLIFETIME(AFGGameState, mGameRulesSubsystem);
	DOREPLIFETIME(AFGGameState, mIconDatabaseSubsystem);
	DOREPLIFETIME(AFGGameState, mWorldEventSubsystem);
	DOREPLIFETIME(AFGGameState, mProjectAssembly);
	DOREPLIFETIME(AFGGameState, mConveyorChainSubsystem);
	DOREPLIFETIME(AFGGameState, mVisitedMapAreas);
	DOREPLIFETIME(AFGGameState, mPickedUpItems);
	DOREPLIFETIME(AFGGameState, mPlayDurationWhenLoaded);
	DOREPLIFETIME(AFGGameState, mReplicatedSessionName);
	DOREPLIFETIME(AFGGameState, mBuildingColorSlots_Data);
	DOREPLIFETIME(AFGGameState, mBuildableLightColorSlots);
	DOREPLIFETIME(AFGGameState, mPlayerGlobalColorPresets);
	DOREPLIFETIME(AFGGameState, mSwatchGroupDatum);
	DOREPLIFETIME(AFGGameState, mCheatNoCost);
	DOREPLIFETIME(AFGGameState, mCheatNoPower);
	DOREPLIFETIME(AFGGameState, mCheatNoFuel);
	DOREPLIFETIME(AFGGameState, mIsTradingPostBuilt);
	DOREPLIFETIME(AFGGameState, mHasInitalTradingPostLandAnimPlayed);
	DOREPLIFETIME(AFGGameState, mIsSpaceElevatorBuilt);
	DOREPLIFETIME(AFGGameState, mServerLocalDateTimeTicksAtInit);
	DOREPLIFETIME(AFGGameState, mTetrominoLeaderBoard);
	DOREPLIFETIME(AFGGameState, mPublicTodoList);
	DOREPLIFETIME(AFGGameState, mIsCreativeModeEnabled);
}
void AFGGameState::BeginPlay(){ Super::BeginPlay(); }
void AFGGameState::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGGameState::NeedTransform_Implementation(){ return bool(); }
bool AFGGameState::ShouldSave_Implementation() const{ return bool(); }
void AFGGameState::HandleMatchIsWaitingToStart(){ }
void AFGGameState::HandleMatchHasStarted(){ }
void AFGGameState::AddPlayerState( APlayerState* playerState){ }
void AFGGameState::RemovePlayerState( APlayerState* playerState){ }
void AFGGameState::OnPlayerStateSlotDataUpdated( AFGPlayerState* playerState){ }
void AFGGameState::Init(){ }
bool AFGGameState::AreClientSubsystemsValid() const{ return bool(); }
void AFGGameState::CheckClientSubsystemsValid(){ }
int32 AFGGameState::FindFreeSlot( AFGPlayerState* playerState){ return int32(); }
bool AFGGameState::IsTradingPostBuilt() const{ return bool(); }
bool AFGGameState::HasInitalTradingPostLandAnimPlayed() const{ return bool(); }
void AFGGameState::SetHasInitalTradingPostLandAnimPlayed(){ }
bool AFGGameState::IsSpaceElevatorBuilt() const{ return bool(); }
void AFGGameState::SetProjectAssembly( AFGProjectAssembly* projectAssembly){ }
void AFGGameState::GetVisitedMapAreas(TArray< TSubclassOf< UFGMapArea > >& out_VisitedAreas){ }
bool AFGGameState::IsMapAreaVisisted(TSubclassOf< UFGMapArea > inArea){ return bool(); }
void AFGGameState::AddUniqueVisistedMapArea(TSubclassOf< UFGMapArea > mapArea){ }
void AFGGameState::OnRep_MapAreaVisited(){ }
void AFGGameState::OnRep_SessionName(){ }
void AFGGameState::SetCheatNoPower(bool noPower){ }
void AFGGameState::SetCheatNoCost(bool noCost){ }
void AFGGameState::SetCheatNoFuel(bool noFuel){ }
void AFGGameState::NotifyPlayerAdded( AFGCharacterPlayer* inPlayer){ }
int32 AFGGameState::GetTotalPlayDuration() const{ return int32(); }
void AFGGameState::SetSessionName(const FString& inName){ }
void AFGGameState::SetupColorSlots_Data(const TArray< FFactoryCustomizationColorSlot >& colorSlotsPrimary_Data){ }
void AFGGameState::Server_SetBuildingColorDataForSlot_Implementation(uint8 slotIdx, FFactoryCustomizationColorSlot colorData){ }
void AFGGameState::RemovePlayerColorPresetAtIndex(int32 index){ }
void AFGGameState::AddPlayerColorPreset(FText presetName, FLinearColor color){ }
FLinearColor AFGGameState::GetBuildingColorPrimary_Linear(uint8 slot){ return FLinearColor(); }
FLinearColor AFGGameState::GetBuildingColorSecondary_Linear(uint8 slot){ return FLinearColor(); }
void AFGGameState::Server_SetBuildableLightColorSlot_Implementation(uint8 slotIdx, FLinearColor color){ }
FFactoryCustomizationColorSlot AFGGameState::GetBuildingColorDataForSlot(uint8 slot){ return FFactoryCustomizationColorSlot(); }
TSubclassOf< class UFGFactoryCustomizationDescriptor_Swatch > AFGGameState::GetCurrentSwatchForSwatchGroup(TSubclassOf< UFGSwatchGroup > swatchGroup){ return TSubclassOf<class UFGFactoryCustomizationDescriptor_Swatch>(); }
void AFGGameState::OnRep_BuildingColorSlot_Data(){ }
void AFGGameState::OnRep_BuildableLightColorSlots(){ }
void AFGGameState::ClaimPlayerColor( AFGPlayerState* playerState){ }
void AFGGameState::ReleasePlayerColor( AFGPlayerState* playerState){ }
void AFGGameState::ItemPickedUp(TSubclassOf<  UFGItemDescriptor > itemClass){ }
FDateTime AFGGameState::GetServerLocalDateTime() const{ return FDateTime(); }
void AFGGameState::OnRep_OnlineSessionVisibility(){ }
bool AFGGameState::IsCustomizerRecipeUnlocked(){ return bool(); }
void AFGGameState::SetDefaultSwatchForBuildableGroup(TSubclassOf<  UFGSwatchGroup > swatchGroup, TSubclassOf<  UFGFactoryCustomizationDescriptor_Swatch> swatch){ }
void AFGGameState::AddTetrominoResult(const FMiniGameResult& newResult){ }
void AFGGameState::OnRep_TetrominoLeaderBoard(){ }
void AFGGameState::OnRep_RecipeManager(){ }
void AFGGameState::Server_SetPublicTodoList(const FString& newTodoList){ }
void AFGGameState::SetCreativeModeEnabled(){ }
AFGPlayerState* AFGGameState::FindPlayerStateForOnlineUser(UOnlineUserInfo* userInfo){ return nullptr; }
void AFGGameState::BroadcastAutoSaveTimeNotification(float timeLeft) const{ }
void AFGGameState::BroadcastAutoSaveFinishedNotification() const{ }
void AFGGameState::BroadcastServerRestartTimeNotification(float timeLeft) const{ }
void AFGGameState::OnRep_CheatNoPower(){ }
void AFGGameState::OnRep_CreativeModeEnabled(){ }
void AFGGameState::SubmitNumPlayersTelemetry() const{ }
void AFGGameState::SubmitCheatTelemetry() const{ }
void AFGGameState::TryGiveStartingRecipes( AFGCharacterPlayer* inPlayer){ }
