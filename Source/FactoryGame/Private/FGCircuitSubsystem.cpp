// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGCircuitSubsystem.h"
#include "Net/UnrealNetwork.h"

AFGCircuitSubsystem::AFGCircuitSubsystem() : Super() {
	this->mCriticalBatteryDepletionPercent = 0.25;
	this->mMinimumBatteryWarningInterval = 10.0;
	this->mPowerCircuitStabilityTimeRequirement = 3.0;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->bReplicateUsingRegisteredSubObjectList = true;
}
void AFGCircuitSubsystem::EndPlay(const EEndPlayReason::Type EndPlayReason){ Super::EndPlay(EndPlayReason); }
void AFGCircuitSubsystem::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGCircuitSubsystem, mReplicatedCircuits);
	DOREPLIFETIME(AFGCircuitSubsystem, mPriorityPowerSwitchInfos);
}
void AFGCircuitSubsystem::PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker){ }
AFGCircuitSubsystem* AFGCircuitSubsystem::Get(UWorld* world){ return nullptr; }
AFGCircuitSubsystem* AFGCircuitSubsystem::GetCircuitSubsystem(UObject* worldContext){ return nullptr; }
void AFGCircuitSubsystem::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCircuitSubsystem::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCircuitSubsystem::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCircuitSubsystem::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGCircuitSubsystem::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGCircuitSubsystem::NeedTransform_Implementation(){ return bool(); }
bool AFGCircuitSubsystem::ShouldSave_Implementation() const{ return bool(); }
void AFGCircuitSubsystem::Serialize(FArchive& ar){ Super::Serialize(ar); }
void AFGCircuitSubsystem::AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector){ }
void AFGCircuitSubsystem::BeginPlay(){ Super::BeginPlay(); }
void AFGCircuitSubsystem::Tick(float DeltaSeconds){ Super::Tick(DeltaSeconds); }
void AFGCircuitSubsystem::DebugRebuildAll(){ }
void AFGCircuitSubsystem::DisplayDebug( UCanvas* canvas, const  FDebugDisplayInfo& debugDisplay, float& YL, float& YPos){ }
void AFGCircuitSubsystem::ConnectComponents( UFGCircuitConnectionComponent* first,  UFGCircuitConnectionComponent* second){ }
void AFGCircuitSubsystem::DisconnectComponents( UFGCircuitConnectionComponent* first,  UFGCircuitConnectionComponent* second){ }
void AFGCircuitSubsystem::RemoveComponent( UFGCircuitConnectionComponent* component){ }
void AFGCircuitSubsystem::SetCircuitBridgesModified(){ }
void AFGCircuitSubsystem::AddCircuitBridge(TWeakObjectPtr< AFGBuildableCircuitBridge > circuitBridge){ }
void AFGCircuitSubsystem::RemoveCircuitBridge(TWeakObjectPtr< AFGBuildableCircuitBridge > circuitBridge){ }
void AFGCircuitSubsystem::PowerCircuit_OnFuseSet_Implementation(const TArray<  UFGPowerCircuit* >& circuits){ }
void AFGCircuitSubsystem::PowerCircuit_OnFuseReset_Implementation(const TArray<  UFGPowerCircuit* >& circuits,  AFGPlayerController* fuseResetInstigator){ }
void AFGCircuitSubsystem::PowerCircuit_RegisterPriorityPowerSwitchInfo( AFGPriorityPowerSwitchInfo* info){ }
void AFGCircuitSubsystem::PowerCircuit_UnregisterPriorityPowerSwitchInfo( AFGPriorityPowerSwitchInfo* info){ }
TArray< AFGPriorityPowerSwitchInfo* > AFGCircuitSubsystem::PowerCircuit_GetPriorityPowerSwitchInfos() const{ return TArray<AFGPriorityPowerSwitchInfo*>(); }
void AFGCircuitSubsystem::PowerCircuit_SortPriorityPowerSwitchInfos(TArray< AFGPriorityPowerSwitchInfo* >& infos) const{ }
void AFGCircuitSubsystem::PowerCircuit_SetPrioritySwitchGroupOn(int32 priority, bool on){ }
void AFGCircuitSubsystem::Debug_DumpCircuitsToLog(){ }
void AFGCircuitSubsystem::ClearAllTimers(){ }
void AFGCircuitSubsystem::StableCircuitCallback(const FPowerCircuitFuseStabilityData circuitStabilityData){ }
void AFGCircuitSubsystem::OnRep_ReplicatedCircuits(){ }
int32 AFGCircuitSubsystem::GenerateUniqueCircuitID(){ return int32(); }
void AFGCircuitSubsystem::MergeCircuits(int32 first, int32 second){ }
int32 AFGCircuitSubsystem::CreateCircuit(TSubclassOf<  UFGCircuit > circuitClass){ return int32(); }
int32 AFGCircuitSubsystem::SplitCircuit(const UFGCircuit* circuit){ return int32(); }
void AFGCircuitSubsystem::RemoveCircuit(int32 circuitID){ }
void AFGCircuitSubsystem::RebuildCircuitGroups(){ }
void AFGCircuitSubsystem::RebuildCircuit(int32 circuitID){ }
void AFGCircuitSubsystem::AddComponentToCircuit( UFGCircuitConnectionComponent* component, int32 circuitID, bool rebuildTrivialCircuits){ }
void AFGCircuitSubsystem::RemoveComponentFromCircuit( UFGCircuitConnectionComponent* component){ }
void AFGCircuitSubsystem::OnPowerCircuitStable( AFGPlayerController* fuseResetInstigator ) const{ }
void AFGCircuitSubsystem::RemovePowerCircuitStabilityData(int32 circuitID){ }
