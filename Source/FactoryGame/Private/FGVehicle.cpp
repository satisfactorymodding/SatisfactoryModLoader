// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGVehicle.h"
#include "Components/SkeletalMeshComponent.h"
#include "FGHealthComponent.h"
#include "FGSwatchGroup.h"
#include "Net/UnrealNetwork.h"

void AFGVehicle::GetClearanceData_Implementation(TArray< FFGClearanceData >& out_data) const {
	out_data = mClearanceData;
}

FVehicleSeat::FVehicleSeat(){ }
void AFGVehicle::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGVehicle, mHealthComponent);
	DOREPLIFETIME(AFGVehicle, mNetConstructionID);
	DOREPLIFETIME(AFGVehicle, mCustomizationData);
	DOREPLIFETIME(AFGVehicle, mBuiltWithRecipe);
	DOREPLIFETIME(AFGVehicle, mBuildEffectInstigator);
	DOREPLIFETIME(AFGVehicle, mOwningPlayerState);
	DOREPLIFETIME(AFGVehicle, mMatchCustomizationDataWithPlayerState);
	DOREPLIFETIME(AFGVehicle, mIsSelfDriving);
	DOREPLIFETIME(AFGVehicle, mIsSubmergedInWater);
	DOREPLIFETIME(AFGVehicle, mIsSimulated);
	DOREPLIFETIME(AFGVehicle, mMapText);
}
bool AFGVehicle::IsRelevancyOwnerFor(const AActor* Actor, const AActor* Owner1, const AActor* ConnectionActor) const{ return bool(); }
AFGVehicle::AFGVehicle() : Super() {
	this->mDisplayName = INVTEXT("");
	this->mDescription = INVTEXT("");
	this->mHologramClass = nullptr;
	this->mMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("VehicleMesh"));
	this->mHealthComponent = CreateDefaultSubobject<UFGHealthComponent>(TEXT("HealthComponent"));
	this->mDOTReceiverComponent = nullptr;
	this->mDisabledByWaterLocations.Add(FVector::ZeroVector);
	this->mFactorySkinClass = nullptr;
	this->mSwatchGroup = UFGSwatchGroup_Vehicle::StaticClass();
	this->mOptionalWorkBenchComponent = nullptr;
	this->mOptionalWorkBenchBox = nullptr;
	this->mBuiltWithRecipe = nullptr;
	this->mBuildEffectInstigator = nullptr;
	this->mOwningPlayerState = nullptr;
	this->mMatchCustomizationDataWithPlayerState = false;
	this->mIsSelfDriving = false;
	this->mSelfDrivingController = nullptr;
	this->mConstructSound = nullptr;
	this->mIsDestructible = false;
	this->mIsSubmergedInWater = false;
	this->mSubmergedAngularDamping = 6.0;
	this->mSubmergedLinearDamping = 15.0;
	this->mJumpPadForceMultiplier = 1.0;
	this->mActiveBuildEffect = nullptr;
	this->mIsSimulated = false;
	this->mAddToSignificanceManager = true;
	this->mSignificanceRange = 20000.0;
	this->mSimulationDistance = 20000.0;
	this->mActorRepresentationTexture = nullptr;
	this->mActorRepresentationCompassMaterial = nullptr;
	this->mMapText = INVTEXT("");
	this->AutoPossessAI = EAutoPossessAI::Disabled;
	this->AIControllerClass = nullptr;
	this->bNetLoadOnClient = false;
	this->RootComponent = mMesh;
}
void AFGVehicle::BeginPlay(){ Super::BeginPlay(); }
void AFGVehicle::EndPlay(const EEndPlayReason::Type endPlayReason){ Super::EndPlay(endPlayReason); }
void AFGVehicle::Destroyed(){ Super::Destroyed(); }
void AFGVehicle::Tick(float dt){ Super::Tick(dt); }
float AFGVehicle::TakeDamage(float DamageAmount,  FDamageEvent const& DamageEvent,  AController* EventInstigator, AActor* DamageCauser){ return float(); }
void AFGVehicle::DisplayDebug( UCanvas* canvas, const FDebugDisplayInfo& debugDisplay, float& YL, float& YPos){ }
UPawnMovementComponent* AFGVehicle::GetMovementComponent() const{ return nullptr; }
void AFGVehicle::Serialize(FArchive& ar){ Super::Serialize(ar); }
void AFGVehicle::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGVehicle::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGVehicle::GainedSignificance_Implementation(){ }
void AFGVehicle::LostSignificance_Implementation(){ }
float AFGVehicle::GetSignificanceRange(){ return float(); }
void AFGVehicle::OnBuildEffectFinished(){ }
void AFGVehicle::OnDismantleEffectFinished(){ }
void AFGVehicle::ExecuteBuildEffect(){ }
void AFGVehicle::TurnOffAndDestroy(){ }
void AFGVehicle::PlayDismantleEffects(){ }
void AFGVehicle::SetCustomizationData_Native(const FFactoryCustomizationData& customizationData, bool skipCombine){ }
void AFGVehicle::SetCustomizationData_Implementation(const FFactoryCustomizationData& colorData){ }
void AFGVehicle::ApplyCustomizationData_Native(const FFactoryCustomizationData& customizationData){ }
TSubclassOf< UFGFactoryCustomizationDescriptor_Skin > AFGVehicle::GetActiveSkin_Native(){ return TSubclassOf<UFGFactoryCustomizationDescriptor_Skin>(); }
TSubclassOf< UFGFactoryCustomizationDescriptor_Skin > AFGVehicle::GetActiveSkin_Implementation(){ return TSubclassOf<UFGFactoryCustomizationDescriptor_Skin>(); }
void AFGVehicle::StartIsAimedAtForColor_Implementation( AFGCharacterPlayer* byCharacter, bool isValid){ }
void AFGVehicle::StopIsAimedAtForColor_Implementation( AFGCharacterPlayer* byCharacter){ }
void AFGVehicle::UpdateUseState_Implementation( AFGCharacterPlayer* byCharacter, const FVector& atLocation,  UPrimitiveComponent* componentHit, FUseState& out_useState){ }
void AFGVehicle::OnUse_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
void AFGVehicle::OnUseStop_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
bool AFGVehicle::IsUseable_Implementation() const{ return bool(); }
void AFGVehicle::StopIsLookedAt_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
FText AFGVehicle::GetLookAtDecription_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state) const{ return FText(); }
void AFGVehicle::RegisterInteractingPlayer_Implementation( AFGCharacterPlayer* player){ }
void AFGVehicle::UnregisterInteractingPlayer_Implementation( AFGCharacterPlayer* player){ }
bool AFGVehicle::CanDismantle_Implementation() const{ return bool(); }
void AFGVehicle::GetDismantleRefund_Implementation(TArray< FInventoryStack >& out_refund, bool noBuildCostEnabled) const{ }
FVector AFGVehicle::GetRefundSpawnLocationAndArea_Implementation(const FVector& aimHitLocation, float& out_radius) const{ return FVector(); }
void AFGVehicle::PreUpgrade_Implementation(){ }
void AFGVehicle::Upgrade_Implementation(AActor* newActor){ }
void AFGVehicle::Dismantle_Implementation(){ }
void AFGVehicle::StartIsLookedAtForDismantle_Implementation(AFGCharacterPlayer* byCharacter){ }
void AFGVehicle::StopIsLookedAtForDismantle_Implementation(AFGCharacterPlayer* byCharacter){ }
void AFGVehicle::GetChildDismantleActors_Implementation(TArray< AActor* >& out_ChildDismantleActors) const{ }
FText AFGVehicle::GetDismantleDisplayName_Implementation(AFGCharacterPlayer* byCharacter) const{ return FText(); }
void AFGVehicle::GetDismantleDisqualifiers_Implementation(TArray<TSubclassOf<UFGConstructDisqualifier>>& out_dismantleDisqualifiers, const TArray<AActor*>& allSelectedActors) const{ }
void AFGVehicle::NetMulticast_Dismantle_Implementation(){ }
TSubclassOf< class UFGItemDescriptor > AFGVehicle::GetBuiltWithDescriptor() const{ return TSubclassOf<class UFGItemDescriptor>(); }
bool AFGVehicle::CanBeSampled(){ return bool(); }
USkeletalMeshComponent* AFGVehicle::GetMesh() const{ return nullptr; }
bool AFGVehicle::DriverEnter( AFGCharacterPlayer* driver){ return bool(); }
bool AFGVehicle::DriverLeave(bool keepDriving){ return bool(); }
bool AFGVehicle::CanSelfDriverEnter( AAIController* ai) const{ return bool(); }
bool AFGVehicle::SelfDriverEnter( AAIController* ai){ return bool(); }
void AFGVehicle::KickAllPlayers(){ }
void AFGVehicle::Stat_Cost(TArray< FItemAmount >& out_amount) const{ }
void AFGVehicle::Stat_StockInventory(TArray< FItemAmount >& out_amount) const{ }
void AFGVehicle::SetForceRealMode(bool forceRealMode){ }
void AFGVehicle::SetForceSimulationMode(bool forceSimulationMode){ }
void AFGVehicle::SetSimulated(bool newIsSimulated){ }
void AFGVehicle::ApplyMeshPrimitiveData(const FFactoryCustomizationData& customizationData){ }
void AFGVehicle::ApplySkinData(TSubclassOf< UFGFactoryCustomizationDescriptor_Skin > newSkinDesc){ }
TSubclassOf< class UFGFactoryCustomizationDescriptor_Swatch > AFGVehicle::GetDefaultSwatchCustomizationOverride(UObject* worldContext){ return TSubclassOf<class UFGFactoryCustomizationDescriptor_Swatch>(); }
void AFGVehicle::OnSkinCustomizationApplied_Implementation(TSubclassOf<  UFGFactoryCustomizationDescriptor_Skin > skin){ }
FVector AFGVehicle::GetVehicleRealActorLocation() const{ return FVector(); }
bool AFGVehicle::IsSubmergedInWater() const{ return bool(); }
void AFGVehicle::SetOwningPlayerState( AFGPlayerState* playerState){ }
void AFGVehicle::SetMatchCustomizationWithPlayerState(bool shouldMatch){ }
void AFGVehicle::OnCustomizationDataApplied(const FFactoryCustomizationData& customizationData){ }
void AFGVehicle::OnCustomizationDataSet(const FFactoryCustomizationData& previousData){ }
void AFGVehicle::OnRep_IsSimulated(){ }
void AFGVehicle::ToggleEntireVehicleOutline(const bool isOutlined, const EOutlineColor& outlineColor){ }
void AFGVehicle::OnTakeDamage(AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ }
void AFGVehicle::Died(AActor* thisActor){ }
void AFGVehicle::OnDrivingStatusChanged(){ }
void AFGVehicle::UpdateSubmergedInWater(float deltaTime){ }
void AFGVehicle::SubmergedInWaterUpdated(bool newIsSubmerged){ }
void AFGVehicle::GetDismantleRefundReturns(TArray< FInventoryStack >& out_returns) const{ }
void AFGVehicle::GetDismantleInventoryReturns(TArray< FInventoryStack >& out_returns) const{ }
void AFGVehicle::DestroyVehicle(){ }
void AFGVehicle::ShowOutline(EOutlineColor color) const{ }
void AFGVehicle::HideOutline(){ }
void AFGVehicle::SetSelfDriving(bool newSelfDriving){ }
void AFGVehicle::UpdatePhysicsVolume(APhysicsVolume* physicsVolume){ }
void AFGVehicle::OnRep_CustomColorData(){ }
void AFGVehicle::OnRep_OwningPlayerState( AFGPlayerState* previousPlayerState){ }
void AFGVehicle::OnPlayerCustomizationDataChanged(const  FPlayerCustomizationData& newCustomizationData){ }
void AFGVehicle::UpdateCustomizationDataFromPlayerState(){ }
FName AFGVehicle::VehicleMeshComponentName = FName();
