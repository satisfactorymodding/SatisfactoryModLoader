// This file has been automatically generated by the Unreal Header Implementation tool

#include "Settings/FGAdvancedGameSettings.h"
#include "Settings/FGUserSettingCategory.h"

bool IFGAdvancedGameSettingsInterface::HasChangesThatShouldEnableCreativeMode() const{ return bool(); }
void IFGAdvancedGameSettingsInterface::ApplySettingsFromMap(const TMap<FString, FString>& SettingValues) const{ }
void IFGAdvancedGameSettingsInterface::SerializeSettingsToMap(TMap<FString, FString>& OutSettingValues) const{ }
FString IFGAdvancedGameSettingsInterface::SerializeSettingsToString() const{ return FString(); }
void IFGAdvancedGameSettingsInterface::DeserializeSettingsFromString(const FString& serializedString){ }
void UFGAdvancedGameSettings::Initialize(FSubsystemCollectionBase& Collection){ }
bool UFGAdvancedGameSettings::DoesSupportWorldType(const EWorldType::Type WorldType) const{ return Super::DoesSupportWorldType(WorldType); }
void UFGAdvancedGameSettings::GetAllUserSettings(TArray<UFGUserSettingApplyType*>& OutUserSettings) const{ }
void UFGAdvancedGameSettings::GetAllUserSettingsMap(TMap<FString, UFGUserSettingApplyType*>& OutUserSettings) const{  }
UFGUserSettingApplyType* UFGAdvancedGameSettings::FindUserSetting(const FString& SettingId) const{ return nullptr; }
bool UFGAdvancedGameSettings::HasAnyUnsavedOptionValueChanges() const{ return bool(); }
bool UFGAdvancedGameSettings::HasPendingApplyOptionValue(const FString& cvar) const{ return bool(); }
void UFGAdvancedGameSettings::RevertUnsavedChanges(){ }
void UFGAdvancedGameSettings::ApplyChanges(){ }
IFGOptionInterface* UFGAdvancedGameSettings::GetPrimaryOptionInterface(UWorld* world) const{ return nullptr; }
bool UFGAdvancedGameSettings::IsInMainMenu() const{ return bool(); }
bool UFGAdvancedGameSettings::IsUsingController() const{ return false; }
void UFGAdvancedGameSettings::GetDebugData(TArray<FString>& out_debugData){ }
void UFGAdvancedGameSettings::OnPreLoadMap(const FString &MapName){ }
void UFGAdvancedGameSettings::TryInitAdvancedGameSettings(){ }
